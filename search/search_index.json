{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python\u670d\u52a1\u7aef\u5165\u95e8\u4e0e\u8fdb\u9636\u6307\u5357 \u7f16\u8005\u6309 \u672c\u6587\u6863\u662f\u7b14\u8005\u5728\u5b66\u4e60\u4e0e\u5b9e\u9645\u4f7f\u7528Python\u8fdb\u884c\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u6240\u505a\u7684\u7b14\u8bb0\u6216\u8005\u5199\u7684\u4e00\u4e9bdemo\u6c47\u96c6\u800c\u6210\u7684\u7efc\u5408\u6027\u7684\u6307\u5357\u3002\u6700\u8fd1\u81ea\u5df1\u4e5f\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u5c06\u96f6\u6563\u7684\u7b14\u8bb0\u6216\u535a\u5ba2\u6574\u5408\u4e86\u4e00\u4e0b\uff0c\u91cc\u9762\u7684\u6848\u4f8b\u57fa\u672c\u90fd\u662f\u81ea\u5df1\u5e73\u65f6\u5199\u4e1a\u52a1\u4ee3\u7801\u8e29\u8fc7\u7684\u5751\u6216\u8005\u603b\u7ed3\u7684\u6bd4\u8f83\u597d\u7684issue\uff0c\u5e0c\u671b\u5bf9\u4ece\u4e8bPython\u5f00\u53d1\u5de5\u4f5c\u7684\u8bfb\u8005\u4eec\u6709\u6240\u5e2e\u52a9\u3002 \u672c\u6587\u6863\u4f7f\u7528\u4e86 mkdocs \u8fdb\u884c\u64b0\u5199\u5e76\u6258\u7ba1\u5230github\u4e0a\u514d\u8d39\u90e8\u7f72\u4e0a\u7ebf\uff0c\u5982\u679c\u4f60\u4e5f\u6709\u5174\u8da3\u81ea\u5df1\u5199\u4e00\u4e2a\u6587\u6863\u53ef\u4ee5\u53c2\u8003\u7b14\u8005\u7684\u8fd9\u7bc7\u535a\u5ba2\uff1a \u4f7f\u7528mkdocs\u64b0\u5199\u6280\u672f\u6587\u6863\u5e76\u514d\u8d39\u90e8\u7f72\u4e0a\u7ebf \u9605\u8bfb\u76ee\u5f55 \u4e00\u3001\u5b9e\u8df5\u603b\u7ed3 01 Python\u9700\u6c42\u4e0e\u63d0\u9ad8\u7bc7 02 py\u6e90\u6587\u4ef6\u7f16\u8bd1 03 \u91cd\u8981\u64cd\u4f5c\u603b\u7ed3 \u4e8c\u3001Python\u5e38\u7528\u6570\u636e\u7c7b\u578b\u6c47\u96c6 01 \u5217\u8868list 02 \u5b57\u5178dict 03 \u5143\u7ec4tuple 04 \u5b57\u7b26\u4e32str 05 \u96c6\u5408set 06 \u6570\u5b57\u7c7b\u578b \u4e09\u3001Python\u5185\u7f6e\u51fd\u6570\u4e0e\u5e38\u7528\u6a21\u5757\u4ecb\u7ecd 01 \u5e38\u7528\u5185\u7f6e\u51fd\u6570 02 \u5f02\u5e38\u5904\u7406 03 os\u6a21\u5757 04 sys\u6a21\u5757 05 time\u6a21\u5757 06 \u5e8f\u5217\u5316\u6a21\u5757 07 string\u6a21\u5757 08 random\u6a21\u5757 09 logging\u6a21\u5757 10 optparse\u6a21\u5757 11 datetime\u4e0edateutil\u6a21\u5757 12 collections\u6a21\u5757 13 \u52a0\u5bc6\u4e0e\u89e3\u5bc6\u6a21\u5757 14 configparser\u6a21\u5757 15 \u6b63\u5219\u8868\u8fbe\u5f0f\u4e0ere\u6a21\u5757 16 python3\u64cd\u4f5cExcel 17 \u64cd\u4f5c\u6570\u636e\u5e93pymysql\u6a21\u5757 18 \u64cd\u4f5c\u6570\u636e\u5e93SQLAlchemy\u6a21\u5757 19 \u6821\u9a8c\u5ba2\u6237\u7aef\u7684\u5408\u6cd5\u6027hmac\u6a21\u5757 \u56db\u3001Python\u8fdb\u9636-\u9762\u5411\u5bf9\u8c61-\u7f51\u7f16\u5e76\u53d1 01 \u8fdb\u9636\u77e5\u8bc6\u70b9\u4e0e\u9762\u5411\u5bf9\u8c61\u6574\u5408 02 \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668 03 \u7f51\u7edc\u7f16\u7a0b\u4e0e\u5e76\u53d1\u7f16\u7a0b 04 Python\u4e2d\u539f\u751fsocket\u7684\u6848\u4f8b 05 Python\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347\u7bc7 06 \u6587\u4ef6\u64cd\u4f5c 07 with\u4e0a\u4e0b\u6587\u7ba1\u7406 08 \u95ed\u5305\u4e0e\u88c5\u9970\u5668 09 Python\u4e2d\u7684\u63cf\u8ff0\u7b26 10 Python\u4e2d\u7684\u6df1\u62f7\u8d1d\u4e0e\u6d45\u62f7\u8d1d 11 Python\u5f02\u6b65\u7f16\u7a0b\u4e0easyncio 12 Python\u534f\u7a0b\u4e0e\u5f02\u6b65io 13 asyncio\u5e76\u53d1\u7f16\u7a0b\u8fdb\u9636 \u4e94\u3001Python\u5b9e\u73b0\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784 01 python\u5b9e\u73b0\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784 \u516d\u3001\u5f00\u53d1\u73af\u5883-\u4e2d\u95f4\u4ef6\u7b49\u5de5\u5177 01 \u7f13\u5b58\u4e0eredis 02 Github\u4e0e\u865a\u62df\u73af\u5883\u7684\u4f7f\u7528 03 Pycharm\u8fde\u63a5\u8fdc\u7a0b\u4ee3\u7801 04 Mac/Linux\u538b\u529b\u6d4b\u8bd5\u795e\u5668Siege \u4e03\u3001Linux\u670d\u52a1\u7aef\u76f8\u5173 01 Linux\u670d\u52a1\u7aef\u76f8\u5173 \u6700\u540e\uff0c\u5982\u679c\u60a8\u89c9\u5f97\u672c\u6307\u5357\u5bf9\u60a8\u6709\u5e2e\u52a9\uff0c\u53ef\u4ee5\u6253\u8d4f\u652f\u6301\u4f5c\u8005\uff0c\u611f\u8c22\u60a8\u7684\u652f\u6301\uff01","title":"Home"},{"location":"#python","text":"","title":"Python\u670d\u52a1\u7aef\u5165\u95e8\u4e0e\u8fdb\u9636\u6307\u5357"},{"location":"#_1","text":"\u672c\u6587\u6863\u662f\u7b14\u8005\u5728\u5b66\u4e60\u4e0e\u5b9e\u9645\u4f7f\u7528Python\u8fdb\u884c\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u6240\u505a\u7684\u7b14\u8bb0\u6216\u8005\u5199\u7684\u4e00\u4e9bdemo\u6c47\u96c6\u800c\u6210\u7684\u7efc\u5408\u6027\u7684\u6307\u5357\u3002\u6700\u8fd1\u81ea\u5df1\u4e5f\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u5c06\u96f6\u6563\u7684\u7b14\u8bb0\u6216\u535a\u5ba2\u6574\u5408\u4e86\u4e00\u4e0b\uff0c\u91cc\u9762\u7684\u6848\u4f8b\u57fa\u672c\u90fd\u662f\u81ea\u5df1\u5e73\u65f6\u5199\u4e1a\u52a1\u4ee3\u7801\u8e29\u8fc7\u7684\u5751\u6216\u8005\u603b\u7ed3\u7684\u6bd4\u8f83\u597d\u7684issue\uff0c\u5e0c\u671b\u5bf9\u4ece\u4e8bPython\u5f00\u53d1\u5de5\u4f5c\u7684\u8bfb\u8005\u4eec\u6709\u6240\u5e2e\u52a9\u3002 \u672c\u6587\u6863\u4f7f\u7528\u4e86 mkdocs \u8fdb\u884c\u64b0\u5199\u5e76\u6258\u7ba1\u5230github\u4e0a\u514d\u8d39\u90e8\u7f72\u4e0a\u7ebf\uff0c\u5982\u679c\u4f60\u4e5f\u6709\u5174\u8da3\u81ea\u5df1\u5199\u4e00\u4e2a\u6587\u6863\u53ef\u4ee5\u53c2\u8003\u7b14\u8005\u7684\u8fd9\u7bc7\u535a\u5ba2\uff1a \u4f7f\u7528mkdocs\u64b0\u5199\u6280\u672f\u6587\u6863\u5e76\u514d\u8d39\u90e8\u7f72\u4e0a\u7ebf","title":"\u7f16\u8005\u6309"},{"location":"#_2","text":"","title":"\u9605\u8bfb\u76ee\u5f55"},{"location":"#_3","text":"01 Python\u9700\u6c42\u4e0e\u63d0\u9ad8\u7bc7 02 py\u6e90\u6587\u4ef6\u7f16\u8bd1 03 \u91cd\u8981\u64cd\u4f5c\u603b\u7ed3","title":"\u4e00\u3001\u5b9e\u8df5\u603b\u7ed3"},{"location":"#python_1","text":"01 \u5217\u8868list 02 \u5b57\u5178dict 03 \u5143\u7ec4tuple 04 \u5b57\u7b26\u4e32str 05 \u96c6\u5408set 06 \u6570\u5b57\u7c7b\u578b","title":"\u4e8c\u3001Python\u5e38\u7528\u6570\u636e\u7c7b\u578b\u6c47\u96c6"},{"location":"#python_2","text":"01 \u5e38\u7528\u5185\u7f6e\u51fd\u6570 02 \u5f02\u5e38\u5904\u7406 03 os\u6a21\u5757 04 sys\u6a21\u5757 05 time\u6a21\u5757 06 \u5e8f\u5217\u5316\u6a21\u5757 07 string\u6a21\u5757 08 random\u6a21\u5757 09 logging\u6a21\u5757 10 optparse\u6a21\u5757 11 datetime\u4e0edateutil\u6a21\u5757 12 collections\u6a21\u5757 13 \u52a0\u5bc6\u4e0e\u89e3\u5bc6\u6a21\u5757 14 configparser\u6a21\u5757 15 \u6b63\u5219\u8868\u8fbe\u5f0f\u4e0ere\u6a21\u5757 16 python3\u64cd\u4f5cExcel 17 \u64cd\u4f5c\u6570\u636e\u5e93pymysql\u6a21\u5757 18 \u64cd\u4f5c\u6570\u636e\u5e93SQLAlchemy\u6a21\u5757 19 \u6821\u9a8c\u5ba2\u6237\u7aef\u7684\u5408\u6cd5\u6027hmac\u6a21\u5757","title":"\u4e09\u3001Python\u5185\u7f6e\u51fd\u6570\u4e0e\u5e38\u7528\u6a21\u5757\u4ecb\u7ecd"},{"location":"#python-","text":"01 \u8fdb\u9636\u77e5\u8bc6\u70b9\u4e0e\u9762\u5411\u5bf9\u8c61\u6574\u5408 02 \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668 03 \u7f51\u7edc\u7f16\u7a0b\u4e0e\u5e76\u53d1\u7f16\u7a0b 04 Python\u4e2d\u539f\u751fsocket\u7684\u6848\u4f8b 05 Python\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347\u7bc7 06 \u6587\u4ef6\u64cd\u4f5c 07 with\u4e0a\u4e0b\u6587\u7ba1\u7406 08 \u95ed\u5305\u4e0e\u88c5\u9970\u5668 09 Python\u4e2d\u7684\u63cf\u8ff0\u7b26 10 Python\u4e2d\u7684\u6df1\u62f7\u8d1d\u4e0e\u6d45\u62f7\u8d1d 11 Python\u5f02\u6b65\u7f16\u7a0b\u4e0easyncio 12 Python\u534f\u7a0b\u4e0e\u5f02\u6b65io 13 asyncio\u5e76\u53d1\u7f16\u7a0b\u8fdb\u9636","title":"\u56db\u3001Python\u8fdb\u9636-\u9762\u5411\u5bf9\u8c61-\u7f51\u7f16\u5e76\u53d1"},{"location":"#python_3","text":"01 python\u5b9e\u73b0\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784","title":"\u4e94\u3001Python\u5b9e\u73b0\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784"},{"location":"#-","text":"01 \u7f13\u5b58\u4e0eredis 02 Github\u4e0e\u865a\u62df\u73af\u5883\u7684\u4f7f\u7528 03 Pycharm\u8fde\u63a5\u8fdc\u7a0b\u4ee3\u7801 04 Mac/Linux\u538b\u529b\u6d4b\u8bd5\u795e\u5668Siege","title":"\u516d\u3001\u5f00\u53d1\u73af\u5883-\u4e2d\u95f4\u4ef6\u7b49\u5de5\u5177"},{"location":"#linux","text":"01 Linux\u670d\u52a1\u7aef\u76f8\u5173 \u6700\u540e\uff0c\u5982\u679c\u60a8\u89c9\u5f97\u672c\u6307\u5357\u5bf9\u60a8\u6709\u5e2e\u52a9\uff0c\u53ef\u4ee5\u6253\u8d4f\u652f\u6301\u4f5c\u8005\uff0c\u611f\u8c22\u60a8\u7684\u652f\u6301\uff01","title":"\u4e03\u3001Linux\u670d\u52a1\u7aef\u76f8\u5173"},{"location":"typical_case/","text":"5\u4f4d\u968f\u673a\u9a8c\u8bc1\u7801 # -*- coding:utf-8 -*- import random import string print(string.ascii_letters) #abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) #abcdefghijklmnopqrstuvwxyz print(string.ascii_uppercase) #ABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.digits) #0123456789 print(string.hexdigits) #0123456789abcdefABCDEF print(string.octdigits) #01234567 s = random.sample(string.ascii_letters+string.digits,5) print(s) #['i', '3', 'E', 'R', 'v'] print(''.join(s)) #i3ERv \u7ec8\u7aef\u6253\u5370\u51fa\u5e26\u989c\u8272\u7684\u63d0\u793a def print_correct(msg): print('\\033[32;1m %s \\033[0m' % msg) def print_error(msg): print('\\033[31;1m %s \\033[0m' % msg) def exit_msg(msg): exit('\\033[31;1m %s \\033[0m' % msg) \u5355\u4f8b\u6a21\u5f0f '''\u7ed1\u5b9a\u5230\u7c7b\u7684\u65b9\u6cd5\u5b9e\u73b0''' import threading class Mysql: __instance_lock = threading.Lock() __isinstance = None def __init__(self): # \u6bcf\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684ip\u4e0eport\u90fd\u662f\u9ed8\u8ba4\u76f8\u7b49\u7684 self.ip = '127.0.0.1' self.port = 8000 # \u7531\u4e8e\u8fd9\u4e2a\u6211\u4eec\u64cd\u4f5c\u7684\u5185\u5bb9\u53ea\u8ddf\u7c7b\u6709\u5173 # \u56e0\u6b64\u8fd9\u91cc\u7528\u7ed1\u5b9a\u5230\u7c7b\u7684\u65b9\u6cd5 @classmethod def create(cls): # \u5982\u679c\u9759\u6001\u53d8\u91cf __isinstance\u662fNone\u7684\u8bdd if not cls.__isinstance: with cls.__instance_lock: obj = cls() cls.__isinstance = obj # \u6700\u540e\u5c06\u9759\u6001\u53d8\u91cf__isinstance return\u51fa\u53bb\uff01 # \u5982\u679c\u4ee5\u540e\u7528create\u521b\u5efa\u76f8\u540c\u7279\u6027\u7684\u5bf9\u8c61\u7684\u8bdd # \u5c31\u53ef\u4ee5\u7528\u201c\u4e00\u4e2a\u7a7a\u95f4\u201d\u4e86\uff0c\u5927\u5927\u8282\u7701\u4e86\u7a7a\u95f4\uff01 return cls.__isinstance if __name__ == '__main__': # \u7528\u7ed1\u5b9a\u5230\u7c7b\u7684\u65b9\u6cd5create\u201c\u521b\u5efa\u201d\u4e24\u4e2a\u5bf9\u8c61 m1 = Mysql.create() m2 = Mysql.create() # \u6bd4\u8f83\u5c0f\u4e24\u4e2a\u5bf9\u8c61\u7684id print(id(m1),id(m2))#55308176 55308176 print(m1 is m2)#True '''\u91cd\u5199__new__\u65b9\u6cd5''' # coding:utf-8 import threading class Student(object): __instance_lock = threading.Lock() __instance = False def __init__(self,name=None,age=None): if name: self.name = name if age: self.age = age def __new__(cls, *args, **kwargs): if not cls.__instance: with cls.__instance_lock: obj = super().__new__(cls) cls.__instance = obj return cls.__instance if __name__ == '__main__': s1 = Student('whw1',22) s2 = Student('whw2',24) s3 = Student('whw3',25) print(s1,s2,s3) # <__main__.Student object at 0x1009c6080> <__main__.Student object at 0x1009c6080> <__main__.Student object at 0x1009c6080> print(s1.name,s2.age)# whw3 25 \u662f\u6700\u540e\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61 '''\u88c5\u9970\u5668\u5b9e\u73b0''' import threading def singleton(cls): instances = {} def _singleton(*args,**kwargs): if cls not in instances: instances[cls] = cls(*args,**kwargs) return instances[cls] return _singleton @singleton class MySQL: def __init__(self): self.host = '127.0.0.1' self.port = 3306 if __name__ == '__main__': m1 = MySQL() m2 = MySQL() m3 = MySQL() print(m1) print(m2) print(m3) \"\"\" <__main__.MySQL object at 0x10357cef0> <__main__.MySQL object at 0x10357cef0> <__main__.MySQL object at 0x10357cef0> \"\"\" \u57fa\u4e8e\u6a21\u5757\u5bfc\u5165\u7684\u5355\u4f8b\u6a21\u5f0f \u57fa\u4e8e\u6a21\u5757\u5bfc\u5165\u7684\u5355\u4f8b\u6a21\u5f0f \u751f\u6210\u5668\u8bfb\u53d6\u5927\u6587\u4ef6\u7684\u4f8b\u5b50 \u6709\u4e00\u4e2a\u6587\u4ef6 \u5927\u6982\u6709500G\uff0c\u5e76\u4e14\u53ea\u6709\u4e00\u884c\uff0c\u884c\u4e4b\u95f4\u6709\u5206\u9694\u7b26\uff0c\u6211\u4eec\u9700\u8981\u628a\u6587\u4ef6\u5185\u7684\u6570\u636e\u4e00\u884c\u4e00\u884c\u7684\u8bfb\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5199\u5165\u6570\u636e\u5e93\u91cc\u9762\u3002 #500G:\u4e00\u884c\uff0c\u4e2d\u95f4\u7528{|}\u5206\u5f00 def myreadlines(f, newline): buf = \"\" while True: while newline in buf: pos = buf.index(newline) yield buf[:pos] buf = buf[pos + len(newline):] chunk = f.read(4096) if not chunk: #\u8bf4\u660e\u5df2\u7ecf\u8bfb\u5230\u4e86\u6587\u4ef6\u7ed3\u5c3e yield buf break buf += chunk if __name__ == '__main__': with open(\"input.txt\") as f: for line in myreadlines(f, \"{|}\"): print (line) \u751f\u6210\u5927\u6587\u4ef6\u7684\u79d8\u6587 # -*- coding:utf-8 -*- import os import hashlib def md5_pwd(path): file_size = os.path.getsize(path) md5 = hashlib.md5() with open(path,'rb')as f: while file_size >= 4096: content = f.read(4096) md5.update(content) file_size -= 4096 else: content = f.read() if content: md5.update(content) return md5.hexdigest() if __name__ == '__main__': print(md5_pwd('D:\\\\0.0\u7535\u5f71\\\u66b4\u96ea\u5c06\u81f3.mp4')) #6a37f182c3501c4d328760818439efa5 \u5806\u6808\u6cd5\u8ba1\u7b97\u6587\u4ef6\u5939\u5927\u5c0f import os BASE_DIR = os.path.dirname(os.path.abspath(__name__)) FILE_PATH = os.path.join(BASE_DIR,'whw2') lis = [FILE_PATH] count = 0 while lis: path = lis.pop() for f in os.listdir(path): sub_path = os.path.join(path,f) if os.path.isdir(sub_path): lis.append(sub_path) elif os.path.isfile(sub_path): count += os.path.getsize(sub_path) print(count) \u5806\u6808\u6cd5\u6e05\u7a7a\u6587\u4ef6\u5939 # -*- coding:utf-8 -*- import os def del_dir(filepath): lis = [filepath] lst = [] while lis: path = lis.pop() for f in os.listdir(path): sub_path = os.path.join(path,f) if os.path.isfile(sub_path): os.remove(sub_path) elif os.path.isdir(sub_path): lis.append(sub_path) lst.append(sub_path) # \u628a\u6240\u6709\u6587\u4ef6\u5220\u5b8c\u540e\uff0c\u518d\u5904\u7406\u91cc\u9762\u7684\u7a7a\u6587\u4ef6\u5939 # \u6ce8\u610f\u8fd9\u91cc \u5012\u5e8f \u53d6\uff01\u4ece\u91cc\u5f80\u5916\u5220 for f in lst[::-1]: os.rmdir(f) # \u6700\u540e\u518d\u628a\u6700\u5916\u9762\u7684\u76ee\u5f55\u5220\u6389 \u2014\u2014 \u6574\u4e2a\u76ee\u5f55\u5c31\u6ca1\u5f97\u4e86 os.rmdir(filepath) \u5206\u5272\u5b58\u653e\u8fde\u7eed\u65f6\u95f4\u5b57\u7b26\u4e32\u7684\u5217\u8868 \u5206\u5272\u5904\u7406\u5b58\u653e\u8fde\u7eed\u65f6\u95f4\u5b57\u7b26\u4e32\u7684\u5217\u8868 itertools.chain\u5b9e\u73b0\u540c\u65f6\u904d\u5386\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 \"\"\" \u4e00\u3001\u8c03\u7528itertools\u7684chain\u65b9\u6cd5\u5b9e\u73b0\"\"\" from itertools import chain my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } for value in chain(my_list,my_dict,range(1,5)): print(value) \"\"\" 1 2 3 html1 html2 1 2 3 4 \"\"\" \"\"\" \u4e8c\u3001\u4f7f\u7528yield\u5b9e\u73b0\u8be5\u529f\u80fd\"\"\" my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } # \u81ea\u5df1\u662f\u5fc3\u554a\u4e00\u4e2achain\u6548\u679c\u7684\u51fd\u6570 def my_chain(*args, **kwargs): for my_iterable in args: for value in my_iterable: yield value for value in my_chain(my_list, my_dict, range(5,7)): print(value) \"\"\" \u4e09\u3001\u4f7f\u7528yield from\u5b9e\u73b0\u8be5\u529f\u80fd \"\"\" my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } def my_chain(*args, **kwargs): for my_iterable in args: yield from my_iterable for value in my_chain(my_list, my_dict, range(5,7)): print(value) \u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u8ba1\u7b97\u5668 # -*- coding:utf-8 -*- import re def mul_div(exp): \"\"\" \u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u4e58\u9664\u6cd5 :return:\u8fd4\u56destr\u7c7b\u578b\u7684\u7ed3\u679c,\u56e0\u4e3a\u540e\u9762\u8981\u7528\u8fd9\u4e2a\u7ed3\u679creplace\u6389\u4e4b\u524d\u8868\u8fbe\u5f0f \"\"\" if '*' in exp: a,b = exp.split('*') return str(float(a) * float(b)) else: a,b = exp.split('/') return str(float(a) / float(b)) def format_exp(exp): \"\"\" \u6574\u7406\u52a0\u51cf\u8fd0\u7b97\u7684\u683c\u5f0f \"\"\" exp = exp.replace('--','+') exp = exp.replace('-+','-') exp = exp.replace('++','+') exp = exp.replace('+-','-') return exp def cal_no_bracket(no_bracket_exp): \"\"\" \u8ba1\u7b97\u5185\u90e8\u4e0d\u542b\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u7684\u503c :param no_bracket_exp: \u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u5185\u90e8\u6ca1\u6709\u5c0f\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\uff1a'(9-2*5/3+7/3*99/4*2998+10*568/14)' :return: \u8fd4\u56defloat\u7c7b\u578b\u7684\u503c \"\"\" # \u5148\u8ba1\u7b97\u4e58\u9664\u6cd5\u2014\u2014\u4e24\u4e2a\u6570\u4e24\u4e2a\u6570\u7684\u8ba1\u7b97 while 1: # \u542b\u6709\u4e58\u9664\u7b26\u53f7\u7684\u8868\u8fbe\u5f0f # \u6ce8\u610f\u8fd9\u91cc\u7528search\u627e\uff01\u53ea\u627e*/\u7b26\u53f7\u4e24\u8fb9\u7684\uff0c\u5229\u7528\u5faa\u73af\uff0c\u4e00\u6b21\u6b21\u7684\u53bb\u627e # \u6ce8\u610f\uff0c\u4e58\u9664\u7b26\u53f7\u540e\u9762\u53ef\u80fd\u6709-\u53f7\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e5f\u8981\u8003\u8651\u8fdb\u53bb mul_div_exp = re.search('\\d+(\\.\\d+)?[*/]-?\\d+(\\.\\d+)?', no_bracket_exp) # \u627e\u5230\u8868\u793a\u6709\u4e24\u4e2a\u6570\u7684\u4e58\u9664\u6cd5 if mul_div_exp: # \u6ce8\u610f\u7528group\u53d6\u503c md_exp = mul_div_exp.group() # \u8ba1\u7b97\u7b80\u5355\u7684\u4e24\u4e2a\u6570\u7684\u4e58\u9664\u6cd5 res = mul_div(md_exp) # \u8ba1\u7b97\u51fa\u6765\u540e\u5c06\u4e4b\u524d\u7684\u8868\u8fbe\u5f0f\u6362\u6210\u8ba1\u7b97\u6210\u7684\u503c no_bracket_exp = no_bracket_exp.replace(md_exp,res) # \u6ca1\u6709\u8868\u793a\u6ca1\u6709\u4e58\u9664\u6cd5\u8fd0\u7b97\u4e86\uff0c\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\u8ba1\u7b97\u52a0\u51cf\u6cd5 else: break # \u8fd9\u65f6\u53ea\u6709\u52a0\u51cf\u6cd5\u4e86\uff0c\u5148\u628a\u8868\u8fbe\u5f0f\u7684\u7b26\u53f7\u7ba1\u7406\u4e00\u4e0b no_bracket_exp = format_exp(no_bracket_exp) # \u63a5\u7740\u8ba1\u7b97\u52a0\u51cf\u6cd5\uff0c\u7528findall\u627e\u5230\u6240\u6709\u7684\u6b63\u8d1f\u6570\uff0c\u8bb0\u5f97\u53d6\u6d88\u5206\u7ec4\u4f18\u5148 res_list = re.findall('[+\\-]?\\d+(?:\\.\\d+)?',no_bracket_exp) # \u8fdb\u884c\u7d2f\u52a0 sum = 0 for i in res_list: sum += float(i) return sum def remove_bracket(exp): \"\"\" \u5c06\u8868\u8fbe\u5f0f\u4e2d\u6240\u6709\u7684\u62ec\u53f7\u90fd\u8ba1\u7b97\u51fa\u7ed3\u679c\uff0c\u5e76\u66ff\u6362\u539f\u6709\u7684\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u4e0d\u542b\u6709\u62ec\u53f7 :param exp:str\u7c7b\u578b\u7684\u5e26\u6709\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\uff1a'1-2*((60-30+(9-2*5/3+7/3*99/4*2998+10*568/14)*(-40/5))-(-4*3)/(16-3*2))' :return:str\u7c7b\u578b\u4e0d\u5e26\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\uff1a'1-2*-1388335.8476190479' \"\"\" while 1: no_bracket = re.search('\\([^()]+\\)',exp) if no_bracket: # \u8bb0\u7684\u4ece\u7ed3\u679c\u96c6\u4e2d\u7528group\u65b9\u6cd5\u53d6\u5230\u7ed3\u679c no_bracket_exp = no_bracket.group() # \u8ba1\u7b97\u62ec\u53f7\u5185\u4e0d\u542b\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c res = cal_no_bracket(no_bracket_exp) ## \u6700\u540e\u628a\u4e4b\u524d\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\u66ff\u6362\u6210\u6700\u7ec8\u7684\u7ed3\u679c # \u8bb0\u5f97 res\u662ffloat\u7c7b\u578b\u7684\uff0c\u9700\u8981\u8f6c\u6210str\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c exp = exp.replace(no_bracket_exp,str(res)) # \u6ca1\u6709\u8868\u793a\u8868\u8fbe\u5f0f\u4e2d\u6ca1\u62ec\u53f7\u4e86 else: break # \u6700\u7ec8\u5c06\u6ca1\u6709\u62ec\u53f7\u7684\u8868\u8fbe\u5f0freturn return exp def calculator(origin_exp): \"\"\" \u5904\u7406\u539f\u59cb\u7684\u8868\u8fbe\u5f0f\uff0c\u5148\u53bb\u6389\u8868\u8fbe\u5f0f\u4e2d\u7684\u7a7a\u683c\uff0c\u7136\u540e\u53bb\u6389\u62ec\u53f7\u5e76\u4e14\u8fdb\u884c\u6700\u540e\u4e00\u6b65\u7684\u8ba1\u7b97 :param origin_exp: \u539f\u59cb\u7684\u8868\u8fbe\u5f0f :return: float\u7c7b\u578b\u7684\u7ed3\u679c \"\"\" # \u5148\u5904\u7406\u6389\u539f\u59cb\u8868\u8fbe\u5f0f\u4e2d\u7684\u7a7a\u683c exp = origin_exp.replace(' ','') # \u8ba1\u7b97\u5446\u7a7a\u683c\u7684\u7ed3\u679c res = remove_bracket(exp) # \u7136\u540e\u8ba1\u7b97\u6ca1\u6709\u7a7a\u683c\u7684\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c ret = cal_no_bracket(res) # \u8fd4\u56de float\u7c7b\u578b\u7684\u7ed3\u679c return ret if __name__ == '__main__': exp = '1 - 2 * ( (60-30 + (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )*(-40/5)) - (-4*3)/ (16-3*2) )' print(calculator(exp)) print(eval(exp)) \"\"\" 2776672.6952380957 2776672.6952380957 \"\"\" Python\u591a\u5c5e\u6027\u6392\u5e8f \u53c2\u8003\uff1a python\u5b9e\u73b0\u591a\u5c5e\u6027\u6392\u5e8f lst = [1, -2, 10, -12, -4, -5, 9, 2] # \u5c06\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u6b63\u6570\u5728\u524d\uff0c\u8d1f\u6570\u5728\u540e\uff0c\u5e76\u4e14\u5206\u522b\u6309\u7edd\u5bf9\u503c\u4ece\u5c0f\u5230\u5927 lst.sort(key=lambda x:(x<0,abs(x))) print(lst) # [1, 2, 9, 10, -2, -4, -5, -12] python3\u4e2d\u7684typehint \u4f8b1 # -*- coding:utf-8 -*- def int_hint(a:int,b:int)->int: return a + b print(int_hint(11,22)) print(int_hint('aa','bb')) class People(object): def __init__(self,name): self.name = name def __str__(self): return self.name class Dog(object): def __init__(self,name): self.name = name def __str__(self): return self.name def sing(name:People)->None: print('{} is singing...'.format(name)) def bark(name:Dog)->None: print('{} is barking...'.format(name)) Tom = People('Tom') Jerry = Dog('Jerry') sing(Tom) sing(Jerry) bark(Jerry) \"\"\" 33 aabb Tom is singing... Jerry is singing... Jerry is barking... \"\"\" \u4f8b2 # -*- coding:utf-8 -*- import typing def create_dic(name:str,age:int)->dict: return { 'name':name, 'age':age } def my_callable(name:str,age:int,callback:typing.Callable[[str,int],dict]): ret = callback(name,age) return ret # \u5c06create_dict\u51fd\u6570\u4f20\u8fdb\u53bb\uff0c\u6ce8\u610f\u662f\u5728my_callable\u51fd\u6570\u4e2d\u6267\u884c print(my_callable('wanghw',18,create_dic)) # {'name': 'wanghw', 'age': 18} \u5806\u6808\u7684\u51e0\u4e2a\u7ec3\u4e60 \u5806\u6808\u76f8\u5173\u7684\u51e0\u4e2a\u7ec3\u4e60\u2014\u2014\u5806\u6808\u6548\u7387\u9ad8\u4e8e\u9012\u5f52 \u6587\u4ef6\u4fee\u6539\u7684\u4e24\u79cd\u65b9\u5f0f \u6587\u4ef6\u4fee\u6539\u7684\u4e24\u79cd\u65b9\u5f0f \u904d\u5386\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6 # -*- coding:utf-8 -*- import os for item in os.listdir('/Users/wanghongwei/PycharmProjects/deploy27/deploy'): print(item) for item in os.walk('/Users/wanghongwei/PycharmProjects/deploy27/deploy'): print(item) \u91cd\u547d\u540d\u4e0e\u5220\u9664 # -*- coding:utf-8 -*- import shutil shutil.move('/Users/wanghongwei/PycharmProjects/deploy27/deploy1','/Users/wanghongwei/PycharmProjects/deploy27/deploy') shutil.rmtree('/Users/wanghongwei/PycharmProjects/deploy27/t') \u6740\u8fdb\u7a0b # -*- coding:utf-8 -*- import os import signal import subprocess import commands output = subprocess.check_output(\"pgrep -f python\", shell=True) pid_list = map(int, output.split()) for pid in pid_list: os.kill(pid, signal.SIGKILL) salt\u63a8\u9001\u6587\u4ef6 # -*- coding:utf-8 -*- \"\"\" SaltAPI\u63a8\u9001\u6587\u4ef6 \"\"\" '''#### \u57fa\u4e8eSSH\uff1aAPI ####''' from salt.client.ssh.client import SSHClient client = SSHClient() # \u6267\u884c\u547d\u4ee4 result = client.cmd('*', 'cmd.run', ('ls',)) # \u8c03\u7528grains ret = client.cmd('*','grains.items') # \u8c03\u7528pillar ret = client.cmd('*','pillar.items') # \u6267\u884c state ret = client.cmd('*','state.sls',('fengfeng','pillar={\"xxxx\":\"luffy\"}')) # \u53d1\u9001\u6587\u4ef6 ret = client.cmd('*','cp.get_file',('salt://fengfeng/files/test.conf','/data/s1.conf')) # \u53d1\u9001\u6587\u4ef6 ret = client.cmd('*','cp.get_url',('http://www.pythonav.com/allstatic/imgs/mv/picture/2.jpeg','/data/s1.jpeg')) '''#### \u57fa\u4e8eMaster\uff1aAPI ####''' import salt.client local = salt.client.LocalClient() # \u6267\u884c\u547d\u4ee4 result = client.cmd('*', 'cmd.run', ('ls',)) # \u8c03\u7528grains ret = client.cmd('*','grains.items') # \u8c03\u7528pillar ret = client.cmd('*','pillar.items') # \u6267\u884c state ret = client.cmd('*','state.sls',('fengfeng','pillar={\"xxxx\":\"luffy\"}')) # \u53d1\u9001\u6587\u4ef6 ret = client.cmd('*','cp.get_file',('salt://fengfeng/files/test.conf','/data/s1.conf')) # \u53d1\u9001\u6587\u4ef6 ret = client.cmd('*','cp.get_url',('http://www.pythonav.com/allstatic/imgs/mv/picture/2.jpeg','/data/s1.jpeg')) \u6296\u97f3 # -*- coding:utf-8 -*- import re import requests url = 'https://www.douyin.com/share/user/6556303280/?share_type=link' # 75097696932/96488770253/6556303280/67561351000 # ###################### 1. \u6839\u636eurl\u83b7\u53d6\u7528\u6237ID ######################### user_id = re.findall('share/user/(.*)/\\?', url)[0] # ###################### 2. \u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7b7e\u540d ######################### # \u65b9\u5f0f\u4e00\uff1a import os output = os.popen('node s1.js %s' % user_id) # output = os.popen('node byted-acrawler.js %s' % user_id) signature = output.readlines()[0].strip() # \u65b9\u5f0f\u4e8c\uff1a \"\"\" def exec_javascript(file_path, func, *args): pip3 install execjs import execjs with open(file_path, 'r', encoding='UTF-8') as f: content = f.read() ctx = execjs.compile(content) return ctx.call(func, *args) signature = exec_javascript(\"encode.js\", '_bytedAcrawler.sign', user_id) \"\"\" # ###################### 3. \u83b7\u53d6\u6296\u97f3\u7528\u6237\u53d1\u9001\u8fc7\u7684\u6240\u6709\u7684\u89c6\u9891 ######################### headers = { 'accept': 'application/json', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2', 'upgrade-insecure-requests': '1', 'host':'www.douyin.com', 'X-Requested-With':'XMLHttpRequest', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36', } user_video_list = [] user_video_params = { 'user_id': str(user_id), 'count': '21', 'max_cursor': '0', 'aid': '1128', '_signature': signature, 'dytk': '114f1984d1917343ccfb14d94e7ce5f5' } def get_aweme_list(max_cursor=None): if max_cursor: user_video_params['max_cursor'] = str(max_cursor) res = requests.get( url=\"https://www.douyin.com/aweme/v1/aweme/post/\", params=user_video_params, headers=headers ) content_json = res.json() print(content_json) aweme_list = content_json.get('aweme_list', []) user_video_list.extend(aweme_list) if content_json.get('has_more') == 1: return get_aweme_list(content_json.get('max_cursor')) get_aweme_list() print(\"\u8be5\u7528\u6237\u53d1\u5e03\u8fc7\u6296\u97f3\", user_video_list) # ###################### 4. \u83b7\u53d6\u6296\u97f3\u8d5e\u8fc7\u7684\u6240\u6709\u89c6\u9891 ######################### # # favor_video_list = [] # # favor_video_params = { # 'user_id': str(user_id), # 'count': '21', # 'max_cursor': '0', # 'aid': '1128', # '_signature': signature # } # # # def get_favor_list(max_cursor=None): # if max_cursor: # favor_video_params['max_cursor'] = str(max_cursor) # res = requests.get( # url=\"https://www.douyin.com/aweme/v1/aweme/favorite/\", # params=favor_video_params, # headers=headers # ) # content_json = res.json() # aweme_list = content_json.get('aweme_list', []) # favor_video_list.extend(aweme_list) # if content_json.get('has_more') == 1: # return get_favor_list(content_json.get('max_cursor')) # # # get_favor_list() # # print(\"\u8be5\u7528\u6237\u8d5e\u8fc7\u6296\u97f3\", favor_video_list) # ###################### 5. \u4e0b\u8f7d\u6296\u97f3 ######################### \"\"\" base_download_folder = os.path.join('download', user_id) if not os.path.isdir(base_download_folder): os.mkdir(base_download_folder) # \u4e0b\u8f7d\u81ea\u5df1\u7684\u89c6\u9891 user_download_folder = os.path.join(base_download_folder, 'user') if not os.path.isdir(user_download_folder): os.mkdir(user_download_folder) for aweme in user_video_list: if aweme.get('video', None): video_id = aweme['video']['play_addr']['uri'] file_name = video_id + \".mp4\" file_path = os.path.join(user_download_folder, file_name) response_video = requests.get( url='https://aweme.snssdk.com/aweme/v1/play/', params={ 'video_id': video_id, }, stream=True, ) with open(file_path, 'wb') as fh: for chunk in response_video.iter_content(chunk_size=1024): fh.write(chunk) # \u4e0b\u8f7d\u8d5e\u8fc7\u7684\u89c6\u9891 \"\"\" \"\"\" favor_download_folder = os.path.join(base_download_folder, 'favor') if not os.path.isdir(favor_download_folder): os.mkdir(favor_download_folder) for aweme in favor_video_list: if aweme.get('video', None): video_id = aweme['video']['play_addr']['uri'] file_name = video_id + \".mp4\" file_path = os.path.join(favor_download_folder, file_name) response_video = requests.get( url='https://aweme.snssdk.com/aweme/v1/play/', params={ 'video_id': video_id, }, stream=True, ) with open(file_path, 'wb') as fh: for chunk in response_video.iter_content(chunk_size=1024): fh.write(chunk) \"\"\" iter\u65b9\u6cd5\u8bfb\u53d6\u6587\u4ef6 \u7528\u8fed\u4ee3\u5668\u53bb\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\uff0c\u9632\u6b62\u6587\u4ef6\u592a\u5927\u4e00\u6b21\u6027\u8bfb\u53d6\u7684\u8bdd\u5360\u7528\u8fc7\u5927\u5185\u5b58\uff01 def iter_file(path, size=1024): with open(path, \"rb\", ) as f: for data in iter(lambda: f.read(size), b''): yield data for row in iter_file(\"manage.py\"): print(row) \u5f00\u542f\u591a\u7ebf\u7a0b-\u722c\u53d6\u79d1\u65af\u6797\u8bcd\u5178 import re import random import requests from bs4 import BeautifulSoup from concurrent.futures import ThreadPoolExecutor from multiprocessing import cpu_count # ------------------------- \u5236\u4f5c\u82f1\u6587\u8bcd\u5178 -------------------------------------- rex = re.compile(r'[-&()/\\.]+') def bar(url): response = requests.get(url=url) soup = BeautifulSoup(response.text, 'html.parser') ul_obj = soup.find(name='ul', attrs={'class', 'columns2 browse-list'}) return ul_obj.find_all(name='a') def worker(url): \"\"\" \u62ff\u5230\u5177\u4f53\u7684\u8fde\u63a5\uff0chttps://www.collinsdictionary.com/browse/english/words-starting-with-a \u5982\u4e0a\u94fe\u63a5\uff0c\u662f\u6240\u6709\u4ee5a\u5f00\u5934\u7684\u5355\u8bcd\u96c6\u5408 \"\"\" a_list = bar(url='https://www.collinsdictionary.com/browse/english/words-starting-with-{}'.format(url[0])) for item in a_list: for i in bar(item.get('href')): res = i.text if not re.findall(rex, res) and len(res) > 2: print(res) url[1].write('{}\\n'.format(res)) def spider_collins(): \"\"\" \u722c\u53d6\u67ef\u6797\u65af\u7f51\u7ad9\u6240\u6709\u7684\u5355\u8bcd\uff0c\u94fe\u63a5\u6df1\u5ea6\u5171\u4e09\u5c42\uff0c \u7b2c\u4e00\u5c42\u83b7\u53d624\u4e2a\u5b57\u6bcd\u7684\u8fde\u63a5\uff0c \u7b2c\u4e8c\u5c42\u83b7\u53d6\u4ee5\u5b57\u6bcd\u5f00\u5934\u7684\u6240\u6709\u77ed\u8bed\u6216\u5355\u8bcd\uff0c \u7b2c\u4e09\u5c42\uff0c\u5c31\u662f\u5177\u4f53\u7684\u4e00\u4e2a\u4e2a\u5355\u8bcd\u4e86 \"\"\" f = open('w.txt', 'a', encoding='utf8') t = ThreadPoolExecutor(cpu_count() * 5) for i in range(ord('a'), ord('z') + 1): # 97 ~ 122 t.submit(worker, (chr(i), f)) # break t.shutdown() f.close() \u9012\u5f52\u5d4c\u5957\u5217\u8868\u7684\u7ec3\u4e60 \u9012\u5f52\u5b9e\u73b0\u5217\u8868\u7684\u5d4c\u5957\u67e5\u627e # \u5c06\u5217\u8868lis\u4e2d\u7684\"tt\"\u53d8\u6210\u2f24\u5199 def recursion1(lis): for i, v in enumerate(lis): #\u8fd9\u91cc\u7684i\u662f\u5217\u8868\u5143\u7d20\u7684\u4e0b\u6807\uff0cv\u4e3a\u5217\u8868\u4e2d\u7684\u5143\u7d20 #\u5982\u679c\u5217\u8868\u7684\u5143\u7d20\u4e3att\uff0c\u76f4\u63a5\u8f6c\u5927\u5199 if v == 'tt': lis[i] = v.upper() #\u5982\u679c\u904d\u5386\u5230\u7684\u7684\u5143\u7d20\u662f\u4e2a\u5217\u8868 elif isinstance(v, list): #\u9012\u5f52\u64cd\u4f5c recursion1(v) #\u5c06\u5217\u8868\u4e2d\u7684\u6570\u5b573\u53d8\u6210\u5b57\u7b26\u4e32\"100\" def recursion2(lis): for i,v in enumerate(lis): if v == 3: lis[i] = '100' elif isinstance(v,list): recursion2(v) #\u5c06\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\"1\"\u53d8\u6210\u6570\u5b57101 def recursion3(lis): for i,v in enumerate(lis): if v == '1': lis[i] = 101 elif isinstance(v,list): recursion3(v) if __name__ == '__main__': lis = [2, 3, \"k\", [\"qwe\", 20, [\"k1\", [\"tt\", 3, \"1\"]], 89], \"ab\", \"adv\"] # a1. \u5c06\u5217\u8868lis\u4e2d\u7684\"tt\"\u53d8\u6210\u2f24\u5199\uff08\u2f64\u4e24\u79cd\u2f45\u5f0f\uff09\u3002 #\u65b9\u6cd5\u4e00\uff1a # lis[3][2][1][0] = lis[3][2][1][0].upper() # print(lis) #[2, 3, 'k', ['qwe', 20, ['k1', ['TT', 3, '1']], 89], 'ab', 'adv'] #\u65b9\u6cd5\u4e8c\uff1a recursion1(lis) print(lis) #[2, 3, 'k', ['qwe', 20, ['k1', ['TT', 3, '1']], 89], 'ab', 'adv'] # b. \u5c06\u5217\u8868\u4e2d\u7684\u6570\u5b573\u53d8\u6210\u5b57\u7b26\u4e32\"100\"\uff08\u2f64\u4e24\u79cd\u2f45\u5f0f\uff09\u3002 #\u65b9\u6cd5\u4e00\uff1a # lis[1],lis[3][2][1][1] = '100','100' # print(lis) #\u65b9\u6cd5\u4e8c: recursion2(lis) print(lis) # c. \u5c06\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\"1\"\u53d8\u6210\u6570\u5b57101\uff08\u2f64\u4e24\u79cd\u2f45\u5f0f\uff09\u3002 #\u65b9\u6cd5\u4e00\uff1a # lis[3][2][1][2] = 101 # print(lis) recursion3(lis) print(lis) \u9012\u5f52\u5b9e\u73b0\u5faa\u73af\u6253\u5370\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20 def recursion_list(lis): for i in lis: if isinstance(i,list): recursion_list(i) else: print(i,end=\" \") if __name__ == '__main__': li = [1, 3, 4, \"whw\", [3, 7, 8, \"WANGhw\"], 5, \"HH\"] recursion_list(li) \"\"\" 1 3 4 whw 3 7 8 WANGhw 5 HH \"\"\" socket\u4f20\u8f93\u662f\u9009\u62e9\u662f\u5426\u6839\u636e\u534f\u8bae\u63a5\u53d7\u4e0e\u53d1\u9001 # -*- coding:utf-8 -*- import json import struct def pro_send(sk,dic,pro=True): str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') # \u9ed8\u8ba4\u9009\u62e9\u534f\u8bae\u53d1\u9001 if pro: num_dic = struct.pack('i',len(bytes_dic)) sk.sendall(num_dic) sk.sendall(bytes_dic) def pro_recv(sk,pro=True): # \u4f9d\u636e\u534f\u8bae\u5148\u6536\u5230\u7684\u662f\u5b57\u5178\u7684\u957f\u5ea6 if pro: num_dic = sk.recv(4) # \u6ce8\u610funpack\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u9700\u8981\u52a0\u4e0a0\u7d22\u5f15\u53d6\u503c num = struct.unpack('i',num_dic)[0] str_dic = sk.recv(num).decode('utf-8') dic = json.loads(str_dic) # \u4e0d\u6839\u636e\u534f\u8bae\u63a5\u6536\u76f4\u63a5\u75281024\u5927\u5c0f\u7684\u957f\u5ea6\u6765\u63a5\u6536 else: dic = json.loads(sk.recv(1024).decode('utf-8')) return dic","title":"03 \u91cd\u8981\u64cd\u4f5c\u603b\u7ed3"},{"location":"typical_case/#5","text":"# -*- coding:utf-8 -*- import random import string print(string.ascii_letters) #abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) #abcdefghijklmnopqrstuvwxyz print(string.ascii_uppercase) #ABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.digits) #0123456789 print(string.hexdigits) #0123456789abcdefABCDEF print(string.octdigits) #01234567 s = random.sample(string.ascii_letters+string.digits,5) print(s) #['i', '3', 'E', 'R', 'v'] print(''.join(s)) #i3ERv","title":"5\u4f4d\u968f\u673a\u9a8c\u8bc1\u7801"},{"location":"typical_case/#_1","text":"def print_correct(msg): print('\\033[32;1m %s \\033[0m' % msg) def print_error(msg): print('\\033[31;1m %s \\033[0m' % msg) def exit_msg(msg): exit('\\033[31;1m %s \\033[0m' % msg)","title":"\u7ec8\u7aef\u6253\u5370\u51fa\u5e26\u989c\u8272\u7684\u63d0\u793a"},{"location":"typical_case/#_2","text":"'''\u7ed1\u5b9a\u5230\u7c7b\u7684\u65b9\u6cd5\u5b9e\u73b0''' import threading class Mysql: __instance_lock = threading.Lock() __isinstance = None def __init__(self): # \u6bcf\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684ip\u4e0eport\u90fd\u662f\u9ed8\u8ba4\u76f8\u7b49\u7684 self.ip = '127.0.0.1' self.port = 8000 # \u7531\u4e8e\u8fd9\u4e2a\u6211\u4eec\u64cd\u4f5c\u7684\u5185\u5bb9\u53ea\u8ddf\u7c7b\u6709\u5173 # \u56e0\u6b64\u8fd9\u91cc\u7528\u7ed1\u5b9a\u5230\u7c7b\u7684\u65b9\u6cd5 @classmethod def create(cls): # \u5982\u679c\u9759\u6001\u53d8\u91cf __isinstance\u662fNone\u7684\u8bdd if not cls.__isinstance: with cls.__instance_lock: obj = cls() cls.__isinstance = obj # \u6700\u540e\u5c06\u9759\u6001\u53d8\u91cf__isinstance return\u51fa\u53bb\uff01 # \u5982\u679c\u4ee5\u540e\u7528create\u521b\u5efa\u76f8\u540c\u7279\u6027\u7684\u5bf9\u8c61\u7684\u8bdd # \u5c31\u53ef\u4ee5\u7528\u201c\u4e00\u4e2a\u7a7a\u95f4\u201d\u4e86\uff0c\u5927\u5927\u8282\u7701\u4e86\u7a7a\u95f4\uff01 return cls.__isinstance if __name__ == '__main__': # \u7528\u7ed1\u5b9a\u5230\u7c7b\u7684\u65b9\u6cd5create\u201c\u521b\u5efa\u201d\u4e24\u4e2a\u5bf9\u8c61 m1 = Mysql.create() m2 = Mysql.create() # \u6bd4\u8f83\u5c0f\u4e24\u4e2a\u5bf9\u8c61\u7684id print(id(m1),id(m2))#55308176 55308176 print(m1 is m2)#True '''\u91cd\u5199__new__\u65b9\u6cd5''' # coding:utf-8 import threading class Student(object): __instance_lock = threading.Lock() __instance = False def __init__(self,name=None,age=None): if name: self.name = name if age: self.age = age def __new__(cls, *args, **kwargs): if not cls.__instance: with cls.__instance_lock: obj = super().__new__(cls) cls.__instance = obj return cls.__instance if __name__ == '__main__': s1 = Student('whw1',22) s2 = Student('whw2',24) s3 = Student('whw3',25) print(s1,s2,s3) # <__main__.Student object at 0x1009c6080> <__main__.Student object at 0x1009c6080> <__main__.Student object at 0x1009c6080> print(s1.name,s2.age)# whw3 25 \u662f\u6700\u540e\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61 '''\u88c5\u9970\u5668\u5b9e\u73b0''' import threading def singleton(cls): instances = {} def _singleton(*args,**kwargs): if cls not in instances: instances[cls] = cls(*args,**kwargs) return instances[cls] return _singleton @singleton class MySQL: def __init__(self): self.host = '127.0.0.1' self.port = 3306 if __name__ == '__main__': m1 = MySQL() m2 = MySQL() m3 = MySQL() print(m1) print(m2) print(m3) \"\"\" <__main__.MySQL object at 0x10357cef0> <__main__.MySQL object at 0x10357cef0> <__main__.MySQL object at 0x10357cef0> \"\"\" \u57fa\u4e8e\u6a21\u5757\u5bfc\u5165\u7684\u5355\u4f8b\u6a21\u5f0f \u57fa\u4e8e\u6a21\u5757\u5bfc\u5165\u7684\u5355\u4f8b\u6a21\u5f0f","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"typical_case/#_3","text":"\u6709\u4e00\u4e2a\u6587\u4ef6 \u5927\u6982\u6709500G\uff0c\u5e76\u4e14\u53ea\u6709\u4e00\u884c\uff0c\u884c\u4e4b\u95f4\u6709\u5206\u9694\u7b26\uff0c\u6211\u4eec\u9700\u8981\u628a\u6587\u4ef6\u5185\u7684\u6570\u636e\u4e00\u884c\u4e00\u884c\u7684\u8bfb\u53d6\u51fa\u6765\uff0c\u7136\u540e\u5199\u5165\u6570\u636e\u5e93\u91cc\u9762\u3002 #500G:\u4e00\u884c\uff0c\u4e2d\u95f4\u7528{|}\u5206\u5f00 def myreadlines(f, newline): buf = \"\" while True: while newline in buf: pos = buf.index(newline) yield buf[:pos] buf = buf[pos + len(newline):] chunk = f.read(4096) if not chunk: #\u8bf4\u660e\u5df2\u7ecf\u8bfb\u5230\u4e86\u6587\u4ef6\u7ed3\u5c3e yield buf break buf += chunk if __name__ == '__main__': with open(\"input.txt\") as f: for line in myreadlines(f, \"{|}\"): print (line)","title":"\u751f\u6210\u5668\u8bfb\u53d6\u5927\u6587\u4ef6\u7684\u4f8b\u5b50"},{"location":"typical_case/#_4","text":"# -*- coding:utf-8 -*- import os import hashlib def md5_pwd(path): file_size = os.path.getsize(path) md5 = hashlib.md5() with open(path,'rb')as f: while file_size >= 4096: content = f.read(4096) md5.update(content) file_size -= 4096 else: content = f.read() if content: md5.update(content) return md5.hexdigest() if __name__ == '__main__': print(md5_pwd('D:\\\\0.0\u7535\u5f71\\\u66b4\u96ea\u5c06\u81f3.mp4')) #6a37f182c3501c4d328760818439efa5","title":"\u751f\u6210\u5927\u6587\u4ef6\u7684\u79d8\u6587"},{"location":"typical_case/#_5","text":"import os BASE_DIR = os.path.dirname(os.path.abspath(__name__)) FILE_PATH = os.path.join(BASE_DIR,'whw2') lis = [FILE_PATH] count = 0 while lis: path = lis.pop() for f in os.listdir(path): sub_path = os.path.join(path,f) if os.path.isdir(sub_path): lis.append(sub_path) elif os.path.isfile(sub_path): count += os.path.getsize(sub_path) print(count)","title":"\u5806\u6808\u6cd5\u8ba1\u7b97\u6587\u4ef6\u5939\u5927\u5c0f"},{"location":"typical_case/#_6","text":"# -*- coding:utf-8 -*- import os def del_dir(filepath): lis = [filepath] lst = [] while lis: path = lis.pop() for f in os.listdir(path): sub_path = os.path.join(path,f) if os.path.isfile(sub_path): os.remove(sub_path) elif os.path.isdir(sub_path): lis.append(sub_path) lst.append(sub_path) # \u628a\u6240\u6709\u6587\u4ef6\u5220\u5b8c\u540e\uff0c\u518d\u5904\u7406\u91cc\u9762\u7684\u7a7a\u6587\u4ef6\u5939 # \u6ce8\u610f\u8fd9\u91cc \u5012\u5e8f \u53d6\uff01\u4ece\u91cc\u5f80\u5916\u5220 for f in lst[::-1]: os.rmdir(f) # \u6700\u540e\u518d\u628a\u6700\u5916\u9762\u7684\u76ee\u5f55\u5220\u6389 \u2014\u2014 \u6574\u4e2a\u76ee\u5f55\u5c31\u6ca1\u5f97\u4e86 os.rmdir(filepath)","title":"\u5806\u6808\u6cd5\u6e05\u7a7a\u6587\u4ef6\u5939"},{"location":"typical_case/#_7","text":"\u5206\u5272\u5904\u7406\u5b58\u653e\u8fde\u7eed\u65f6\u95f4\u5b57\u7b26\u4e32\u7684\u5217\u8868","title":"\u5206\u5272\u5b58\u653e\u8fde\u7eed\u65f6\u95f4\u5b57\u7b26\u4e32\u7684\u5217\u8868"},{"location":"typical_case/#itertoolschain","text":"\"\"\" \u4e00\u3001\u8c03\u7528itertools\u7684chain\u65b9\u6cd5\u5b9e\u73b0\"\"\" from itertools import chain my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } for value in chain(my_list,my_dict,range(1,5)): print(value) \"\"\" 1 2 3 html1 html2 1 2 3 4 \"\"\" \"\"\" \u4e8c\u3001\u4f7f\u7528yield\u5b9e\u73b0\u8be5\u529f\u80fd\"\"\" my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } # \u81ea\u5df1\u662f\u5fc3\u554a\u4e00\u4e2achain\u6548\u679c\u7684\u51fd\u6570 def my_chain(*args, **kwargs): for my_iterable in args: for value in my_iterable: yield value for value in my_chain(my_list, my_dict, range(5,7)): print(value) \"\"\" \u4e09\u3001\u4f7f\u7528yield from\u5b9e\u73b0\u8be5\u529f\u80fd \"\"\" my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } def my_chain(*args, **kwargs): for my_iterable in args: yield from my_iterable for value in my_chain(my_list, my_dict, range(5,7)): print(value)","title":"itertools.chain\u5b9e\u73b0\u540c\u65f6\u904d\u5386\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"typical_case/#_8","text":"# -*- coding:utf-8 -*- import re def mul_div(exp): \"\"\" \u8ba1\u7b97\u4e24\u4e2a\u6570\u7684\u4e58\u9664\u6cd5 :return:\u8fd4\u56destr\u7c7b\u578b\u7684\u7ed3\u679c,\u56e0\u4e3a\u540e\u9762\u8981\u7528\u8fd9\u4e2a\u7ed3\u679creplace\u6389\u4e4b\u524d\u8868\u8fbe\u5f0f \"\"\" if '*' in exp: a,b = exp.split('*') return str(float(a) * float(b)) else: a,b = exp.split('/') return str(float(a) / float(b)) def format_exp(exp): \"\"\" \u6574\u7406\u52a0\u51cf\u8fd0\u7b97\u7684\u683c\u5f0f \"\"\" exp = exp.replace('--','+') exp = exp.replace('-+','-') exp = exp.replace('++','+') exp = exp.replace('+-','-') return exp def cal_no_bracket(no_bracket_exp): \"\"\" \u8ba1\u7b97\u5185\u90e8\u4e0d\u542b\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u7684\u503c :param no_bracket_exp: \u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u5185\u90e8\u6ca1\u6709\u5c0f\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\uff1a'(9-2*5/3+7/3*99/4*2998+10*568/14)' :return: \u8fd4\u56defloat\u7c7b\u578b\u7684\u503c \"\"\" # \u5148\u8ba1\u7b97\u4e58\u9664\u6cd5\u2014\u2014\u4e24\u4e2a\u6570\u4e24\u4e2a\u6570\u7684\u8ba1\u7b97 while 1: # \u542b\u6709\u4e58\u9664\u7b26\u53f7\u7684\u8868\u8fbe\u5f0f # \u6ce8\u610f\u8fd9\u91cc\u7528search\u627e\uff01\u53ea\u627e*/\u7b26\u53f7\u4e24\u8fb9\u7684\uff0c\u5229\u7528\u5faa\u73af\uff0c\u4e00\u6b21\u6b21\u7684\u53bb\u627e # \u6ce8\u610f\uff0c\u4e58\u9664\u7b26\u53f7\u540e\u9762\u53ef\u80fd\u6709-\u53f7\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e5f\u8981\u8003\u8651\u8fdb\u53bb mul_div_exp = re.search('\\d+(\\.\\d+)?[*/]-?\\d+(\\.\\d+)?', no_bracket_exp) # \u627e\u5230\u8868\u793a\u6709\u4e24\u4e2a\u6570\u7684\u4e58\u9664\u6cd5 if mul_div_exp: # \u6ce8\u610f\u7528group\u53d6\u503c md_exp = mul_div_exp.group() # \u8ba1\u7b97\u7b80\u5355\u7684\u4e24\u4e2a\u6570\u7684\u4e58\u9664\u6cd5 res = mul_div(md_exp) # \u8ba1\u7b97\u51fa\u6765\u540e\u5c06\u4e4b\u524d\u7684\u8868\u8fbe\u5f0f\u6362\u6210\u8ba1\u7b97\u6210\u7684\u503c no_bracket_exp = no_bracket_exp.replace(md_exp,res) # \u6ca1\u6709\u8868\u793a\u6ca1\u6709\u4e58\u9664\u6cd5\u8fd0\u7b97\u4e86\uff0c\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\u8ba1\u7b97\u52a0\u51cf\u6cd5 else: break # \u8fd9\u65f6\u53ea\u6709\u52a0\u51cf\u6cd5\u4e86\uff0c\u5148\u628a\u8868\u8fbe\u5f0f\u7684\u7b26\u53f7\u7ba1\u7406\u4e00\u4e0b no_bracket_exp = format_exp(no_bracket_exp) # \u63a5\u7740\u8ba1\u7b97\u52a0\u51cf\u6cd5\uff0c\u7528findall\u627e\u5230\u6240\u6709\u7684\u6b63\u8d1f\u6570\uff0c\u8bb0\u5f97\u53d6\u6d88\u5206\u7ec4\u4f18\u5148 res_list = re.findall('[+\\-]?\\d+(?:\\.\\d+)?',no_bracket_exp) # \u8fdb\u884c\u7d2f\u52a0 sum = 0 for i in res_list: sum += float(i) return sum def remove_bracket(exp): \"\"\" \u5c06\u8868\u8fbe\u5f0f\u4e2d\u6240\u6709\u7684\u62ec\u53f7\u90fd\u8ba1\u7b97\u51fa\u7ed3\u679c\uff0c\u5e76\u66ff\u6362\u539f\u6709\u7684\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u4e0d\u542b\u6709\u62ec\u53f7 :param exp:str\u7c7b\u578b\u7684\u5e26\u6709\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\uff1a'1-2*((60-30+(9-2*5/3+7/3*99/4*2998+10*568/14)*(-40/5))-(-4*3)/(16-3*2))' :return:str\u7c7b\u578b\u4e0d\u5e26\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\uff1a'1-2*-1388335.8476190479' \"\"\" while 1: no_bracket = re.search('\\([^()]+\\)',exp) if no_bracket: # \u8bb0\u7684\u4ece\u7ed3\u679c\u96c6\u4e2d\u7528group\u65b9\u6cd5\u53d6\u5230\u7ed3\u679c no_bracket_exp = no_bracket.group() # \u8ba1\u7b97\u62ec\u53f7\u5185\u4e0d\u542b\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c res = cal_no_bracket(no_bracket_exp) ## \u6700\u540e\u628a\u4e4b\u524d\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\u66ff\u6362\u6210\u6700\u7ec8\u7684\u7ed3\u679c # \u8bb0\u5f97 res\u662ffloat\u7c7b\u578b\u7684\uff0c\u9700\u8981\u8f6c\u6210str\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c exp = exp.replace(no_bracket_exp,str(res)) # \u6ca1\u6709\u8868\u793a\u8868\u8fbe\u5f0f\u4e2d\u6ca1\u62ec\u53f7\u4e86 else: break # \u6700\u7ec8\u5c06\u6ca1\u6709\u62ec\u53f7\u7684\u8868\u8fbe\u5f0freturn return exp def calculator(origin_exp): \"\"\" \u5904\u7406\u539f\u59cb\u7684\u8868\u8fbe\u5f0f\uff0c\u5148\u53bb\u6389\u8868\u8fbe\u5f0f\u4e2d\u7684\u7a7a\u683c\uff0c\u7136\u540e\u53bb\u6389\u62ec\u53f7\u5e76\u4e14\u8fdb\u884c\u6700\u540e\u4e00\u6b65\u7684\u8ba1\u7b97 :param origin_exp: \u539f\u59cb\u7684\u8868\u8fbe\u5f0f :return: float\u7c7b\u578b\u7684\u7ed3\u679c \"\"\" # \u5148\u5904\u7406\u6389\u539f\u59cb\u8868\u8fbe\u5f0f\u4e2d\u7684\u7a7a\u683c exp = origin_exp.replace(' ','') # \u8ba1\u7b97\u5446\u7a7a\u683c\u7684\u7ed3\u679c res = remove_bracket(exp) # \u7136\u540e\u8ba1\u7b97\u6ca1\u6709\u7a7a\u683c\u7684\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c ret = cal_no_bracket(res) # \u8fd4\u56de float\u7c7b\u578b\u7684\u7ed3\u679c return ret if __name__ == '__main__': exp = '1 - 2 * ( (60-30 + (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )*(-40/5)) - (-4*3)/ (16-3*2) )' print(calculator(exp)) print(eval(exp)) \"\"\" 2776672.6952380957 2776672.6952380957 \"\"\"","title":"\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u8ba1\u7b97\u5668"},{"location":"typical_case/#python","text":"\u53c2\u8003\uff1a python\u5b9e\u73b0\u591a\u5c5e\u6027\u6392\u5e8f lst = [1, -2, 10, -12, -4, -5, 9, 2] # \u5c06\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u6b63\u6570\u5728\u524d\uff0c\u8d1f\u6570\u5728\u540e\uff0c\u5e76\u4e14\u5206\u522b\u6309\u7edd\u5bf9\u503c\u4ece\u5c0f\u5230\u5927 lst.sort(key=lambda x:(x<0,abs(x))) print(lst) # [1, 2, 9, 10, -2, -4, -5, -12]","title":"Python\u591a\u5c5e\u6027\u6392\u5e8f"},{"location":"typical_case/#python3typehint","text":"\u4f8b1 # -*- coding:utf-8 -*- def int_hint(a:int,b:int)->int: return a + b print(int_hint(11,22)) print(int_hint('aa','bb')) class People(object): def __init__(self,name): self.name = name def __str__(self): return self.name class Dog(object): def __init__(self,name): self.name = name def __str__(self): return self.name def sing(name:People)->None: print('{} is singing...'.format(name)) def bark(name:Dog)->None: print('{} is barking...'.format(name)) Tom = People('Tom') Jerry = Dog('Jerry') sing(Tom) sing(Jerry) bark(Jerry) \"\"\" 33 aabb Tom is singing... Jerry is singing... Jerry is barking... \"\"\" \u4f8b2 # -*- coding:utf-8 -*- import typing def create_dic(name:str,age:int)->dict: return { 'name':name, 'age':age } def my_callable(name:str,age:int,callback:typing.Callable[[str,int],dict]): ret = callback(name,age) return ret # \u5c06create_dict\u51fd\u6570\u4f20\u8fdb\u53bb\uff0c\u6ce8\u610f\u662f\u5728my_callable\u51fd\u6570\u4e2d\u6267\u884c print(my_callable('wanghw',18,create_dic)) # {'name': 'wanghw', 'age': 18}","title":"python3\u4e2d\u7684typehint"},{"location":"typical_case/#_9","text":"\u5806\u6808\u76f8\u5173\u7684\u51e0\u4e2a\u7ec3\u4e60\u2014\u2014\u5806\u6808\u6548\u7387\u9ad8\u4e8e\u9012\u5f52","title":"\u5806\u6808\u7684\u51e0\u4e2a\u7ec3\u4e60"},{"location":"typical_case/#_10","text":"\u6587\u4ef6\u4fee\u6539\u7684\u4e24\u79cd\u65b9\u5f0f","title":"\u6587\u4ef6\u4fee\u6539\u7684\u4e24\u79cd\u65b9\u5f0f"},{"location":"typical_case/#_11","text":"# -*- coding:utf-8 -*- import os for item in os.listdir('/Users/wanghongwei/PycharmProjects/deploy27/deploy'): print(item) for item in os.walk('/Users/wanghongwei/PycharmProjects/deploy27/deploy'): print(item)","title":"\u904d\u5386\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6587\u4ef6"},{"location":"typical_case/#_12","text":"# -*- coding:utf-8 -*- import shutil shutil.move('/Users/wanghongwei/PycharmProjects/deploy27/deploy1','/Users/wanghongwei/PycharmProjects/deploy27/deploy') shutil.rmtree('/Users/wanghongwei/PycharmProjects/deploy27/t')","title":"\u91cd\u547d\u540d\u4e0e\u5220\u9664"},{"location":"typical_case/#_13","text":"# -*- coding:utf-8 -*- import os import signal import subprocess import commands output = subprocess.check_output(\"pgrep -f python\", shell=True) pid_list = map(int, output.split()) for pid in pid_list: os.kill(pid, signal.SIGKILL)","title":"\u6740\u8fdb\u7a0b"},{"location":"typical_case/#salt","text":"# -*- coding:utf-8 -*- \"\"\" SaltAPI\u63a8\u9001\u6587\u4ef6 \"\"\" '''#### \u57fa\u4e8eSSH\uff1aAPI ####''' from salt.client.ssh.client import SSHClient client = SSHClient() # \u6267\u884c\u547d\u4ee4 result = client.cmd('*', 'cmd.run', ('ls',)) # \u8c03\u7528grains ret = client.cmd('*','grains.items') # \u8c03\u7528pillar ret = client.cmd('*','pillar.items') # \u6267\u884c state ret = client.cmd('*','state.sls',('fengfeng','pillar={\"xxxx\":\"luffy\"}')) # \u53d1\u9001\u6587\u4ef6 ret = client.cmd('*','cp.get_file',('salt://fengfeng/files/test.conf','/data/s1.conf')) # \u53d1\u9001\u6587\u4ef6 ret = client.cmd('*','cp.get_url',('http://www.pythonav.com/allstatic/imgs/mv/picture/2.jpeg','/data/s1.jpeg')) '''#### \u57fa\u4e8eMaster\uff1aAPI ####''' import salt.client local = salt.client.LocalClient() # \u6267\u884c\u547d\u4ee4 result = client.cmd('*', 'cmd.run', ('ls',)) # \u8c03\u7528grains ret = client.cmd('*','grains.items') # \u8c03\u7528pillar ret = client.cmd('*','pillar.items') # \u6267\u884c state ret = client.cmd('*','state.sls',('fengfeng','pillar={\"xxxx\":\"luffy\"}')) # \u53d1\u9001\u6587\u4ef6 ret = client.cmd('*','cp.get_file',('salt://fengfeng/files/test.conf','/data/s1.conf')) # \u53d1\u9001\u6587\u4ef6 ret = client.cmd('*','cp.get_url',('http://www.pythonav.com/allstatic/imgs/mv/picture/2.jpeg','/data/s1.jpeg'))","title":"salt\u63a8\u9001\u6587\u4ef6"},{"location":"typical_case/#_14","text":"# -*- coding:utf-8 -*- import re import requests url = 'https://www.douyin.com/share/user/6556303280/?share_type=link' # 75097696932/96488770253/6556303280/67561351000 # ###################### 1. \u6839\u636eurl\u83b7\u53d6\u7528\u6237ID ######################### user_id = re.findall('share/user/(.*)/\\?', url)[0] # ###################### 2. \u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7b7e\u540d ######################### # \u65b9\u5f0f\u4e00\uff1a import os output = os.popen('node s1.js %s' % user_id) # output = os.popen('node byted-acrawler.js %s' % user_id) signature = output.readlines()[0].strip() # \u65b9\u5f0f\u4e8c\uff1a \"\"\" def exec_javascript(file_path, func, *args): pip3 install execjs import execjs with open(file_path, 'r', encoding='UTF-8') as f: content = f.read() ctx = execjs.compile(content) return ctx.call(func, *args) signature = exec_javascript(\"encode.js\", '_bytedAcrawler.sign', user_id) \"\"\" # ###################### 3. \u83b7\u53d6\u6296\u97f3\u7528\u6237\u53d1\u9001\u8fc7\u7684\u6240\u6709\u7684\u89c6\u9891 ######################### headers = { 'accept': 'application/json', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2', 'upgrade-insecure-requests': '1', 'host':'www.douyin.com', 'X-Requested-With':'XMLHttpRequest', 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36', } user_video_list = [] user_video_params = { 'user_id': str(user_id), 'count': '21', 'max_cursor': '0', 'aid': '1128', '_signature': signature, 'dytk': '114f1984d1917343ccfb14d94e7ce5f5' } def get_aweme_list(max_cursor=None): if max_cursor: user_video_params['max_cursor'] = str(max_cursor) res = requests.get( url=\"https://www.douyin.com/aweme/v1/aweme/post/\", params=user_video_params, headers=headers ) content_json = res.json() print(content_json) aweme_list = content_json.get('aweme_list', []) user_video_list.extend(aweme_list) if content_json.get('has_more') == 1: return get_aweme_list(content_json.get('max_cursor')) get_aweme_list() print(\"\u8be5\u7528\u6237\u53d1\u5e03\u8fc7\u6296\u97f3\", user_video_list) # ###################### 4. \u83b7\u53d6\u6296\u97f3\u8d5e\u8fc7\u7684\u6240\u6709\u89c6\u9891 ######################### # # favor_video_list = [] # # favor_video_params = { # 'user_id': str(user_id), # 'count': '21', # 'max_cursor': '0', # 'aid': '1128', # '_signature': signature # } # # # def get_favor_list(max_cursor=None): # if max_cursor: # favor_video_params['max_cursor'] = str(max_cursor) # res = requests.get( # url=\"https://www.douyin.com/aweme/v1/aweme/favorite/\", # params=favor_video_params, # headers=headers # ) # content_json = res.json() # aweme_list = content_json.get('aweme_list', []) # favor_video_list.extend(aweme_list) # if content_json.get('has_more') == 1: # return get_favor_list(content_json.get('max_cursor')) # # # get_favor_list() # # print(\"\u8be5\u7528\u6237\u8d5e\u8fc7\u6296\u97f3\", favor_video_list) # ###################### 5. \u4e0b\u8f7d\u6296\u97f3 ######################### \"\"\" base_download_folder = os.path.join('download', user_id) if not os.path.isdir(base_download_folder): os.mkdir(base_download_folder) # \u4e0b\u8f7d\u81ea\u5df1\u7684\u89c6\u9891 user_download_folder = os.path.join(base_download_folder, 'user') if not os.path.isdir(user_download_folder): os.mkdir(user_download_folder) for aweme in user_video_list: if aweme.get('video', None): video_id = aweme['video']['play_addr']['uri'] file_name = video_id + \".mp4\" file_path = os.path.join(user_download_folder, file_name) response_video = requests.get( url='https://aweme.snssdk.com/aweme/v1/play/', params={ 'video_id': video_id, }, stream=True, ) with open(file_path, 'wb') as fh: for chunk in response_video.iter_content(chunk_size=1024): fh.write(chunk) # \u4e0b\u8f7d\u8d5e\u8fc7\u7684\u89c6\u9891 \"\"\" \"\"\" favor_download_folder = os.path.join(base_download_folder, 'favor') if not os.path.isdir(favor_download_folder): os.mkdir(favor_download_folder) for aweme in favor_video_list: if aweme.get('video', None): video_id = aweme['video']['play_addr']['uri'] file_name = video_id + \".mp4\" file_path = os.path.join(favor_download_folder, file_name) response_video = requests.get( url='https://aweme.snssdk.com/aweme/v1/play/', params={ 'video_id': video_id, }, stream=True, ) with open(file_path, 'wb') as fh: for chunk in response_video.iter_content(chunk_size=1024): fh.write(chunk) \"\"\"","title":"\u6296\u97f3"},{"location":"typical_case/#iter","text":"\u7528\u8fed\u4ee3\u5668\u53bb\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\uff0c\u9632\u6b62\u6587\u4ef6\u592a\u5927\u4e00\u6b21\u6027\u8bfb\u53d6\u7684\u8bdd\u5360\u7528\u8fc7\u5927\u5185\u5b58\uff01 def iter_file(path, size=1024): with open(path, \"rb\", ) as f: for data in iter(lambda: f.read(size), b''): yield data for row in iter_file(\"manage.py\"): print(row)","title":"iter\u65b9\u6cd5\u8bfb\u53d6\u6587\u4ef6"},{"location":"typical_case/#-","text":"import re import random import requests from bs4 import BeautifulSoup from concurrent.futures import ThreadPoolExecutor from multiprocessing import cpu_count # ------------------------- \u5236\u4f5c\u82f1\u6587\u8bcd\u5178 -------------------------------------- rex = re.compile(r'[-&()/\\.]+') def bar(url): response = requests.get(url=url) soup = BeautifulSoup(response.text, 'html.parser') ul_obj = soup.find(name='ul', attrs={'class', 'columns2 browse-list'}) return ul_obj.find_all(name='a') def worker(url): \"\"\" \u62ff\u5230\u5177\u4f53\u7684\u8fde\u63a5\uff0chttps://www.collinsdictionary.com/browse/english/words-starting-with-a \u5982\u4e0a\u94fe\u63a5\uff0c\u662f\u6240\u6709\u4ee5a\u5f00\u5934\u7684\u5355\u8bcd\u96c6\u5408 \"\"\" a_list = bar(url='https://www.collinsdictionary.com/browse/english/words-starting-with-{}'.format(url[0])) for item in a_list: for i in bar(item.get('href')): res = i.text if not re.findall(rex, res) and len(res) > 2: print(res) url[1].write('{}\\n'.format(res)) def spider_collins(): \"\"\" \u722c\u53d6\u67ef\u6797\u65af\u7f51\u7ad9\u6240\u6709\u7684\u5355\u8bcd\uff0c\u94fe\u63a5\u6df1\u5ea6\u5171\u4e09\u5c42\uff0c \u7b2c\u4e00\u5c42\u83b7\u53d624\u4e2a\u5b57\u6bcd\u7684\u8fde\u63a5\uff0c \u7b2c\u4e8c\u5c42\u83b7\u53d6\u4ee5\u5b57\u6bcd\u5f00\u5934\u7684\u6240\u6709\u77ed\u8bed\u6216\u5355\u8bcd\uff0c \u7b2c\u4e09\u5c42\uff0c\u5c31\u662f\u5177\u4f53\u7684\u4e00\u4e2a\u4e2a\u5355\u8bcd\u4e86 \"\"\" f = open('w.txt', 'a', encoding='utf8') t = ThreadPoolExecutor(cpu_count() * 5) for i in range(ord('a'), ord('z') + 1): # 97 ~ 122 t.submit(worker, (chr(i), f)) # break t.shutdown() f.close()","title":"\u5f00\u542f\u591a\u7ebf\u7a0b-\u722c\u53d6\u79d1\u65af\u6797\u8bcd\u5178"},{"location":"typical_case/#_15","text":"\u9012\u5f52\u5b9e\u73b0\u5217\u8868\u7684\u5d4c\u5957\u67e5\u627e # \u5c06\u5217\u8868lis\u4e2d\u7684\"tt\"\u53d8\u6210\u2f24\u5199 def recursion1(lis): for i, v in enumerate(lis): #\u8fd9\u91cc\u7684i\u662f\u5217\u8868\u5143\u7d20\u7684\u4e0b\u6807\uff0cv\u4e3a\u5217\u8868\u4e2d\u7684\u5143\u7d20 #\u5982\u679c\u5217\u8868\u7684\u5143\u7d20\u4e3att\uff0c\u76f4\u63a5\u8f6c\u5927\u5199 if v == 'tt': lis[i] = v.upper() #\u5982\u679c\u904d\u5386\u5230\u7684\u7684\u5143\u7d20\u662f\u4e2a\u5217\u8868 elif isinstance(v, list): #\u9012\u5f52\u64cd\u4f5c recursion1(v) #\u5c06\u5217\u8868\u4e2d\u7684\u6570\u5b573\u53d8\u6210\u5b57\u7b26\u4e32\"100\" def recursion2(lis): for i,v in enumerate(lis): if v == 3: lis[i] = '100' elif isinstance(v,list): recursion2(v) #\u5c06\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\"1\"\u53d8\u6210\u6570\u5b57101 def recursion3(lis): for i,v in enumerate(lis): if v == '1': lis[i] = 101 elif isinstance(v,list): recursion3(v) if __name__ == '__main__': lis = [2, 3, \"k\", [\"qwe\", 20, [\"k1\", [\"tt\", 3, \"1\"]], 89], \"ab\", \"adv\"] # a1. \u5c06\u5217\u8868lis\u4e2d\u7684\"tt\"\u53d8\u6210\u2f24\u5199\uff08\u2f64\u4e24\u79cd\u2f45\u5f0f\uff09\u3002 #\u65b9\u6cd5\u4e00\uff1a # lis[3][2][1][0] = lis[3][2][1][0].upper() # print(lis) #[2, 3, 'k', ['qwe', 20, ['k1', ['TT', 3, '1']], 89], 'ab', 'adv'] #\u65b9\u6cd5\u4e8c\uff1a recursion1(lis) print(lis) #[2, 3, 'k', ['qwe', 20, ['k1', ['TT', 3, '1']], 89], 'ab', 'adv'] # b. \u5c06\u5217\u8868\u4e2d\u7684\u6570\u5b573\u53d8\u6210\u5b57\u7b26\u4e32\"100\"\uff08\u2f64\u4e24\u79cd\u2f45\u5f0f\uff09\u3002 #\u65b9\u6cd5\u4e00\uff1a # lis[1],lis[3][2][1][1] = '100','100' # print(lis) #\u65b9\u6cd5\u4e8c: recursion2(lis) print(lis) # c. \u5c06\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\"1\"\u53d8\u6210\u6570\u5b57101\uff08\u2f64\u4e24\u79cd\u2f45\u5f0f\uff09\u3002 #\u65b9\u6cd5\u4e00\uff1a # lis[3][2][1][2] = 101 # print(lis) recursion3(lis) print(lis) \u9012\u5f52\u5b9e\u73b0\u5faa\u73af\u6253\u5370\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20 def recursion_list(lis): for i in lis: if isinstance(i,list): recursion_list(i) else: print(i,end=\" \") if __name__ == '__main__': li = [1, 3, 4, \"whw\", [3, 7, 8, \"WANGhw\"], 5, \"HH\"] recursion_list(li) \"\"\" 1 3 4 whw 3 7 8 WANGhw 5 HH \"\"\"","title":"\u9012\u5f52\u5d4c\u5957\u5217\u8868\u7684\u7ec3\u4e60"},{"location":"typical_case/#socket","text":"# -*- coding:utf-8 -*- import json import struct def pro_send(sk,dic,pro=True): str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') # \u9ed8\u8ba4\u9009\u62e9\u534f\u8bae\u53d1\u9001 if pro: num_dic = struct.pack('i',len(bytes_dic)) sk.sendall(num_dic) sk.sendall(bytes_dic) def pro_recv(sk,pro=True): # \u4f9d\u636e\u534f\u8bae\u5148\u6536\u5230\u7684\u662f\u5b57\u5178\u7684\u957f\u5ea6 if pro: num_dic = sk.recv(4) # \u6ce8\u610funpack\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u9700\u8981\u52a0\u4e0a0\u7d22\u5f15\u53d6\u503c num = struct.unpack('i',num_dic)[0] str_dic = sk.recv(num).decode('utf-8') dic = json.loads(str_dic) # \u4e0d\u6839\u636e\u534f\u8bae\u63a5\u6536\u76f4\u63a5\u75281024\u5927\u5c0f\u7684\u957f\u5ea6\u6765\u63a5\u6536 else: dic = json.loads(sk.recv(1024).decode('utf-8')) return dic","title":"socket\u4f20\u8f93\u662f\u9009\u62e9\u662f\u5426\u6839\u636e\u534f\u8bae\u63a5\u53d7\u4e0e\u53d1\u9001"},{"location":"python\u57fa\u7840/SQLAlchemy/","text":"\u4e2a\u4eba\u535a\u5ba2 SQLAlchemy\u4f7f\u7528\u6c47\u603b flask\u9879\u76ee\u4e2d\u4f7f\u7528Flask-SQLAlchemy\u4ee5\u53ca\u5229\u7528\u811a\u672c\u65b9\u5f0f\u542f\u52a8flask\u9879\u76ee\u7684\u65b9\u6cd5","title":"18 \u64cd\u4f5c\u6570\u636e\u5e93SQLAlchemy\u6a21\u5757"},{"location":"python\u57fa\u7840/SQLAlchemy/#_1","text":"SQLAlchemy\u4f7f\u7528\u6c47\u603b flask\u9879\u76ee\u4e2d\u4f7f\u7528Flask-SQLAlchemy\u4ee5\u53ca\u5229\u7528\u811a\u672c\u65b9\u5f0f\u542f\u52a8flask\u9879\u76ee\u7684\u65b9\u6cd5","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u57fa\u7840/collections/","text":"Counter \u57fa\u672c\u4f7f\u7528 from collections import Counter #\u8ba1\u6570 c2 = Counter('qqa23') print(c2)#Counter({'q': 2, 'a': 1, '2': 1, '3': 1}) #\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5b57\u5178 print(dict(c2))#{'q': 2, 'a': 1, '2': 1, '3': 1} c1 = Counter([1,2,3,7,8,1]) print(c1) # Counter({1: 2, 2: 1, 3: 1, 7: 1, 8: 1}) \u6269\u5c55\u2014\u2014update\u65b9\u6cd5\u4e0etopn\u7684\u95ee\u9898\u89e3\u51b3 from collections import Counter users = [\"whw1\",\"whw2\",\"naruto1\",\"naruto2\",\"whw1\",\"whw1\",\"naruto2\"] user_counter1 = Counter(users) print(user_counter1) # Counter({'whw1': 3, 'naruto2': 2, 'whw2': 1, 'naruto1': 1}) user_counter2 = Counter(\"wsaadw2wqea\") print(user_counter2) # Counter({'w': 3, 'a': 3, 's': 1, 'd': 1, '2': 1, 'q': 1, 'e': 1}) ### update\u65b9\u6cd5 user_counter1.update(user_counter2) print(user_counter1) \"\"\" Counter({'whw1': 3, 'w': 3, 'a': 3, 'naruto2': 2, 'whw2': 1, 'naruto1': 1, 's': 1, 'd': 1, '2': 1, 'q': 1, 'e': 1}) \"\"\" ### topn\u7684\u95ee\u9898 \u2014\u2014 most_common\u65b9\u6cd5 top3 = user_counter1.most_common(3) print(top3) # [('whw1', 3), ('w', 3), ('a', 3)] namedtuple \u7b80\u5355\u8bf4\u660e from collections import namedtuple # \u547d\u540d\u5143\u7ec4 # \u4f5c\u7528\uff1a\u5c06\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u660e\u786e\u6807\u660e\uff0c\u8ba9\u522b\u4eba\u77e5\u9053\u8fd9\u4e2a\u5143\u7d20\u662f\u4ec0\u4e48\u610f\u601d # \u660e\u786e\u7684\u6807\u660e\u6bcf\u4e2a\u5143\u7d20\u662f\u4ec0\u4e48\u610f\u601d # t1 \u5f97\u5230\u7684\u662f\u4e00\u4e2a\u7c7b t1 = namedtuple('wanghw',['name','age','sex','hobby']) print(t1)#<class '__main__.wanghw'> ## tt\u662ft1\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61 tt = t1('\u738b\u5b8f\u4f1f','21','male','basketball') print(tt)#wanghw(name='\u738b\u5b8f\u4f1f', age='21', sex='male', hobby='basketball') ## \u6700\u540e\u53ef\u4ee5\u627ett\u7684\u5c5e\u6027 print(tt.name)#\u738b\u5b8f\u4f1f \u5b9e\u9645\u9700\u6c42 # -*- coding:utf-8 -*- from collections import namedtuple ### \u9700\u6c42\uff1auser\u8868\u7684\u6570\u636e\u5168\u90e8\u53d6\u51fa\uff0c\u7136\u540e\u65b0\u52a0\u4e00\u4e2a\u5217 # \u521b\u5efa\u4e00\u4e2a\u7c7b \u2014\u2014 \u65b0\u52a0\u4e00\u4e2a\u5217\uff1aedu User = namedtuple(\"User\",[\"name\",\"age\",\"sex\",\"hobby\",\"edu\"]) user_tuple = (\"naruto\",18,\"male\",\"\u87ba\u65cb\u4e38\") user_lst = [\"sasuke\",18,\"male\",\"\u5343\u9e1f\u6d41\"] user_dict = { \"name\":\"whw\", \"age\":22, \"sex\":\"male\", \"hobby\":\"pingpang\", \"edu\":\"master\", } # \u65b0\u52a0\u4e00\u4e2aedu\u5217 user = User(*user_tuple,edu=\"master\") # 1\u3001\u53d6\u6570 \u2014\u2014 \u6ce8\u610f\u8fd9\u91cc\u7684*other\u53ef\u4ee5\u83b7\u53d6\u5269\u4e0b\u6240\u6709\u7684\u503c name,age,*other = user print(name,age,other) # naruto 18 ['male', '\u87ba\u65cb\u4e38', 'master'] # 2\u3001_asdict()\u65b9\u6cd5 user_info_dic = user._asdict() print(user_info_dic) # OrderedDict([('name', 'naruto'), ('age', 18), ('sex', 'male'), ('hobby', '\u87ba\u65cb\u4e38'), ('edu', 'master')]) deque \u6ce8\u610f\uff1adeque\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0clist\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff01 from collections import deque #\u53cc\u7aef\u961f\u5217\u2014\u2014\u652f\u6301\u5217\u8868\u7684\u64cd\u4f5c\uff01 d = deque([1,2,3,4]) print(d)#deque([1, 2, 3, 4]) #\u53f3\u8fb9\u6dfb\u52a0 d.append(5)#deque([1, 2, 3, 4, 5]) print(d) #\u5de6\u8fb9\u6dfb\u52a0 d.appendleft(6) print(d)#deque([6, 1, 2, 3, 4, 5]) #pop\u2014\u2014\u4e0d\u80fd\u7ed9\u53c2\u6570 print(d.pop())#5 print(d.popleft())#6 print(d)#deque([1, 2, 3, 4]) OrderedDict from collections import OrderedDict user_dic = OrderedDict() user_dic[\"a\"] = \"whw\" user_dic[\"b\"] = \"sasuke\" user_dic[\"c\"] = \"naruto\" ### popitem\u65b9\u6cd5 \u2014\u2014 \u9ed8\u8ba4pop\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9 \"\"\" print(user_dic.popitem()) # ('c', 'naruto') print(user_dic) # OrderedDict([('a', 'whw'), ('b', 'sasuke')]) \"\"\" ### popitem\u65b9\u6cd5 \u2014\u2014 \u8bbe\u7f6elast\u4e3aFalse\u7684\u8bddpop\u7b2c\u4e00\u4e2a\u952e\u503c\u5bf9 \"\"\" print(user_dic.popitem(last=False)) # ('a', 'whw') print(user_dic) # OrderedDict([('b', 'sasuke'), ('c', 'naruto')]) \"\"\" ### pop\u65b9\u6cd5 \u2014\u2014 \u6307\u5b9akey \"\"\" print(user_dic.pop(\"b\")) # sasuke print(user_dic) # OrderedDict([('a', 'whw'), ('c', 'naruto')]) \"\"\" ### move_to_end\u65b9\u6cd5 \u2014\u2014\u2014\u2014 \u6ce8\u610f\u8fd9\u4e2a\u8fd4\u56de\u503c\u4e3aNone\uff01\u662f\u5728\u6e90\u5b57\u5178\u4e2d\u505a\u7684\u64cd\u4f5c\uff01 print(user_dic.move_to_end(\"b\")) # None print(user_dic) # OrderedDict([('a', 'whw'), ('c', 'naruto'), ('b', 'sasuke')]) ChainMap from collections import ChainMap # \u4e24\u4e2a\u5b57\u5178\u6709\u76f8\u540c\u7684key\uff1ab user_dic1 = {\"a\":\"whw1\",\"b\":\"whw2\"} user_dic2 = {\"b\":\"whw3\",\"d\":\"whw4\"} ### ChainMap new_dic = ChainMap(user_dic1,user_dic2) # maps print(new_dic.maps) \"\"\" [{'a': 'whw1', 'b': 'whw2'}, {'b': 'whw3', 'd': 'whw4'}] \"\"\" # \u904d\u5386\u53d6\u503c for key,value in new_dic.items(): print(f\"{key}:{value}\") \"\"\" ### \u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u6ca1\u6709\u987a\u5e8f\u7684\uff01\uff01\uff01 b:whw2 a:whw1 d:whw4 # \u51b2\u7a81\u7684\u8bdd\u4f7f\u7528\u7b2c\u4e00\u4e2a\u5b57\u5178\u7684key \"\"\" # \u4fee\u6539\u503c new_dic.maps[0][\"a\"] = \"wanghongwei\" for key,value in new_dic.items(): print(f\"{key}:{value}\") \"\"\" b:whw2 a:wanghongwei d:whw4 \"\"\" defaultdict \u4f7f\u7528\u9891\u7387\u975e\u5e38\u9ad8\u3002 Python\u4e2ddefaultdict\u7684\u4f7f\u7528","title":"12 collections\u6a21\u5757"},{"location":"python\u57fa\u7840/collections/#counter","text":"\u57fa\u672c\u4f7f\u7528 from collections import Counter #\u8ba1\u6570 c2 = Counter('qqa23') print(c2)#Counter({'q': 2, 'a': 1, '2': 1, '3': 1}) #\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5b57\u5178 print(dict(c2))#{'q': 2, 'a': 1, '2': 1, '3': 1} c1 = Counter([1,2,3,7,8,1]) print(c1) # Counter({1: 2, 2: 1, 3: 1, 7: 1, 8: 1}) \u6269\u5c55\u2014\u2014update\u65b9\u6cd5\u4e0etopn\u7684\u95ee\u9898\u89e3\u51b3 from collections import Counter users = [\"whw1\",\"whw2\",\"naruto1\",\"naruto2\",\"whw1\",\"whw1\",\"naruto2\"] user_counter1 = Counter(users) print(user_counter1) # Counter({'whw1': 3, 'naruto2': 2, 'whw2': 1, 'naruto1': 1}) user_counter2 = Counter(\"wsaadw2wqea\") print(user_counter2) # Counter({'w': 3, 'a': 3, 's': 1, 'd': 1, '2': 1, 'q': 1, 'e': 1}) ### update\u65b9\u6cd5 user_counter1.update(user_counter2) print(user_counter1) \"\"\" Counter({'whw1': 3, 'w': 3, 'a': 3, 'naruto2': 2, 'whw2': 1, 'naruto1': 1, 's': 1, 'd': 1, '2': 1, 'q': 1, 'e': 1}) \"\"\" ### topn\u7684\u95ee\u9898 \u2014\u2014 most_common\u65b9\u6cd5 top3 = user_counter1.most_common(3) print(top3) # [('whw1', 3), ('w', 3), ('a', 3)]","title":"Counter"},{"location":"python\u57fa\u7840/collections/#namedtuple","text":"\u7b80\u5355\u8bf4\u660e from collections import namedtuple # \u547d\u540d\u5143\u7ec4 # \u4f5c\u7528\uff1a\u5c06\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u660e\u786e\u6807\u660e\uff0c\u8ba9\u522b\u4eba\u77e5\u9053\u8fd9\u4e2a\u5143\u7d20\u662f\u4ec0\u4e48\u610f\u601d # \u660e\u786e\u7684\u6807\u660e\u6bcf\u4e2a\u5143\u7d20\u662f\u4ec0\u4e48\u610f\u601d # t1 \u5f97\u5230\u7684\u662f\u4e00\u4e2a\u7c7b t1 = namedtuple('wanghw',['name','age','sex','hobby']) print(t1)#<class '__main__.wanghw'> ## tt\u662ft1\u5b9e\u4f8b\u5316\u7684\u5bf9\u8c61 tt = t1('\u738b\u5b8f\u4f1f','21','male','basketball') print(tt)#wanghw(name='\u738b\u5b8f\u4f1f', age='21', sex='male', hobby='basketball') ## \u6700\u540e\u53ef\u4ee5\u627ett\u7684\u5c5e\u6027 print(tt.name)#\u738b\u5b8f\u4f1f \u5b9e\u9645\u9700\u6c42 # -*- coding:utf-8 -*- from collections import namedtuple ### \u9700\u6c42\uff1auser\u8868\u7684\u6570\u636e\u5168\u90e8\u53d6\u51fa\uff0c\u7136\u540e\u65b0\u52a0\u4e00\u4e2a\u5217 # \u521b\u5efa\u4e00\u4e2a\u7c7b \u2014\u2014 \u65b0\u52a0\u4e00\u4e2a\u5217\uff1aedu User = namedtuple(\"User\",[\"name\",\"age\",\"sex\",\"hobby\",\"edu\"]) user_tuple = (\"naruto\",18,\"male\",\"\u87ba\u65cb\u4e38\") user_lst = [\"sasuke\",18,\"male\",\"\u5343\u9e1f\u6d41\"] user_dict = { \"name\":\"whw\", \"age\":22, \"sex\":\"male\", \"hobby\":\"pingpang\", \"edu\":\"master\", } # \u65b0\u52a0\u4e00\u4e2aedu\u5217 user = User(*user_tuple,edu=\"master\") # 1\u3001\u53d6\u6570 \u2014\u2014 \u6ce8\u610f\u8fd9\u91cc\u7684*other\u53ef\u4ee5\u83b7\u53d6\u5269\u4e0b\u6240\u6709\u7684\u503c name,age,*other = user print(name,age,other) # naruto 18 ['male', '\u87ba\u65cb\u4e38', 'master'] # 2\u3001_asdict()\u65b9\u6cd5 user_info_dic = user._asdict() print(user_info_dic) # OrderedDict([('name', 'naruto'), ('age', 18), ('sex', 'male'), ('hobby', '\u87ba\u65cb\u4e38'), ('edu', 'master')])","title":"namedtuple"},{"location":"python\u57fa\u7840/collections/#deque","text":"\u6ce8\u610f\uff1adeque\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0clist\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff01 from collections import deque #\u53cc\u7aef\u961f\u5217\u2014\u2014\u652f\u6301\u5217\u8868\u7684\u64cd\u4f5c\uff01 d = deque([1,2,3,4]) print(d)#deque([1, 2, 3, 4]) #\u53f3\u8fb9\u6dfb\u52a0 d.append(5)#deque([1, 2, 3, 4, 5]) print(d) #\u5de6\u8fb9\u6dfb\u52a0 d.appendleft(6) print(d)#deque([6, 1, 2, 3, 4, 5]) #pop\u2014\u2014\u4e0d\u80fd\u7ed9\u53c2\u6570 print(d.pop())#5 print(d.popleft())#6 print(d)#deque([1, 2, 3, 4])","title":"deque"},{"location":"python\u57fa\u7840/collections/#ordereddict","text":"from collections import OrderedDict user_dic = OrderedDict() user_dic[\"a\"] = \"whw\" user_dic[\"b\"] = \"sasuke\" user_dic[\"c\"] = \"naruto\" ### popitem\u65b9\u6cd5 \u2014\u2014 \u9ed8\u8ba4pop\u6700\u540e\u4e00\u4e2a\u952e\u503c\u5bf9 \"\"\" print(user_dic.popitem()) # ('c', 'naruto') print(user_dic) # OrderedDict([('a', 'whw'), ('b', 'sasuke')]) \"\"\" ### popitem\u65b9\u6cd5 \u2014\u2014 \u8bbe\u7f6elast\u4e3aFalse\u7684\u8bddpop\u7b2c\u4e00\u4e2a\u952e\u503c\u5bf9 \"\"\" print(user_dic.popitem(last=False)) # ('a', 'whw') print(user_dic) # OrderedDict([('b', 'sasuke'), ('c', 'naruto')]) \"\"\" ### pop\u65b9\u6cd5 \u2014\u2014 \u6307\u5b9akey \"\"\" print(user_dic.pop(\"b\")) # sasuke print(user_dic) # OrderedDict([('a', 'whw'), ('c', 'naruto')]) \"\"\" ### move_to_end\u65b9\u6cd5 \u2014\u2014\u2014\u2014 \u6ce8\u610f\u8fd9\u4e2a\u8fd4\u56de\u503c\u4e3aNone\uff01\u662f\u5728\u6e90\u5b57\u5178\u4e2d\u505a\u7684\u64cd\u4f5c\uff01 print(user_dic.move_to_end(\"b\")) # None print(user_dic) # OrderedDict([('a', 'whw'), ('c', 'naruto'), ('b', 'sasuke')])","title":"OrderedDict"},{"location":"python\u57fa\u7840/collections/#chainmap","text":"from collections import ChainMap # \u4e24\u4e2a\u5b57\u5178\u6709\u76f8\u540c\u7684key\uff1ab user_dic1 = {\"a\":\"whw1\",\"b\":\"whw2\"} user_dic2 = {\"b\":\"whw3\",\"d\":\"whw4\"} ### ChainMap new_dic = ChainMap(user_dic1,user_dic2) # maps print(new_dic.maps) \"\"\" [{'a': 'whw1', 'b': 'whw2'}, {'b': 'whw3', 'd': 'whw4'}] \"\"\" # \u904d\u5386\u53d6\u503c for key,value in new_dic.items(): print(f\"{key}:{value}\") \"\"\" ### \u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u6ca1\u6709\u987a\u5e8f\u7684\uff01\uff01\uff01 b:whw2 a:whw1 d:whw4 # \u51b2\u7a81\u7684\u8bdd\u4f7f\u7528\u7b2c\u4e00\u4e2a\u5b57\u5178\u7684key \"\"\" # \u4fee\u6539\u503c new_dic.maps[0][\"a\"] = \"wanghongwei\" for key,value in new_dic.items(): print(f\"{key}:{value}\") \"\"\" b:whw2 a:wanghongwei d:whw4 \"\"\"","title":"ChainMap"},{"location":"python\u57fa\u7840/collections/#defaultdict","text":"\u4f7f\u7528\u9891\u7387\u975e\u5e38\u9ad8\u3002 Python\u4e2ddefaultdict\u7684\u4f7f\u7528","title":"defaultdict"},{"location":"python\u57fa\u7840/configparser/","text":"configparser\u6a21\u5757\u83b7\u53d6settings.ini\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u6570\u636e configparser\u6a21\u5757\u83b7\u53d6settings.ini\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u6570\u636e","title":"14 configparser\u6a21\u5757"},{"location":"python\u57fa\u7840/configparser/#configparsersettingsini","text":"configparser\u6a21\u5757\u83b7\u53d6settings.ini\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u6570\u636e","title":"configparser\u6a21\u5757\u83b7\u53d6settings.ini\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u6570\u636e"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/","text":"\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u95f4\u9694\u7684\u5929\u6570 datetime\u6a21\u5757\u4f1a\u6709\u8d1f\u6570 from datetime import datetime day1 = datetime(2019,2,3) day2 = datetime(2022,12,30) # \u65f6\u95f4\u5dee \u2014\u2014 \u5fc5\u987b\u90fd\u662fdatetime\u683c\u5f0f\u7684\u6570\u636e \u2014\u2014 \u4f1a\u6709\u8d1f\u6570 print((day1 - day2).days) # -1426 dateutil\u6a21\u5757\u5982\u679cend\u7684\u65e5\u671f\u5c0f\u4e8estart\u7684\u65e5\u671f\u4f1a\u8fd4\u56de0 from datetime import datetime # day1 = datetime(2019,2,3) # day2 = datetime(2022,12,30) # \u65f6\u95f4\u5dee \u2014\u2014 \u5fc5\u987b\u90fd\u662fdatetime\u683c\u5f0f\u7684\u6570\u636e # print((day1 - day2).days) # -1426 from dateutil import rrule day1_str = \"2020-1-03\" day2_str = \"2020-05-05\" day3_str = \"2019-05-05\" ### \u6b63\u5e38\u60c5\u51b5\uff1a\u7ed3\u675f\u65e5\u671f\u5c0f\ud83c\udf27\u4e8e\u5f00\u59cb\u65e5\u671f start_time = datetime.strptime(day1_str,\"%Y-%m-%d\") end_time = datetime.strptime(day2_str,\"%Y-%m-%d\") days_format = rrule.rrule(freq=rrule.DAILY,dtstart=start_time,until=end_time) print(days_format) \"\"\" DTSTART:20200103T000000 RRULE:FREQ=DAILY;UNTIL=20200505T000000 \"\"\" print(days_format.count()) # 124 ### \u5982\u679c\u7ed3\u675f\u65e5\u671f\u5927\u96e8\u5f00\u59cb\u65e5\u671f\u4f1a\u8fd4\u56de0 d3_end = datetime.strptime(day3_str,\"%Y-%m-%d\") days_format2 = rrule.rrule(freq=rrule.DAILY,dtstart=start_time,until=d3_end) print(days_format2.count()) # 0 datetime\u4f7f\u7528\u7b14\u8bb0 from datetime import datetime,timedelta # \u62ff\u5230\u7684\u662f\"\u65f6\u95f4\u5bf9\u8c61\" print(datetime.now())#2019-03-20 15:23:32.883745 # \u5c06\u65f6\u95f4\u5bf9\u8c61\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233 \u540e\u9762.\u662f\u6beb\u79d2 f = datetime.now() s = datetime.timestamp(f) print(s)#1553066612.883745 # \u5c06\u65f6\u95f4\u6233\u8f6c\u4e3a\u65f6\u95f4\u5bf9\u8c61 print(datetime.fromtimestamp(s))#2019-03-20 15:23:32.883745 # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u65f6\u95f4\u5bf9\u8c61 s = '2018-zz-20' f = datetime.strptime(s,'%Y-%m-%d') print(f,type(f))#2018-zz-20 00:00:00 <class 'datetime.datetime'> # \u5c06\u65f6\u95f4\u5bf9\u8c61\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff0c\u6ce8\u610f\u8ddftime\u7684\u683c\u5f0f\u4e0d\u4e00\u6837\uff01 f1 = datetime.now() s1 = datetime.strftime(f,'%Y-%m-%d') print(s1,type(s1))#2018-zz-20 <class 'str'> ### \u505a\u8fd0\u7b97\u7684\u662f\u201c\u65f6\u95f4\u5bf9\u8c61\u201d print(datetime.now() - timedelta(hours=10)) #2019-03-20 05:26:16.183136 print(datetime.now() - timedelta(days=1)) #2019-03-19 15:26:16.183136 \u65e5\u671f\u683c\u5f0f\u5316 %y \u4e24\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a\uff0800-99\uff09 %Y \u56db\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a\uff08000-9999\uff09 %m \u6708\u4efd\uff0801-12\uff09 %d \u6708\u5185\u4e2d\u7684\u4e00\u5929\uff080-31\uff09 %H 24\u5c0f\u65f6\u5236\u5c0f\u65f6\u6570\uff080-23\uff09 %I 12\u5c0f\u65f6\u5236\u5c0f\u65f6\u6570\uff0801-12\uff09 %M \u5206\u949f\u6570\uff0800=59\uff09 %S \u79d2\uff0800-59\uff09 %a \u672c\u5730\u7b80\u5316\u661f\u671f\u540d\u79f0 %A \u672c\u5730\u5b8c\u6574\u661f\u671f\u540d\u79f0 %b \u672c\u5730\u7b80\u5316\u7684\u6708\u4efd\u540d\u79f0 %B \u672c\u5730\u5b8c\u6574\u7684\u6708\u4efd\u540d\u79f0 %c \u672c\u5730\u76f8\u5e94\u7684\u65e5\u671f\u8868\u793a\u548c\u65f6\u95f4\u8868\u793a %j \u5e74\u5185\u7684\u4e00\u5929\uff08001-366\uff09 %p \u672c\u5730A.M.\u6216P.M.\u7684\u7b49\u4ef7\u7b26 %U \u4e00\u5e74\u4e2d\u7684\u661f\u671f\u6570\uff0800-53\uff09\u661f\u671f\u5929\u4e3a\u661f\u671f\u7684\u5f00\u59cb %w \u661f\u671f\uff080-6\uff09\uff0c\u661f\u671f\u5929\u4e3a\u661f\u671f\u7684\u5f00\u59cb %W \u4e00\u5e74\u4e2d\u7684\u661f\u671f\u6570\uff0800-53\uff09\u661f\u671f\u4e00\u4e3a\u661f\u671f\u7684\u5f00\u59cb %x \u672c\u5730\u76f8\u5e94\u7684\u65e5\u671f\u8868\u793a %X \u672c\u5730\u76f8\u5e94\u7684\u65f6\u95f4\u8868\u793a %Z \u5f53\u524d\u65f6\u533a\u7684\u540d\u79f0 %% %\u53f7\u672c\u8eab \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u7684\u683c\u5f0f\u5316\u7684\u6708\u4efd\u548c\u6708\u4efd\u4e2d\u7684\u5929\u6570\uff0c\u9ed8\u8ba4\u662f 2 \u4f4d\u6570\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5c0f\u4e8e 10 \uff0c\u5c31\u4f1a\u663e\u793a\u524d\u7f000\uff0c\u5982 02\u670809\u65e5 \u3002 \u65f6\u95f4\u8fd0\u7b97\u76f8\u5173 import datetime # \u6307\u5b9a\u65f6\u95f4 print(datetime.datetime(2017,10,1,12,54,11,871281)) # 2017-10-01 12:54:11.871281 now = datetime.datetime.now() print(now) # 2020-03-16 20:55:10.457931 # \u52a05\u5929 day5 = now + datetime.timedelta(days=5) print(day5) # 2020-03-21 20:55:10.457931 # \u65f6\u95f4\u66ff\u6362 f = now.replace(year=2222,month=3,day=5) print(f) # 2222-03-05 20:57:28.324392 datetime\u65e5\u671f\u7c7b\u578b\u6bd4\u8f83 from datetime import datetime # \u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b NOW_STR = datetime.strftime(datetime.now(),\"%Y-%m-%d %X\") user_exp_time = \"2020-03-14 00:00:00\" # \u8f6c\u6362\u4e3adatetime\u7c7b\u578b\u518d\u6bd4\u8f83 date_now = datetime.strptime(NOW_STR,\"%Y-%m-%d %X\") date_user = datetime.strptime(user_exp_time,\"%Y-%m-%d %X\") print(date_now,type(date_now)) print(date_user,type(date_user)) \"\"\" 2020-04-09 10:07:50 <class 'datetime.datetime'> 2020-03-14 00:00:00 <class 'datetime.datetime'> \"\"\" print(date_now > date_user) # True date.today from datetime import date today = date.today() print(today,type(today)) # 2019-02-22 <class 'datetime.date'> today_str = today.strftime(\"%Y-%m-%d\") print(today_str,type(today_str)) # 2019-02-22 <class 'str'> \u4f7f\u7528map\u5b9e\u73b0\u4e0edatetime\u6a21\u5757\u5b9e\u73b0\u65e5\u671f\u9012\u63a8 from datetime import datetime,timedelta # date_end_time\u5bf9\u5e94\u7684\u662fy_lst\u6700\u540e\u4e00\u4e2a\u6570\u5bf9\u5e94\u7684\u65e5\u671f # \u9700\u8981\u5f97\u5230\u4e00\u4e2a\u65e5\u671f\u5217\u8868date_lst\u4e2d\u7684\u6bcf\u4e2a\u65e5\u671f\u503c\u4e0ey_lst\u4e2d\u5bf9\u5e94\u4e0a date_end_time = \"2020-05-03\" y_lst = [1,2,43,44,55,66] date_lst = list(map(lambda x:datetime.strftime(datetime.strptime(date_end_time,\"%Y-%m-%d\")-timedelta(days=x),\"%Y-%m-%d\"),range(len(y_lst)-1,-1,-1))) print(date_lst) # ['2020-04-28', '2020-04-29', '2020-04-30', '2020-05-01', '2020-05-02', '2020-05-03'] \u535a\u5ba2\u7b14\u8bb0 \u5206\u5272\u5904\u7406\u5b58\u653e\u8fde\u7eed\u65f6\u95f4\u5b57\u7b26\u4e32\u7684\u5217\u8868 datetime\u6a21\u5757\u683c\u5f0f\u5316\u4ee5\u53ca\u53bb\u6389\u524d\u5bfc0\u7684\u64cd\u4f5c\u8bf4\u660e pymysql\u5f80\u6570\u636e\u5e93\u4e2d\u63d2\u5165datetime\u7c7b\u578b\u7684\"\u7a7a\u6570\u636e\"\u4e0eMySQL5.7sql_mode\u7684\u4e00\u4e2a\u95ee\u9898","title":"11 datetime\u4e0edateutil\u6a21\u5757"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/#_1","text":"datetime\u6a21\u5757\u4f1a\u6709\u8d1f\u6570 from datetime import datetime day1 = datetime(2019,2,3) day2 = datetime(2022,12,30) # \u65f6\u95f4\u5dee \u2014\u2014 \u5fc5\u987b\u90fd\u662fdatetime\u683c\u5f0f\u7684\u6570\u636e \u2014\u2014 \u4f1a\u6709\u8d1f\u6570 print((day1 - day2).days) # -1426 dateutil\u6a21\u5757\u5982\u679cend\u7684\u65e5\u671f\u5c0f\u4e8estart\u7684\u65e5\u671f\u4f1a\u8fd4\u56de0 from datetime import datetime # day1 = datetime(2019,2,3) # day2 = datetime(2022,12,30) # \u65f6\u95f4\u5dee \u2014\u2014 \u5fc5\u987b\u90fd\u662fdatetime\u683c\u5f0f\u7684\u6570\u636e # print((day1 - day2).days) # -1426 from dateutil import rrule day1_str = \"2020-1-03\" day2_str = \"2020-05-05\" day3_str = \"2019-05-05\" ### \u6b63\u5e38\u60c5\u51b5\uff1a\u7ed3\u675f\u65e5\u671f\u5c0f\ud83c\udf27\u4e8e\u5f00\u59cb\u65e5\u671f start_time = datetime.strptime(day1_str,\"%Y-%m-%d\") end_time = datetime.strptime(day2_str,\"%Y-%m-%d\") days_format = rrule.rrule(freq=rrule.DAILY,dtstart=start_time,until=end_time) print(days_format) \"\"\" DTSTART:20200103T000000 RRULE:FREQ=DAILY;UNTIL=20200505T000000 \"\"\" print(days_format.count()) # 124 ### \u5982\u679c\u7ed3\u675f\u65e5\u671f\u5927\u96e8\u5f00\u59cb\u65e5\u671f\u4f1a\u8fd4\u56de0 d3_end = datetime.strptime(day3_str,\"%Y-%m-%d\") days_format2 = rrule.rrule(freq=rrule.DAILY,dtstart=start_time,until=d3_end) print(days_format2.count()) # 0","title":"\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u95f4\u9694\u7684\u5929\u6570"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/#datetime","text":"from datetime import datetime,timedelta # \u62ff\u5230\u7684\u662f\"\u65f6\u95f4\u5bf9\u8c61\" print(datetime.now())#2019-03-20 15:23:32.883745 # \u5c06\u65f6\u95f4\u5bf9\u8c61\u8f6c\u6362\u4e3a\u65f6\u95f4\u6233 \u540e\u9762.\u662f\u6beb\u79d2 f = datetime.now() s = datetime.timestamp(f) print(s)#1553066612.883745 # \u5c06\u65f6\u95f4\u6233\u8f6c\u4e3a\u65f6\u95f4\u5bf9\u8c61 print(datetime.fromtimestamp(s))#2019-03-20 15:23:32.883745 # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u65f6\u95f4\u5bf9\u8c61 s = '2018-zz-20' f = datetime.strptime(s,'%Y-%m-%d') print(f,type(f))#2018-zz-20 00:00:00 <class 'datetime.datetime'> # \u5c06\u65f6\u95f4\u5bf9\u8c61\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff0c\u6ce8\u610f\u8ddftime\u7684\u683c\u5f0f\u4e0d\u4e00\u6837\uff01 f1 = datetime.now() s1 = datetime.strftime(f,'%Y-%m-%d') print(s1,type(s1))#2018-zz-20 <class 'str'> ### \u505a\u8fd0\u7b97\u7684\u662f\u201c\u65f6\u95f4\u5bf9\u8c61\u201d print(datetime.now() - timedelta(hours=10)) #2019-03-20 05:26:16.183136 print(datetime.now() - timedelta(days=1)) #2019-03-19 15:26:16.183136","title":"datetime\u4f7f\u7528\u7b14\u8bb0"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/#_2","text":"%y \u4e24\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a\uff0800-99\uff09 %Y \u56db\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a\uff08000-9999\uff09 %m \u6708\u4efd\uff0801-12\uff09 %d \u6708\u5185\u4e2d\u7684\u4e00\u5929\uff080-31\uff09 %H 24\u5c0f\u65f6\u5236\u5c0f\u65f6\u6570\uff080-23\uff09 %I 12\u5c0f\u65f6\u5236\u5c0f\u65f6\u6570\uff0801-12\uff09 %M \u5206\u949f\u6570\uff0800=59\uff09 %S \u79d2\uff0800-59\uff09 %a \u672c\u5730\u7b80\u5316\u661f\u671f\u540d\u79f0 %A \u672c\u5730\u5b8c\u6574\u661f\u671f\u540d\u79f0 %b \u672c\u5730\u7b80\u5316\u7684\u6708\u4efd\u540d\u79f0 %B \u672c\u5730\u5b8c\u6574\u7684\u6708\u4efd\u540d\u79f0 %c \u672c\u5730\u76f8\u5e94\u7684\u65e5\u671f\u8868\u793a\u548c\u65f6\u95f4\u8868\u793a %j \u5e74\u5185\u7684\u4e00\u5929\uff08001-366\uff09 %p \u672c\u5730A.M.\u6216P.M.\u7684\u7b49\u4ef7\u7b26 %U \u4e00\u5e74\u4e2d\u7684\u661f\u671f\u6570\uff0800-53\uff09\u661f\u671f\u5929\u4e3a\u661f\u671f\u7684\u5f00\u59cb %w \u661f\u671f\uff080-6\uff09\uff0c\u661f\u671f\u5929\u4e3a\u661f\u671f\u7684\u5f00\u59cb %W \u4e00\u5e74\u4e2d\u7684\u661f\u671f\u6570\uff0800-53\uff09\u661f\u671f\u4e00\u4e3a\u661f\u671f\u7684\u5f00\u59cb %x \u672c\u5730\u76f8\u5e94\u7684\u65e5\u671f\u8868\u793a %X \u672c\u5730\u76f8\u5e94\u7684\u65f6\u95f4\u8868\u793a %Z \u5f53\u524d\u65f6\u533a\u7684\u540d\u79f0 %% %\u53f7\u672c\u8eab \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u7684\u683c\u5f0f\u5316\u7684\u6708\u4efd\u548c\u6708\u4efd\u4e2d\u7684\u5929\u6570\uff0c\u9ed8\u8ba4\u662f 2 \u4f4d\u6570\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5c0f\u4e8e 10 \uff0c\u5c31\u4f1a\u663e\u793a\u524d\u7f000\uff0c\u5982 02\u670809\u65e5 \u3002","title":"\u65e5\u671f\u683c\u5f0f\u5316"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/#_3","text":"import datetime # \u6307\u5b9a\u65f6\u95f4 print(datetime.datetime(2017,10,1,12,54,11,871281)) # 2017-10-01 12:54:11.871281 now = datetime.datetime.now() print(now) # 2020-03-16 20:55:10.457931 # \u52a05\u5929 day5 = now + datetime.timedelta(days=5) print(day5) # 2020-03-21 20:55:10.457931 # \u65f6\u95f4\u66ff\u6362 f = now.replace(year=2222,month=3,day=5) print(f) # 2222-03-05 20:57:28.324392","title":"\u65f6\u95f4\u8fd0\u7b97\u76f8\u5173"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/#datetime_1","text":"from datetime import datetime # \u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u7c7b\u578b NOW_STR = datetime.strftime(datetime.now(),\"%Y-%m-%d %X\") user_exp_time = \"2020-03-14 00:00:00\" # \u8f6c\u6362\u4e3adatetime\u7c7b\u578b\u518d\u6bd4\u8f83 date_now = datetime.strptime(NOW_STR,\"%Y-%m-%d %X\") date_user = datetime.strptime(user_exp_time,\"%Y-%m-%d %X\") print(date_now,type(date_now)) print(date_user,type(date_user)) \"\"\" 2020-04-09 10:07:50 <class 'datetime.datetime'> 2020-03-14 00:00:00 <class 'datetime.datetime'> \"\"\" print(date_now > date_user) # True","title":"datetime\u65e5\u671f\u7c7b\u578b\u6bd4\u8f83"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/#datetoday","text":"from datetime import date today = date.today() print(today,type(today)) # 2019-02-22 <class 'datetime.date'> today_str = today.strftime(\"%Y-%m-%d\") print(today_str,type(today_str)) # 2019-02-22 <class 'str'>","title":"date.today"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/#mapdatetime","text":"from datetime import datetime,timedelta # date_end_time\u5bf9\u5e94\u7684\u662fy_lst\u6700\u540e\u4e00\u4e2a\u6570\u5bf9\u5e94\u7684\u65e5\u671f # \u9700\u8981\u5f97\u5230\u4e00\u4e2a\u65e5\u671f\u5217\u8868date_lst\u4e2d\u7684\u6bcf\u4e2a\u65e5\u671f\u503c\u4e0ey_lst\u4e2d\u5bf9\u5e94\u4e0a date_end_time = \"2020-05-03\" y_lst = [1,2,43,44,55,66] date_lst = list(map(lambda x:datetime.strftime(datetime.strptime(date_end_time,\"%Y-%m-%d\")-timedelta(days=x),\"%Y-%m-%d\"),range(len(y_lst)-1,-1,-1))) print(date_lst) # ['2020-04-28', '2020-04-29', '2020-04-30', '2020-05-01', '2020-05-02', '2020-05-03']","title":"\u4f7f\u7528map\u5b9e\u73b0\u4e0edatetime\u6a21\u5757\u5b9e\u73b0\u65e5\u671f\u9012\u63a8"},{"location":"python\u57fa\u7840/datetime\u6a21\u5757/#_4","text":"\u5206\u5272\u5904\u7406\u5b58\u653e\u8fde\u7eed\u65f6\u95f4\u5b57\u7b26\u4e32\u7684\u5217\u8868 datetime\u6a21\u5757\u683c\u5f0f\u5316\u4ee5\u53ca\u53bb\u6389\u524d\u5bfc0\u7684\u64cd\u4f5c\u8bf4\u660e pymysql\u5f80\u6570\u636e\u5e93\u4e2d\u63d2\u5165datetime\u7c7b\u578b\u7684\"\u7a7a\u6570\u636e\"\u4e0eMySQL5.7sql_mode\u7684\u4e00\u4e2a\u95ee\u9898","title":"\u535a\u5ba2\u7b14\u8bb0"},{"location":"python\u57fa\u7840/dict/","text":"dict\u7684\u57fa\u672c\u64cd\u4f5c demo1 dic1 = {'name':'whw','age':22,'sex':'male'} dic2 = {'name':'whw'} ##\u6ce8\u610f\uff0c\u5b57\u5178\u65f6\u65e0\u5e8f\u7684\uff0c\u6ca1\u6709\u8981\u6c42\u5b57\u5178\u6392\u5e8f ''' \u7279\u522b\u6ce8\u610f\uff1a\u5b57\u5178\u6ca1\u6709remove\u65b9\u6cd5\uff01\uff01\u53ea\u6709\u5217\u8868\u6709remove\u65b9\u6cd5\uff01 ''' #\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u2014\u2014dict.fromkeys() dic3 = dict.fromkeys(['name1','name2','name3'],'whw1') print(dic3)#{'name1': 'whw1', 'name2': 'whw1', 'name3': 'whw1'} #\u589e #setdefault \u5728\u5b57\u5178\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9\uff0c\u5982\u679c\u53ea\u6709\u952e\u90a3\u5bf9\u5e94\u7684\u503c\u662fnone,\u4f46\u662f\u5982\u679c\u539f\u5b57\u5178\u4e2d\u5b58\u5728\u8bbe\u7f6e\u7684\u952e\u503c\u5bf9\uff0c\u5219\u4ed6\u4e0d\u4f1a\u66f4\u6539\u6216\u8005\u8986\u76d6 dic1.setdefault('k','v') print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'k': 'v'} dic1.setdefault('k','v1') print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'k': 'v'} ##\u6dfb\u52a0\u952e\u503c\u5bf9 dic1['n'] = 'm' print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'k': 'v', 'n': 'm'} #\u5220 ''' del dic2 print(dic2)#\u4f1a\u62a5\u9519\u2014\u2014NameError: name 'dic2' is not defined ''' # \u6e05\u7a7a\u5b57\u5178 print('dic1:',dic1)#dic1: {'name': 'whw', 'age': 22, 'sex': 'male', 'k': 'v', 'n': 'm'} dic2.clear() print(dic2) # {} #pop\u65b9\u6cd5\u2014\u2014pop(key,'\u65e0key\u8fd4\u56de\u7684\u503c')\u2014\u2014\u2014\u2014\u8fd4\u56de\u5220\u9664\u7684\u201c\u503c\u201d print(dic1.pop('k')) #v print(dic1.pop('w','\u6ca1\u6709\u8fd9\u4e2a\u952e')) #\u6ca1\u6709\u8fd9\u4e2a\u952e #popitem()\u65b9\u6cd5\u2014\u2014\u2014\u2014 ''' # 3.5\u4e4b\u524d\u968f\u673a\u5220\u9664\u5b57\u5178\u4e2d\u7684\u67d0\u4e2a\u952e\u503c\u5bf9\uff0c\u5e76\u5c06\u5220\u9664\u7684\u952e\u503c\u5bf9\u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de # 3.6\u4e4b\u540e\u5220\u9664\u7684\u662f\u6700\u540e\u7684\u952e\u503c\u5bf9 ''' print(dic1.popitem())#('n', 'm') print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male'} #\u6539 #update\u65b9\u6cd5\u2014\u2014\u5b57\u5178\u7684\u6269\u5c55 dic3 = {'a1':'b'} dic1.update(dic3) print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'a1': 'b'} #\u627e\u5230\u5bf9\u5e94\u7684\u952e\u76f4\u63a5\u6539 dic3['a1'] = 123 print(dic3)#{'a1': 123} ###\u67e5 print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'a1': 'b'} print(dic1.get('name'))#whw print(dic1.get('whw','\u6ca1\u6709\u8fd9\u4e2akey'))#\u6ca1\u6709\u8fd9\u4e2akey #\u67e5\u51fa\u6240\u6709\u7684key d1 = dic1.keys() print(d1)#dict_keys(['name', 'age', 'sex', 'a1']) print(type(d1))#<class 'dict_keys'> print(list(d1))#['name', 'age', 'sex', 'a1'] #\u67e5\u51fa\u6240\u6709\u7684\u952e\u503c\u5bf9 d2 = dic1.items() print(d2)#dict_items([('name', 'whw'), ('age', 22), ('sex', 'male'), ('a1', 'b')]) #\u67e5\u51fa\u6240\u6709\u7684\u503c d3 = dic1.values() print(d3)#dict_values(['whw', 22, 'male', 'b']) ##\u5b57\u5178\u7684\u904d\u5386 #i\u662f\u5e8f\u53f7\uff0c\u9ed8\u8ba4\u662f0 #v\u662f\u5b57\u5178\u7684\u952e for i,v in enumerate(dic1,1): print(i,v,dic1[v]) #\u6216\u8005\u53ef\u4ee5\u8fd9\u6837\uff1a\u4f46\u662f\u6ca1\u6709\u6570\u5b57\u4e86 for k,v in dic1.items(): print(k,v) ##\u7ec3\u4e60 ###\u4e00\u884c\u64cd\u4f5c\u6539\u53d8dic11\u5b57\u5178\uff1a dic11 = {'k1':'v111','a1':'b'} dic111 = {'k1':'v1','k2':'v2','k3':'v3'} dic11.update(dic111) print(dic11)#{'k1': 'v1', 'a1': 'b', 'k2': 'v2', 'k3': 'v3'} print(dic11.update(dic111))#None demo2 ###python3.5(\u5305\u62ec3.5\u4e4b\u524d)\u5b57\u5178\u662f\u65e0\u5e8f\u7684 ###python3.6\u4e4b\u540e\u5b57\u5178\u662f\u6709\u5e8f\u7684 ### \u5b57\u5178\u7684\u4f18\u70b9\uff1a #\u5b57\u5178\u53ef\u5b58\u50a8\u5927\u91cf\u7684\u5173\u7cfb\u6570\u636e #\u5b57\u5178\u7684\u67e5\u8be2\u7684\u901f\u5ea6\u7279\u522b\u5feb # \u6ce8\u610f\uff0c\u5982\u679c\u5b57\u5178\u7684\u4e24\u4e2a\u952e\u4e00\u6837\u4e86\uff0c\u53d6\u540e\u9762\u7684!!! dicc = { 'name':'wxx', 'name':'wanghw', 'age':22 } print(dicc) #{'name': 'wanghw', 'age': 22} dic1 = {'name':'wanghw','age':22,'sex':'male'} dic2 = {'name':'whw'} # \u589e ##\u6dfb\u52a0\u952e\u503c\u5bf9 dic2['age'] = 18 print(dic2) ##setdefault \u5728\u5b57\u5178\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9\uff0c\u5982\u679c\u53ea\u6709\u952e\u90a3\u5bf9\u5e94\u7684\u503c\u662fnone,\u4f46\u662f\u5982\u679c\u539f\u5b57\u5178\u4e2d\u5b58\u5728\u8bbe\u7f6e\u7684\u952e\u503c\u5bf9\uff0c\u5219\u4ed6\u4e0d\u4f1a\u66f4\u6539\u6216\u8005\u8986\u76d6 dic2.setdefault('k','v') print(dic2)#{'name': 'whw', 'age': 18, 'k': 'v'} # \u5982\u679c\u539f\u5b57\u5178\u4e2d\u5b58\u5728\u8bbe\u7f6e\u7684\u952e\u503c\u5bf9\uff0c\u5219\u4ed6\u4e0d\u4f1a\u66f4\u6539\u6216\u8005\u8986\u76d6 dic2.setdefault('k',123) print(dic2)#{'name': 'whw', 'age': 18, 'k': 'v'} # \u5220 ## del ## clear ##pop\u2014\u2014pop(key,'\u65e0key\u8fd4\u56de\u7684\u503c')\u2014\u2014\u2014\u2014\u8fd4\u56de\u5220\u9664\u7684\u201c\u503c\u201d print(dic2.pop('k')) print(dic2.pop('w','\u6ca1\u6709\u8fd9\u4e2a\u952e')) ##popitem\u2014\u2014\u968f\u673a\u5220\u9664\u5b57\u5178\u4e2d\u7684\u67d0\u4e2a\u952e\u503c\u5bf9\uff0c\u5e76\u5c06\u5220\u9664\u7684\u952e\u503c\u5bf9\u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de print(dic3.popitem()) print(dic3) # \u6539 ##\u6269\u5c55\u2014\u2014update\u2014\u2014\u2014\u2014\u5b58\u5728\u7684\u952e\u503c\u5bf9\u201c\u8986\u76d6\u201d\u3001\u4e0d\u5b58\u5728\u7684\u952e\u503c\u5bf9\u6dfb\u52a0\u5230\u6700\u540e dic3 = {'a1':'b'} dic1.update(dic3) print(dic1) ''' \u6ce8\u610f\u5982\u679cupdate\u7684\u5b57\u5178\u6709\u5171\u540c\u7684\u952e\uff0c\u5219\"\u66f4\u65b0\"\u4e86\uff1a dict1 = {'k1':'v111','a1':'b'} dict2 = {'k1':'v1','k2':'v2','k3':'v3'} dict1.update(dict2) print(dict1)#{'k1': 'v1', 'a1': 'b', 'k2': 'v2', 'k3': 'v3'} ''' ## \u627e\u5230\u5bf9\u5e94\u7684\u503c\u76f4\u63a5\u6539 dic1['a1'] = 'A' print(dic1) # \u67e5 ##\u76f4\u63a5\u6307\u5b9a\u952e\u2014\u2014\u4e0d\u597d\uff0c\u6ca1\u6709\u4f1a\u62a5\u9519 print(dic1['name']) # print(dic1['name1'])#\u6ca1\u6709\u7684\u8bdd\u4f1a\u62a5\u9519 ##get\u65b9\u6cd5 print(dic1.get('name')) print(dic1.get('name1','\u6ca1\u6709\u8fd9\u4e2a\u952e'))#\u6ca1\u6709\u7684\u8bdd\u4e0d\u4f1a\u62a5\u9519\uff0c\u9ed8\u8ba4\u8fd4\u56deNone ##\u67e5\u51fa\u6240\u6709\u7684key print(dic1.keys()) print(type(dic1.keys()))#<class 'dict_keys'> ###\u53ef\u4ee5\u8f6c\u5316\u6210\u5217\u8868 print(list(dic1.keys()))#['name', 'age', 'sex', 'a1'] ##\u67e5\u51fa\u6240\u6709\u952e\u503c\u5bf9\u2014\u2014\u5143\u7ec4\u5f62\u5f0f\u8fd4\u56de print(dic1.items())#dict_items([('name', 'wanghw'), ('age', 22), ('sex', 'male'), ('a1', 'A')]) ## \u67e5\u51fa\u6240\u6709\u503c print(dic1.values())#dict_values(['wanghw', 22, 'male', 'A']) ## \u5b57\u5178\u7684\u904d\u5386\u2014\u2014enumerate\uff1ai\u9ed8\u8ba4\u4ece0\u5f00\u59cb\uff0cv\u662f\u5b57\u5178\u7684\u952e for i,v in enumerate(dic1): print(i,v,dic1[v]) ''' 0 name wanghw 1 age 22 2 sex male 3 a1 A ''' # \u6216\u8005\u53ef\u4ee5\u8fd9\u6837\uff1a for i,v in enumerate(dic1.items()): print(i,v) ''' 0 ('name', 'wanghw') 1 ('age', 22) 2 ('sex', 'male') 3 ('a1', 'A') ''' # \u8fd8\u53ef\u4ee5\u8fd9\u6837\uff1a for k,v in dic1.items(): print(k,v) ''' name wanghw age 22 sex male a1 A ''' ###\u7ec3\u4e60 ###\u4e00\u884c\u64cd\u4f5c\u6539\u53d8dic11\u5b57\u5178\uff1a dict1 = {'k1':'v111','a1':'b'} dict2 = {'k1':'v1','k2':'v2','k3':'v3'} dict1.update(dict2) print(dict1)#{'k1': 'v1', 'a1': 'b', 'k2': 'v2', 'k3': 'v3'} # dict2.update(dict1) # print(dict2) setdefault\u7684\u4e00\u4e2a\u4f7f\u7528\u6848\u4f8b '''# \u6709\u5b57\u7b26\u4e32\"k: 1|k1 :2|k2:3 |k3 :4\" \u5904\u7406\u6210\u5b57\u5178 {'k':1,'k1':2....}''' str1 ='k: 1|k1 :2|k2:3 |k3 :4' list1 = str1.split('|') dic = {} #\u6ce8\u610f\u6709\u7a7a\u683c print(list1)#['k: 1', 'k1 :2', 'k2:3 ', 'k3 :4'] for i in list1: #\u518d\u6b21\u5c06\u91cc\u9762\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6309\u7167\u5192\u53f7\u5206\u5272\u6210\u952e\u4e0e\u503c list2 = i.split(':') #\u6ce8\u610f\u5148\u6d88\u9664\u4e00\u4e0b\u7a7a\u683c dic.setdefault(list2[0].strip(),int(list2[1].strip())) print(dic)#{'k': 1, 'k1': 2, 'k2': 3, 'k3': 4} \u5b57\u5178\u751f\u6210\u5f0f \u5de7\u7528\u5b57\u5178\u7684\u751f\u6210\u5f0f\u53ef\u4ee5\u63d0\u5347\u4ee3\u7801\u7684\u6267\u884c\u6548\u7387\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a name_dic = {\"001\":\"whw\",\"002\":\"sasuke\",\"003\":\"naruto\"} hobby_dic = {\"001\":\"coding\",\"002\":\"\u5343\u9e1f\u6d41\",\"003\":\"\u87ba\u65cb\u4e38\"} # \u5b57\u5178\u751f\u6210\u5f0f dic = {name_dic[key]:value for key,value in hobby_dic.items()} print(dic) \"\"\" {'whw': 'coding', 'sasuke': '\u5343\u9e1f\u6d41', 'naruto': '\u87ba\u65cb\u4e38'} \"\"\" \u4f7f\u7528\u5b57\u5178\u6620\u5c04\u4ee3\u66ffif-else\u5206\u652f Python\u7684\u5b57\u5178\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd \u6620\u5c04\u5173\u7cfb \uff0c\u5728\u5b9e\u9645\u4e2d\u7528\u597d\u4e86\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\u53ef\u4ee5\u5927\u5927\u7684\u63d0\u5347\u6211\u4eec\u4ee3\u7801\u7684\u6c34\u5e73\u3002 def whw(): print(\"whw...\") def naruto(): print(\"naruto...\") def sasuke(): print(\"sasuke...\") func_dic = { \"key1\":whw, \"key2\":naruto, \"key3\":sasuke, } # \u5982\u679c\u6709\u53c2\u6570\u7684\u8bdd\u9700\u8981\u5bf9\u5e94\u51fd\u6570\u7684\u53c2\u6570\u6570\u91cf\u4fdd\u6301\u4e00\u81f4 for key in func_dic: func_dic[key]() \u5220\u9664\u5b57\u5178\u4e2d\u7684\u6570\u636e\u7684\u65b9\u6cd5 \u4e00\u822c\u60c5\u51b5\u4e0b\u5b57\u5178\u4e0d\u652f\u6301\u5728\u904d\u5386\u7684\u65f6\u5019\u76f4\u63a5\u5220\u9664\u5b57\u5178\u4e2d\u7684\u5143\u7d20\u7684\uff0c\u5220\u9664\u5b57\u5178\u4e2d\u5143\u7d20\u7684\u6b63\u786e\u65b9\u6cd5\u5982\u4e0b\uff1a dic1 = {\"whw\":[18,12,22],\"naruto\":[0,0,0],\"sasuke\":[22,22,12],\"sakurua\":[0,1,2],\"wanghw\":[0,0,0]} for key in list(dic1.keys()): # \u5220\u9664\u5168\u662f0\u7684 if sum(dic1[key]) == 0: del dic1[key] print(dic1) # {'whw': [18, 12, 22], 'sasuke': [22, 22, 12], 'sakurua': [0, 1, 2]} \u5b57\u5178\u7684\u6253\u6563\u4f20\u53c2 \u6d45\u8c08Python\u4e2d\u5b57\u5178\u7684\u6253\u6563\u4f20\u53c2","title":"02 \u5b57\u5178dict"},{"location":"python\u57fa\u7840/dict/#dict","text":"demo1 dic1 = {'name':'whw','age':22,'sex':'male'} dic2 = {'name':'whw'} ##\u6ce8\u610f\uff0c\u5b57\u5178\u65f6\u65e0\u5e8f\u7684\uff0c\u6ca1\u6709\u8981\u6c42\u5b57\u5178\u6392\u5e8f ''' \u7279\u522b\u6ce8\u610f\uff1a\u5b57\u5178\u6ca1\u6709remove\u65b9\u6cd5\uff01\uff01\u53ea\u6709\u5217\u8868\u6709remove\u65b9\u6cd5\uff01 ''' #\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\u2014\u2014dict.fromkeys() dic3 = dict.fromkeys(['name1','name2','name3'],'whw1') print(dic3)#{'name1': 'whw1', 'name2': 'whw1', 'name3': 'whw1'} #\u589e #setdefault \u5728\u5b57\u5178\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9\uff0c\u5982\u679c\u53ea\u6709\u952e\u90a3\u5bf9\u5e94\u7684\u503c\u662fnone,\u4f46\u662f\u5982\u679c\u539f\u5b57\u5178\u4e2d\u5b58\u5728\u8bbe\u7f6e\u7684\u952e\u503c\u5bf9\uff0c\u5219\u4ed6\u4e0d\u4f1a\u66f4\u6539\u6216\u8005\u8986\u76d6 dic1.setdefault('k','v') print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'k': 'v'} dic1.setdefault('k','v1') print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'k': 'v'} ##\u6dfb\u52a0\u952e\u503c\u5bf9 dic1['n'] = 'm' print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'k': 'v', 'n': 'm'} #\u5220 ''' del dic2 print(dic2)#\u4f1a\u62a5\u9519\u2014\u2014NameError: name 'dic2' is not defined ''' # \u6e05\u7a7a\u5b57\u5178 print('dic1:',dic1)#dic1: {'name': 'whw', 'age': 22, 'sex': 'male', 'k': 'v', 'n': 'm'} dic2.clear() print(dic2) # {} #pop\u65b9\u6cd5\u2014\u2014pop(key,'\u65e0key\u8fd4\u56de\u7684\u503c')\u2014\u2014\u2014\u2014\u8fd4\u56de\u5220\u9664\u7684\u201c\u503c\u201d print(dic1.pop('k')) #v print(dic1.pop('w','\u6ca1\u6709\u8fd9\u4e2a\u952e')) #\u6ca1\u6709\u8fd9\u4e2a\u952e #popitem()\u65b9\u6cd5\u2014\u2014\u2014\u2014 ''' # 3.5\u4e4b\u524d\u968f\u673a\u5220\u9664\u5b57\u5178\u4e2d\u7684\u67d0\u4e2a\u952e\u503c\u5bf9\uff0c\u5e76\u5c06\u5220\u9664\u7684\u952e\u503c\u5bf9\u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de # 3.6\u4e4b\u540e\u5220\u9664\u7684\u662f\u6700\u540e\u7684\u952e\u503c\u5bf9 ''' print(dic1.popitem())#('n', 'm') print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male'} #\u6539 #update\u65b9\u6cd5\u2014\u2014\u5b57\u5178\u7684\u6269\u5c55 dic3 = {'a1':'b'} dic1.update(dic3) print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'a1': 'b'} #\u627e\u5230\u5bf9\u5e94\u7684\u952e\u76f4\u63a5\u6539 dic3['a1'] = 123 print(dic3)#{'a1': 123} ###\u67e5 print(dic1)#{'name': 'whw', 'age': 22, 'sex': 'male', 'a1': 'b'} print(dic1.get('name'))#whw print(dic1.get('whw','\u6ca1\u6709\u8fd9\u4e2akey'))#\u6ca1\u6709\u8fd9\u4e2akey #\u67e5\u51fa\u6240\u6709\u7684key d1 = dic1.keys() print(d1)#dict_keys(['name', 'age', 'sex', 'a1']) print(type(d1))#<class 'dict_keys'> print(list(d1))#['name', 'age', 'sex', 'a1'] #\u67e5\u51fa\u6240\u6709\u7684\u952e\u503c\u5bf9 d2 = dic1.items() print(d2)#dict_items([('name', 'whw'), ('age', 22), ('sex', 'male'), ('a1', 'b')]) #\u67e5\u51fa\u6240\u6709\u7684\u503c d3 = dic1.values() print(d3)#dict_values(['whw', 22, 'male', 'b']) ##\u5b57\u5178\u7684\u904d\u5386 #i\u662f\u5e8f\u53f7\uff0c\u9ed8\u8ba4\u662f0 #v\u662f\u5b57\u5178\u7684\u952e for i,v in enumerate(dic1,1): print(i,v,dic1[v]) #\u6216\u8005\u53ef\u4ee5\u8fd9\u6837\uff1a\u4f46\u662f\u6ca1\u6709\u6570\u5b57\u4e86 for k,v in dic1.items(): print(k,v) ##\u7ec3\u4e60 ###\u4e00\u884c\u64cd\u4f5c\u6539\u53d8dic11\u5b57\u5178\uff1a dic11 = {'k1':'v111','a1':'b'} dic111 = {'k1':'v1','k2':'v2','k3':'v3'} dic11.update(dic111) print(dic11)#{'k1': 'v1', 'a1': 'b', 'k2': 'v2', 'k3': 'v3'} print(dic11.update(dic111))#None demo2 ###python3.5(\u5305\u62ec3.5\u4e4b\u524d)\u5b57\u5178\u662f\u65e0\u5e8f\u7684 ###python3.6\u4e4b\u540e\u5b57\u5178\u662f\u6709\u5e8f\u7684 ### \u5b57\u5178\u7684\u4f18\u70b9\uff1a #\u5b57\u5178\u53ef\u5b58\u50a8\u5927\u91cf\u7684\u5173\u7cfb\u6570\u636e #\u5b57\u5178\u7684\u67e5\u8be2\u7684\u901f\u5ea6\u7279\u522b\u5feb # \u6ce8\u610f\uff0c\u5982\u679c\u5b57\u5178\u7684\u4e24\u4e2a\u952e\u4e00\u6837\u4e86\uff0c\u53d6\u540e\u9762\u7684!!! dicc = { 'name':'wxx', 'name':'wanghw', 'age':22 } print(dicc) #{'name': 'wanghw', 'age': 22} dic1 = {'name':'wanghw','age':22,'sex':'male'} dic2 = {'name':'whw'} # \u589e ##\u6dfb\u52a0\u952e\u503c\u5bf9 dic2['age'] = 18 print(dic2) ##setdefault \u5728\u5b57\u5178\u4e2d\u6dfb\u52a0\u952e\u503c\u5bf9\uff0c\u5982\u679c\u53ea\u6709\u952e\u90a3\u5bf9\u5e94\u7684\u503c\u662fnone,\u4f46\u662f\u5982\u679c\u539f\u5b57\u5178\u4e2d\u5b58\u5728\u8bbe\u7f6e\u7684\u952e\u503c\u5bf9\uff0c\u5219\u4ed6\u4e0d\u4f1a\u66f4\u6539\u6216\u8005\u8986\u76d6 dic2.setdefault('k','v') print(dic2)#{'name': 'whw', 'age': 18, 'k': 'v'} # \u5982\u679c\u539f\u5b57\u5178\u4e2d\u5b58\u5728\u8bbe\u7f6e\u7684\u952e\u503c\u5bf9\uff0c\u5219\u4ed6\u4e0d\u4f1a\u66f4\u6539\u6216\u8005\u8986\u76d6 dic2.setdefault('k',123) print(dic2)#{'name': 'whw', 'age': 18, 'k': 'v'} # \u5220 ## del ## clear ##pop\u2014\u2014pop(key,'\u65e0key\u8fd4\u56de\u7684\u503c')\u2014\u2014\u2014\u2014\u8fd4\u56de\u5220\u9664\u7684\u201c\u503c\u201d print(dic2.pop('k')) print(dic2.pop('w','\u6ca1\u6709\u8fd9\u4e2a\u952e')) ##popitem\u2014\u2014\u968f\u673a\u5220\u9664\u5b57\u5178\u4e2d\u7684\u67d0\u4e2a\u952e\u503c\u5bf9\uff0c\u5e76\u5c06\u5220\u9664\u7684\u952e\u503c\u5bf9\u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de print(dic3.popitem()) print(dic3) # \u6539 ##\u6269\u5c55\u2014\u2014update\u2014\u2014\u2014\u2014\u5b58\u5728\u7684\u952e\u503c\u5bf9\u201c\u8986\u76d6\u201d\u3001\u4e0d\u5b58\u5728\u7684\u952e\u503c\u5bf9\u6dfb\u52a0\u5230\u6700\u540e dic3 = {'a1':'b'} dic1.update(dic3) print(dic1) ''' \u6ce8\u610f\u5982\u679cupdate\u7684\u5b57\u5178\u6709\u5171\u540c\u7684\u952e\uff0c\u5219\"\u66f4\u65b0\"\u4e86\uff1a dict1 = {'k1':'v111','a1':'b'} dict2 = {'k1':'v1','k2':'v2','k3':'v3'} dict1.update(dict2) print(dict1)#{'k1': 'v1', 'a1': 'b', 'k2': 'v2', 'k3': 'v3'} ''' ## \u627e\u5230\u5bf9\u5e94\u7684\u503c\u76f4\u63a5\u6539 dic1['a1'] = 'A' print(dic1) # \u67e5 ##\u76f4\u63a5\u6307\u5b9a\u952e\u2014\u2014\u4e0d\u597d\uff0c\u6ca1\u6709\u4f1a\u62a5\u9519 print(dic1['name']) # print(dic1['name1'])#\u6ca1\u6709\u7684\u8bdd\u4f1a\u62a5\u9519 ##get\u65b9\u6cd5 print(dic1.get('name')) print(dic1.get('name1','\u6ca1\u6709\u8fd9\u4e2a\u952e'))#\u6ca1\u6709\u7684\u8bdd\u4e0d\u4f1a\u62a5\u9519\uff0c\u9ed8\u8ba4\u8fd4\u56deNone ##\u67e5\u51fa\u6240\u6709\u7684key print(dic1.keys()) print(type(dic1.keys()))#<class 'dict_keys'> ###\u53ef\u4ee5\u8f6c\u5316\u6210\u5217\u8868 print(list(dic1.keys()))#['name', 'age', 'sex', 'a1'] ##\u67e5\u51fa\u6240\u6709\u952e\u503c\u5bf9\u2014\u2014\u5143\u7ec4\u5f62\u5f0f\u8fd4\u56de print(dic1.items())#dict_items([('name', 'wanghw'), ('age', 22), ('sex', 'male'), ('a1', 'A')]) ## \u67e5\u51fa\u6240\u6709\u503c print(dic1.values())#dict_values(['wanghw', 22, 'male', 'A']) ## \u5b57\u5178\u7684\u904d\u5386\u2014\u2014enumerate\uff1ai\u9ed8\u8ba4\u4ece0\u5f00\u59cb\uff0cv\u662f\u5b57\u5178\u7684\u952e for i,v in enumerate(dic1): print(i,v,dic1[v]) ''' 0 name wanghw 1 age 22 2 sex male 3 a1 A ''' # \u6216\u8005\u53ef\u4ee5\u8fd9\u6837\uff1a for i,v in enumerate(dic1.items()): print(i,v) ''' 0 ('name', 'wanghw') 1 ('age', 22) 2 ('sex', 'male') 3 ('a1', 'A') ''' # \u8fd8\u53ef\u4ee5\u8fd9\u6837\uff1a for k,v in dic1.items(): print(k,v) ''' name wanghw age 22 sex male a1 A ''' ###\u7ec3\u4e60 ###\u4e00\u884c\u64cd\u4f5c\u6539\u53d8dic11\u5b57\u5178\uff1a dict1 = {'k1':'v111','a1':'b'} dict2 = {'k1':'v1','k2':'v2','k3':'v3'} dict1.update(dict2) print(dict1)#{'k1': 'v1', 'a1': 'b', 'k2': 'v2', 'k3': 'v3'} # dict2.update(dict1) # print(dict2)","title":"dict\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"python\u57fa\u7840/dict/#setdefault","text":"'''# \u6709\u5b57\u7b26\u4e32\"k: 1|k1 :2|k2:3 |k3 :4\" \u5904\u7406\u6210\u5b57\u5178 {'k':1,'k1':2....}''' str1 ='k: 1|k1 :2|k2:3 |k3 :4' list1 = str1.split('|') dic = {} #\u6ce8\u610f\u6709\u7a7a\u683c print(list1)#['k: 1', 'k1 :2', 'k2:3 ', 'k3 :4'] for i in list1: #\u518d\u6b21\u5c06\u91cc\u9762\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6309\u7167\u5192\u53f7\u5206\u5272\u6210\u952e\u4e0e\u503c list2 = i.split(':') #\u6ce8\u610f\u5148\u6d88\u9664\u4e00\u4e0b\u7a7a\u683c dic.setdefault(list2[0].strip(),int(list2[1].strip())) print(dic)#{'k': 1, 'k1': 2, 'k2': 3, 'k3': 4}","title":"setdefault\u7684\u4e00\u4e2a\u4f7f\u7528\u6848\u4f8b"},{"location":"python\u57fa\u7840/dict/#_1","text":"\u5de7\u7528\u5b57\u5178\u7684\u751f\u6210\u5f0f\u53ef\u4ee5\u63d0\u5347\u4ee3\u7801\u7684\u6267\u884c\u6548\u7387\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a name_dic = {\"001\":\"whw\",\"002\":\"sasuke\",\"003\":\"naruto\"} hobby_dic = {\"001\":\"coding\",\"002\":\"\u5343\u9e1f\u6d41\",\"003\":\"\u87ba\u65cb\u4e38\"} # \u5b57\u5178\u751f\u6210\u5f0f dic = {name_dic[key]:value for key,value in hobby_dic.items()} print(dic) \"\"\" {'whw': 'coding', 'sasuke': '\u5343\u9e1f\u6d41', 'naruto': '\u87ba\u65cb\u4e38'} \"\"\"","title":"\u5b57\u5178\u751f\u6210\u5f0f"},{"location":"python\u57fa\u7840/dict/#if-else","text":"Python\u7684\u5b57\u5178\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd \u6620\u5c04\u5173\u7cfb \uff0c\u5728\u5b9e\u9645\u4e2d\u7528\u597d\u4e86\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\u53ef\u4ee5\u5927\u5927\u7684\u63d0\u5347\u6211\u4eec\u4ee3\u7801\u7684\u6c34\u5e73\u3002 def whw(): print(\"whw...\") def naruto(): print(\"naruto...\") def sasuke(): print(\"sasuke...\") func_dic = { \"key1\":whw, \"key2\":naruto, \"key3\":sasuke, } # \u5982\u679c\u6709\u53c2\u6570\u7684\u8bdd\u9700\u8981\u5bf9\u5e94\u51fd\u6570\u7684\u53c2\u6570\u6570\u91cf\u4fdd\u6301\u4e00\u81f4 for key in func_dic: func_dic[key]()","title":"\u4f7f\u7528\u5b57\u5178\u6620\u5c04\u4ee3\u66ffif-else\u5206\u652f"},{"location":"python\u57fa\u7840/dict/#_2","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\u5b57\u5178\u4e0d\u652f\u6301\u5728\u904d\u5386\u7684\u65f6\u5019\u76f4\u63a5\u5220\u9664\u5b57\u5178\u4e2d\u7684\u5143\u7d20\u7684\uff0c\u5220\u9664\u5b57\u5178\u4e2d\u5143\u7d20\u7684\u6b63\u786e\u65b9\u6cd5\u5982\u4e0b\uff1a dic1 = {\"whw\":[18,12,22],\"naruto\":[0,0,0],\"sasuke\":[22,22,12],\"sakurua\":[0,1,2],\"wanghw\":[0,0,0]} for key in list(dic1.keys()): # \u5220\u9664\u5168\u662f0\u7684 if sum(dic1[key]) == 0: del dic1[key] print(dic1) # {'whw': [18, 12, 22], 'sasuke': [22, 22, 12], 'sakurua': [0, 1, 2]}","title":"\u5220\u9664\u5b57\u5178\u4e2d\u7684\u6570\u636e\u7684\u65b9\u6cd5"},{"location":"python\u57fa\u7840/dict/#_3","text":"\u6d45\u8c08Python\u4e2d\u5b57\u5178\u7684\u6253\u6563\u4f20\u53c2","title":"\u5b57\u5178\u7684\u6253\u6563\u4f20\u53c2"},{"location":"python\u57fa\u7840/hmac/","text":"socket\u901a\u4fe1\u4e2d\u6821\u9a8c\u5ba2\u6237\u7aef\u7684\u5408\u6cd5\u6027 hmac\u6a21\u5757 \u2014\u2014 \u63a8\u8350 # client from socket import * import hmac,os secret_key=b'linhaifeng bang bang bang' def conn_auth(conn): ''' \u9a8c\u8bc1\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u5668\u7684\u94fe\u63a5 :param conn: :return: ''' msg=conn.recv(32) h=hmac.new(secret_key,msg) digest=h.digest() conn.sendall(digest) def client_handler(ip_port,bufsize=1024): tcp_socket_client=socket(AF_INET,SOCK_STREAM) tcp_socket_client.connect(ip_port) conn_auth(tcp_socket_client) while True: data=input('>>: ').strip() if not data:continue if data == 'quit':break tcp_socket_client.sendall(data.encode('utf-8')) respone=tcp_socket_client.recv(bufsize) print(respone.decode('utf-8')) tcp_socket_client.close() if __name__ == '__main__': ip_port=('127.0.0.1',9999) bufsize=1024 client_handler(ip_port,bufsize) # server # -*- coding:utf-8 -*- from socket import * import hmac,os secret_key=b'linhaifeng bang bang bang' def conn_auth(conn): ''' \u8ba4\u8bc1\u5ba2\u6237\u7aef\u94fe\u63a5 :param conn: :return: ''' print('\u5f00\u59cb\u9a8c\u8bc1\u65b0\u94fe\u63a5\u7684\u5408\u6cd5\u6027') # \u8fd4\u56de\u4e00\u4e2abytes\u7c7b\u578b\u768432\u5b57\u8282\u7684\u968f\u673a\u4e32 msg_bytes=os.urandom(32) # \u53d1\u7ed9\u5ba2\u6237\u7aef conn.sendall(msg_bytes) # hmac.new\u65b9\u6cd5 h=hmac.new(secret_key,msg_bytes) digest=h.digest() respone=conn.recv(len(digest)) return hmac.compare_digest(respone,digest) def data_handler(conn,bufsize=1024): if not conn_auth(conn): print('\u8be5\u94fe\u63a5\u4e0d\u5408\u6cd5,\u5173\u95ed') conn.close() return print('\u94fe\u63a5\u5408\u6cd5,\u5f00\u59cb\u901a\u4fe1') while True: data=conn.recv(bufsize) if not data:break conn.sendall(data.upper()) def server_handler(ip_port,bufsize,backlog=5): ''' \u53ea\u5904\u7406\u94fe\u63a5 :param ip_port: :return: ''' tcp_socket_server=socket(AF_INET,SOCK_STREAM) tcp_socket_server.bind(ip_port) tcp_socket_server.listen(backlog) while True: conn,addr=tcp_socket_server.accept() print('\u65b0\u8fde\u63a5[%s:%s]' %(addr[0],addr[1])) data_handler(conn,bufsize) if __name__ == '__main__': ip_port=('127.0.0.1',9999) bufsize=1024 server_handler(ip_port,bufsize) hashlib\u65b9\u6cd5 # client import socket import hashlib secret_key = b'wanghw' client = socket.socket() client.connect(('127.0.0.1')) # \u751f\u6210\u7684\u662f\u56fa\u5b9a\u768432\u4f4d\u5b57\u8282 random_bytes = client.recv(32) md5 = hashlib.md5(secret_key) md5.update(random_bytes) res = md5.hexdigest() client.send(res.encode('utf-8')) client.close() # server # -*- coding:utf-8 -*- import os import socket import hashlib ## \u968f\u673a\u7684\u5b57\u8282 ## \u7ed9\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u53d1\u4e00\u4e2a\u968f\u673a\u7684\u5b57\u7b26\u4e32\uff0c\u6765\u4fdd\u8bc1\u5373\u4f7f\u6570\u636e\u88ab\u62e6\u622a\u4e86\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u6d88\u606f random_bytes = os.urandom(32) ## \u79d8\u94a5 secret_key = b'wanghw' server = socket.socket() server.bind(('127.0.0.1',9001)) server.listen() conn,addr = server.accept() conn.send(random_bytes) md5 = hashlib.md5(secret_key) md5.update(random_bytes) res = md5.hexdigest() # MD5\u4f4d32\u4f4d # sha1\u4f4d40\u4f4d ret = conn.recv(1024).decode('utf-8') if ret == res: print('\u662f\u5408\u6cd5\u7684\u5ba2\u6237\u7aef') print('do sth') else: print('\u4e0d\u5408\u6cd5\uff01') conn.close()","title":"19 \u6821\u9a8c\u5ba2\u6237\u7aef\u7684\u5408\u6cd5\u6027hmac\u6a21\u5757"},{"location":"python\u57fa\u7840/hmac/#socket","text":"","title":"socket\u901a\u4fe1\u4e2d\u6821\u9a8c\u5ba2\u6237\u7aef\u7684\u5408\u6cd5\u6027"},{"location":"python\u57fa\u7840/hmac/#hmac","text":"# client from socket import * import hmac,os secret_key=b'linhaifeng bang bang bang' def conn_auth(conn): ''' \u9a8c\u8bc1\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u5668\u7684\u94fe\u63a5 :param conn: :return: ''' msg=conn.recv(32) h=hmac.new(secret_key,msg) digest=h.digest() conn.sendall(digest) def client_handler(ip_port,bufsize=1024): tcp_socket_client=socket(AF_INET,SOCK_STREAM) tcp_socket_client.connect(ip_port) conn_auth(tcp_socket_client) while True: data=input('>>: ').strip() if not data:continue if data == 'quit':break tcp_socket_client.sendall(data.encode('utf-8')) respone=tcp_socket_client.recv(bufsize) print(respone.decode('utf-8')) tcp_socket_client.close() if __name__ == '__main__': ip_port=('127.0.0.1',9999) bufsize=1024 client_handler(ip_port,bufsize) # server # -*- coding:utf-8 -*- from socket import * import hmac,os secret_key=b'linhaifeng bang bang bang' def conn_auth(conn): ''' \u8ba4\u8bc1\u5ba2\u6237\u7aef\u94fe\u63a5 :param conn: :return: ''' print('\u5f00\u59cb\u9a8c\u8bc1\u65b0\u94fe\u63a5\u7684\u5408\u6cd5\u6027') # \u8fd4\u56de\u4e00\u4e2abytes\u7c7b\u578b\u768432\u5b57\u8282\u7684\u968f\u673a\u4e32 msg_bytes=os.urandom(32) # \u53d1\u7ed9\u5ba2\u6237\u7aef conn.sendall(msg_bytes) # hmac.new\u65b9\u6cd5 h=hmac.new(secret_key,msg_bytes) digest=h.digest() respone=conn.recv(len(digest)) return hmac.compare_digest(respone,digest) def data_handler(conn,bufsize=1024): if not conn_auth(conn): print('\u8be5\u94fe\u63a5\u4e0d\u5408\u6cd5,\u5173\u95ed') conn.close() return print('\u94fe\u63a5\u5408\u6cd5,\u5f00\u59cb\u901a\u4fe1') while True: data=conn.recv(bufsize) if not data:break conn.sendall(data.upper()) def server_handler(ip_port,bufsize,backlog=5): ''' \u53ea\u5904\u7406\u94fe\u63a5 :param ip_port: :return: ''' tcp_socket_server=socket(AF_INET,SOCK_STREAM) tcp_socket_server.bind(ip_port) tcp_socket_server.listen(backlog) while True: conn,addr=tcp_socket_server.accept() print('\u65b0\u8fde\u63a5[%s:%s]' %(addr[0],addr[1])) data_handler(conn,bufsize) if __name__ == '__main__': ip_port=('127.0.0.1',9999) bufsize=1024 server_handler(ip_port,bufsize)","title":"hmac\u6a21\u5757 \u2014\u2014 \u63a8\u8350"},{"location":"python\u57fa\u7840/hmac/#hashlib","text":"# client import socket import hashlib secret_key = b'wanghw' client = socket.socket() client.connect(('127.0.0.1')) # \u751f\u6210\u7684\u662f\u56fa\u5b9a\u768432\u4f4d\u5b57\u8282 random_bytes = client.recv(32) md5 = hashlib.md5(secret_key) md5.update(random_bytes) res = md5.hexdigest() client.send(res.encode('utf-8')) client.close() # server # -*- coding:utf-8 -*- import os import socket import hashlib ## \u968f\u673a\u7684\u5b57\u8282 ## \u7ed9\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u53d1\u4e00\u4e2a\u968f\u673a\u7684\u5b57\u7b26\u4e32\uff0c\u6765\u4fdd\u8bc1\u5373\u4f7f\u6570\u636e\u88ab\u62e6\u622a\u4e86\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e2a\u6d88\u606f random_bytes = os.urandom(32) ## \u79d8\u94a5 secret_key = b'wanghw' server = socket.socket() server.bind(('127.0.0.1',9001)) server.listen() conn,addr = server.accept() conn.send(random_bytes) md5 = hashlib.md5(secret_key) md5.update(random_bytes) res = md5.hexdigest() # MD5\u4f4d32\u4f4d # sha1\u4f4d40\u4f4d ret = conn.recv(1024).decode('utf-8') if ret == res: print('\u662f\u5408\u6cd5\u7684\u5ba2\u6237\u7aef') print('do sth') else: print('\u4e0d\u5408\u6cd5\uff01') conn.close()","title":"hashlib\u65b9\u6cd5"},{"location":"python\u57fa\u7840/list/","text":"\u5217\u8868\u7684\u57fa\u672c\u64cd\u4f5c \u5217\u8868\u7684\u57fa\u672c\u64cd\u4f5c\u5305\u62ec\uff1a\u7d22\u5f15\u53d6\u503c\u3001\u5207\u7247\u3001\u6dfb\u52a0\u5143\u7d20(insert\u3001append\u3001extend)\u3001\u5220\u9664\u5143\u7d20(pop\u3001remove\u3001clear\u3001del)\u3001\u4fee\u6539\u3001\u6392\u5e8f\u3001\u53d6\u7d22\u5f15(index\u65b9\u6cd5)\u3001\u53cd\u8f6c\u7b49\u7b49\uff0c\u6211\u81ea\u5df1\u603b\u7ed3\u4e86\u4e0b\u76f8\u5173\u7684\u7ec3\u4e60\u4ee3\u7801\uff1a \u5217\u8868\u5207\u7247\u7684\u8bf4\u660e # \u6a21\u5f0f[start:end:step] \"\"\" \u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57start\u8868\u793a\u5207\u7247\u5f00\u59cb\u4f4d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a0\uff1b \u7b2c\u4e8c\u4e2a\u6570\u5b57end\u8868\u793a\u5207\u7247\u622a\u6b62\uff08\u4f46\u4e0d\u5305\u542b\uff09\u4f4d\u7f6e\uff08\u9ed8\u8ba4\u4e3a\u5217\u8868\u957f\u5ea6\uff09\uff1b \u7b2c\u4e09\u4e2a\u6570\u5b57step\u8868\u793a\u5207\u7247\u7684\u6b65\u957f\uff08\u9ed8\u8ba4\u4e3a1\uff09\u3002 \u5f53start\u4e3a0\u65f6\u53ef\u4ee5\u7701\u7565\uff0c\u5f53end\u4e3a\u5217\u8868\u957f\u5ea6\u65f6\u53ef\u4ee5\u7701\u7565\uff0c \u5f53step\u4e3a1\u65f6\u53ef\u4ee5\u7701\u7565\uff0c\u5e76\u4e14\u7701\u7565\u6b65\u957f\u65f6\u53ef\u4ee5\u540c\u65f6\u7701\u7565\u6700\u540e\u4e00\u4e2a\u5192\u53f7\u3002 \u53e6\u5916\uff0c\u5f53step\u4e3a\u8d1f\u6574\u6570\u65f6\uff0c\u8868\u793a\u53cd\u5411\u5207\u7247\uff0c\u8fd9\u65f6start\u5e94\u8be5\u6bd4end\u7684\u503c\u8981\u5927\u624d\u884c\u3002 \"\"\" aList = [3, 4, 5, 6, 7, 9, 11, 13, 15, 17] print (aList[::]) # \u8fd4\u56de\u5305\u542b\u539f\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u65b0\u5217\u8868 print (aList[::-1]) # \u8fd4\u56de\u5305\u542b\u539f\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u9006\u5e8f\u5217\u8868 print (aList[::2]) # \u9694\u4e00\u4e2a\u53d6\u4e00\u4e2a\uff0c\u83b7\u53d6\u5076\u6570\u4f4d\u7f6e\u7684\u5143\u7d20 print (aList[1::2]) # \u9694\u4e00\u4e2a\u53d6\u4e00\u4e2a\uff0c\u83b7\u53d6\u5947\u6570\u4f4d\u7f6e\u7684\u5143\u7d20 print (aList[3:6]) # \u6307\u5b9a\u5207\u7247\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e aList[0:100] # \u5207\u7247\u7ed3\u675f\u4f4d\u7f6e\u5927\u4e8e\u5217\u8868\u957f\u5ea6\u65f6\uff0c\u4ece\u5217\u8868\u5c3e\u90e8\u622a\u65ad aList[100:] # \u5207\u7247\u5f00\u59cb\u4f4d\u7f6e\u5927\u4e8e\u5217\u8868\u957f\u5ea6\u65f6\uff0c\u8fd4\u56de\u7a7a\u5217\u8868 aList[len(aList):] = [9] # \u5728\u5217\u8868\u5c3e\u90e8\u589e\u52a0\u5143\u7d20 aList[:0] = [1, 2] # \u5728\u5217\u8868\u5934\u90e8\u63d2\u5165\u5143\u7d20 aList[3:3] = [4] # \u5728\u5217\u8868\u4e2d\u95f4\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 aList[:3] = [1, 2] # \u66ff\u6362\u5217\u8868\u5143\u7d20\uff0c\u7b49\u53f7\u4e24\u8fb9\u7684\u5217\u8868\u957f\u5ea6\u76f8\u7b49 aList[3:] = [4, 5, 6] # \u7b49\u53f7\u4e24\u8fb9\u7684\u5217\u8868\u957f\u5ea6\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u7b49 aList[::2] = [0] * 3 # \u9694\u4e00\u4e2a\u4fee\u6539\u4e00\u4e2a print (aList) aList[::2] = ['a', 'b', 'c'] # \u9694\u4e00\u4e2a\u4fee\u6539\u4e00\u4e2a print (aList) #aList[::2] = [1,2] # \u5de6\u4fa7\u5207\u7247\u4e0d\u8fde\u7eed\uff0c\u7b49\u53f7\u4e24\u8fb9\u5217\u8868\u957f\u5ea6\u5fc5\u987b\u76f8\u7b49 aList[:3] = [] # \u5220\u9664\u5217\u8868\u4e2d\u524d3\u4e2a\u5143\u7d20 print (aList) del aList[:3] # \u5207\u7247\u5143\u7d20\u8fde\u7eed print (aList) del aList[::2] # \u5207\u7247\u5143\u7d20\u4e0d\u8fde\u7eed\uff0c\u9694\u4e00\u4e2a\u5220\u4e00\u4e2a demo1 l1 = ['Naruto','Sakurua','Sasukey','wanghw'] # \u7d22\u5f15 print(l1[0],type(l1[0])) print(l1[1],type(l1[1])) # \u5207\u7247 print(l1[:5],type(l1[:5])) print(l1[0:4:2]) print(l1[-1:-4:-1]) # \u5217\u8868\u7684\u5e38\u7528\u64cd\u4f5c\u2014\u2014\u589e\u5220\u6539\u67e5 '''##\u589e\u2014\u2014insert\u3001append\u3001extend''' ###()append\u2014\u2014\u8ffd\u52a0 l1.append(['\u738b\u5b8f\u4f1f',22,'male']) print(l1) ###(2)insert\u2014\u2014\u63d2\u5165 l1.insert(1,'whw') print(l1) ###(3)extend\u2014\u2014\u8fed\u4ee3\u8ffd\u52a0 l1.extend('Alex') print(l1)# '''\u5220\u2014\u2014pop\u3001remove\u3001clear\u3001del''' ###()\u6309\u7167\u7d22\u5f15\u53bb\u5220\u2014\u2014pop() ###\u53ea\u6709pop()\u4f1a\u5c06\u88ab\u5220\u9664\u7684\u5143\u7d20\u8fd4\u56de ret = l1.pop(0) print('\u88ab\u5220\u9664\u7684\u5143\u7d20',ret) print(l1) ###(2)\u6309\u7167\u5143\u7d20\u5220\u9664\u2014\u2014remove() ###\u5982\u679c\u6709\u540c\u540d\u7684\u5143\u7d20\uff0c\u5219\u4f1a\u53ea\u5220\u9664\u7b2c\u4e00\u4e2a l1.append('A') print(l1) l1.remove('A') print(l1) ###(3)\u6e05\u7a7a\u5217\u8868 l3 = [1,2,3,4,5] print(l3) l3.clear() print(l3,type(l3)) ###(4)del\u2014\u2014\u2014\u2014\u2014\u2014 ###(4-)\u6309\u7167\u7d22\u5f15\u5220\u9664 del l1[-2] print(l1) ###(4-2)\u6309\u7167\u5207\u7247(\u53ef\u4ee5\u52a0\u6b65\u957f)\u5220\u9664 del l1[1:5:2] print(l1) ###(4-3)\u5220\u9664\u6574\u4e2a\u5217\u8868 l4 = [1,2,3] print(l4) del l4 # print(l4)# \u62a5\u9519\uff1aNameError: name 'l4' is not defined ''''#\u6539\u2014\u2014 l1[0]=* l1[:3]=\"wanghw\" l1[:4:2]=222,333 ''' l1[0] = 'hero' print(l1) l1[:3] = 'WhwEa' print(l1) ##\u6309\u7167\u6b65\u957f\u6dfb\u52a0\uff0c\u5143\u7d20\u7684\u4e2a\u6570\u5fc5\u987b\u4e0e\u7d22\u5f15\u4e2a\u6570\u4e00\u4e00\u5bf9\u5e94 l1[:4:2] = 222,333 print(l1) # \u67e5 ''' ###\uff081\uff09\u6309\u7167\u7d22\u5f15 ###\uff082\uff09\u6309\u7167\u5207\u7247+\u6b65\u957f ###\uff083\uff09for\u5faa\u73af ''' # \u5176\u4ed6\u65b9\u6cd5\uff1alen\u3001count\u3001index\u3001sort\u3001reverse ###len\u2014\u2014\u83b7\u53d6\u5217\u8868\u957f\u5ea6 print(len(l1)) ###count\u2014\u2014\u8ba1\u7b97\u67d0\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 print(l1.count('a1')) ###index\u2014\u2014\u901a\u8fc7\u5143\u7d20\u8fd4\u56de\u7d22\u5f15 # \u2014\u2014\u627e\u5230\u7b2c\u4e00\u4e2a\u5c31\u8fd4\u56de\uff0c\u627e\u4e0d\u5230\u5c31\u62a5\u9519 ###sort\u2014\u2014\u6392\u5e8f\u2014\u2014\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927 l11 = [1,4,3,2,6,5,11,9] l12 = [1,4,3,2,6,5,11,9] l11.sort() print(l11) l12.sort(reverse=True) print(l12) ###reverse\u2014\u2014\u53cd\u8f6c l13 = ['a1','b','c','d'] l13.reverse() print(l13)#['d', 'c', 'b', 'a1'] demo2 # \u521b\u5efa\u4e00\u4e2a\u4ece1\u52309\u7684\u5217\u8868 list1 = list(range(1,10)) print(list1) list2 = ['a1','b','c',1,2,3] # \u67e5\u627e\u5143\u7d20\u5bf9\u5e94\u7684\u4e0b\u6807\uff0c\u6ca1\u6709\u5219\u62a5\u9519 print(list2.index(3)) # \u67e5\u627e\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u6ca1\u6709\u5219\u662f0 print(list2.count('d')) # \u5207\u7247\u2014\u2014\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u2014\u2014\u201c\u987e\u5934\u4e0d\u987e\u5c3e\u201d print(list2[1:2]) #['b'] print(list2[0:-1])#['a1', 'b', 'c', 1, 2] print(list2[:]) print(list2[::2])#['a1', 'c', 2] print(list2[1::2])#['b', 1, 3] # \u589e\u52a0\u2014\u2014append\u3001insert\u3001extend list1.append('w') print(list1) list1.insert(0,'h') print(list1) list1.extend(list2) print(list1) # \u5220\u9664\u2014\u2014pop\u3001remove\u3001del list1.pop()#\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a print(list1) list1.pop(-1) print(list1) list1.remove('h') print(list1) #\u6ca1\u6709\u7684\u8bdd\u4f1a\u62a5\u9519 # ValueError: list.remove(x): x not in list #list1.remove('ww') # del list2 \u5c06\u5217\u8868\u5f7b\u5e95\u5220\u6389 #\u5148 del list2 \u518dprint(list2)\u7684\u8bdd\u4f1a\u62a5\u9519\uff0c\u63d0\u793alist2not defined del list1[2:5] print(list1) ##clear # list2.clear() \u6e05\u7a7a\u5217\u8868\uff0c\u5f97\u5230\u4e00\u4e2a\u7a7a\u5217\u8868 #\u904d\u5386\u2014\u2014\u2014\u2014for....\u4e0eenumerate\u914d\u5408 count = 0 for i in list2: count += 1 print(count,len(list2)) for i,v in enumerate(list2,1): print(i,v) # \u6392\u5e8f\u2014\u2014sort()\u2014\u2014\u2014\u2014\u2014\u2014\u53cd\u8f6c\u2014\u2014reverse() ##\u6ce8\u610fsort()\u65b9\u6cd5 reverse\u53c2\u6570\uff1a\u9ed8\u8ba4\u4e3aFalse:\u6b63\u5e8f,\u82e5\u6307\u5b9a\u4e3aTrue:\u9006\u5e8f list3 = [2,32,11,55,0,1,-1] list3.sort(reverse=True) print(list3)#[-1, 0, 1, 2, zz, 32, 55] list3.reverse() print(list3)#[55, 32, zz, 2, 1, 0, -1] ##\u6309\u7167\u683c\u5f0f\u6253\u5370\u5546\u54c1\u5217\u8868 products = [['iphon10',10000],['MacPro',16666],['\u5c0f\u7c7316',1555],['Coffee',23],['Book',12]] print('\u5546\u54c1\u5217\u8868'.center(20,'*')) for i,v in enumerate(products,1): print(str(i)+'.',v[0],v[1]) \u5217\u8868\u751f\u6210\u5f0f \u5217\u8868\u7684\u63a8\u5bfc\u5f0f\u53c8\u53eb\u5217\u8868\u751f\u6210\u5f0f\uff0c\u5217\u8868\u7684\u751f\u6210\u5f0f\u751f\u6210\u5217\u8868\u7684\u6548\u7387\u662f\u6700\u9ad8\u7684\uff0c\u5b9e\u9645\u4e2d\u5927\u5bb6\u5c3d\u91cf\u4f7f\u7528\u5217\u8868\u7684\u63a8\u5bfc\u5f0f\uff1a lst = [1,2,3,4,5] lst2 = [i**2 for i in lst] print(lst2) ''' [1,4,9,16,25] ''' \u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d201 \u5b9e\u9645\u4e2d\u5728\u4f7f\u7528\u904d\u5386\u7684\u65b9\u5f0f\u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d20\u7684\u65f6\u5019\u4e00\u5b9a\u8981 \u5012\u5e8f\u904d\u5386 \u3002 \u6b63\u5e8f\u904d\u5386kennel\u4f1a\u6f0f\u6389\u4e00\u4e9b\u6570\u636e ### \u5220\u9664\u5176\u4e2d\u5c0f\u4e8e10\u7684\u6570\u636e ## \u6b63\u5e8f\u904d\u5386\u5220\u9664\u4f1a\u4e22\u6389\u4e00\u4e9b\u6570\u636e lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] for i in lst1: if i < 10: lst1.remove(i) print(\"lst1>>>\",lst1) # lst1>>> [2, 4, 6, 8, 10, 11, 12, 13, 14, 15] lst2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] for i,v in enumerate(lst2): if v < 10: del lst2[i] print(\"lst2>>>\",lst2) # lst2>>> [2, 4, 6, 8, 10, 11, 12, 13, 14, 15] \u5012\u5e8f\u904d\u5386 lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] for i in lst1[::-1]: if i < 10: lst1.remove(i) print(\"lst1>>>\",lst1) # lst1>>> [10, 11, 12, 13, 14, 15] \u53ef\u4ee5\u4f7f\u7528filter\u6216\u8005\u5217\u8868\u751f\u6210\u5f0f # filter\u65b9\u6cd5 lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] lst2 = list(filter(lambda x:x>=10,lst1)) print(lst2) # [10, 11, 12, 13, 14, 15] # \u5217\u8868\u63a8\u5bfc\u5f0f lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] lst2 = [i for i in lst1 if i >= 10] print(lst2) # [10, 11, 12, 13, 14, 15] \u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d202 '''#\u5220\u9664\u5076\u6570\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20''' l1 = [11,22,33,44,55,66] l2 = [11,22,33,44,55,66] l3 = [11,22,33,44,55,66] #\u65b9\u6cd5\u4e00\uff1a del l1[::2] print(l1) #\u65b9\u6cd5\u4e8c\uff1a for i in range(len(l2)-1,-1,-1): if i % 2 == 0: l2.pop(i) print(l2) \u5217\u8868\u6b63\u8d1f\u6570\u7684\u6392\u5e8f lst = [1, -2, 10, -12, -4, -5, 9, 2] # \u5c06\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u6b63\u6570\u5728\u524d\uff0c\u8d1f\u6570\u5728\u540e\uff0c\u5e76\u4e14\u5206\u522b\u6309\u7edd\u5bf9\u503c\u4ece\u5c0f\u5230\u5927 lst.sort(key=lambda x:(x<0,abs(x))) print(lst) # [1, 2, 9, 10, -2, -4, -5, -12] list\u7684sort\u4e0ereverse\u65b9\u6cd5\u662f\u5bf9\u6e90\u5217\u8868\u7684\u4fee\u6539 list\u7684sort\u4e0ereverse\u65b9\u6cd5\u662f\u5bf9\u6e90\u5217\u8868\u7684\u4fee\u6539\uff0c\u5e76\u6ca1\u6709\u751f\u6210\u65b0\u7684\u5bf9\u8c61\uff01 l = [1,2,3,0] ll = l.reverse() print(ll)#None print(l)#[0, 3, 2, 1] l2 = l.sort() print(l2)#None print(l)#[0, 1, 2, 3] \u6709\u5173\u751f\u6210\u5217\u8868\u76f8\u5173\u65b9\u6cd5\u5728\u6027\u80fd\u4e0a\u7684\u6d4b\u8bd5 \u6211\u5728\u8fd9\u7bc7\u535a\u5ba2\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u751f\u6210\u5217\u8868\u7684\u4e00\u4e9b\u65b9\u6cd5\u5728\u6027\u80fd\u4e0a\u7684\u6d4b\u8bd5\u8bb0\u5f55\uff1a Python\u5185\u7f6e\u6570\u636e\u7c7b\u578blist\u5404\u65b9\u6cd5\u7684\u6027\u80fd\u6d4b\u8bd5 \u5b9e\u9645\u4e2d\u4f7f\u7528\u5217\u8868\u7684\u4e00\u4e2a\u5751 \u6211\u5728\u5199\u4e1a\u52a1\u4ee3\u7801\u7684\u65f6\u5019\u53d1\u73b0\u8fc7\u4e00\u4e2a\u5173\u4e8e\u5217\u8868\u7684\u95ee\u9898\uff0c\u8bb0\u5f55\u5728\u4e86\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff1a Python\u53ef\u53d8\u6570\u636e\u7c7b\u578blist\u586b\u5751\u4e00\u5219 \u5217\u8868\u6709\u5173\u7684\u51e0\u4e2a\u5c0f\u7ec3\u4e60 \u81ea\u5df1\u5e73\u65f6\u5199\u4ee3\u7801\u65f6\u603b\u7ed3\u7684\u4e00\u4e9bdemo \u5217\u8868\u4e2d\u6570\u5b57\u5143\u7d20\u8f6c\u5b57\u7b26\u4e32\u7684\u4e0d\u540c\u89e3\u6cd5 \u5206\u5272\u5904\u7406\u5b58\u653e\u8fde\u7eed\u65f6\u95f4\u5b57\u7b26\u4e32\u7684\u5217\u8868 \u5217\u8868\u5f53\u4f5c\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570\u7684\u57511 \u5173\u4e8e\u201c\u53ef\u53d8\u6570\u636e\u7c7b\u578b\u201d\u505a\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570\u7684\u95ee\u9898 def add(a, b): a += b return a class Company: def __init__(self, name, staffs=[]): self.name = name self.staffs = staffs def add(self, staff_name): self.staffs.append(staff_name) def remove(self, staff_name): self.staffs.remove(staff_name) if __name__ == \"__main__\": # \u521d\u59cb\u5316\u7684\u65f6\u5019\u6307\u5b9astaffs\u5217\u8868\u7684\u8bdd\uff0c\u7528\u4f20\u5165\u7684\u8fd9\u4e2a\u5217\u8868 com1 = Company(\"com1\", [\"whw1\", \"whw2\"]) com1.add(\"whw3\") com1.remove(\"whw1\") print(com1.staffs) # ['whw2', 'whw3'] # \u521d\u59cb\u5316\u7684\u65f6\u5019\u4e0d\u6307\u5b9astaffs\u7684\u8bdd\uff0c\u7528\u9ed8\u8ba4\u7684\u54ea\u4e2a\u5217\u8868\uff01\u2014\u2014 \u53ef\u80fd\u4f1a\u4e0e\u5176\u4ed6\u4e0d\u6307\u5b9astaffs\u7684\u5bf9\u8c61\u7528\u540c\u4e00\u4e2a\u5217\u8868\uff01 com2 = Company(\"com2\") com2.add(\"whw\") print(com2.staffs) # ['whw'] print(\"default>>\",Company.__init__.__defaults__) # default>> (['whw'],) com3 = Company(\"com3\") com3.add(\"whw5\") print (com2.staffs) # ['whw', 'whw5'] print (com3.staffs) # ['whw', 'whw5'] print (com2.staffs is com3.staffs) # True \u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u53c2\u6570\u7684\u57512 \"\"\" \u4e00 \"\"\" # \u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u53c2\u6570 def lst_func(name:str,age:int,default_lst=[])->dict: default_lst.append(name) dic = dict( name=name, age=age, lst=default_lst, ) return dic # \u4f7f\u7528\u9ed8\u8ba4\u7684default\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5217\u8868 test1 = lst_func(\"naruto\",28) test2 = lst_func(\"sasuke\",38) # \u6307\u5b9adefault_lst test3 = lst_func(\"whw\",18,default_lst=[]) # print(\"test1>>>>>>>\",test1) # print(\"test2>>>>>>>\",test2) # print(\"test3>>>>>>>\",test3) \"\"\" test1>>>>>>> {'name': 'naruto', 'age': 28, 'lst': ['naruto', 'sasuke']} test2>>>>>>> {'name': 'sasuke', 'age': 38, 'lst': ['naruto', 'sasuke']} test3>>>>>>> {'name': 'whw', 'age': 18, 'lst': ['whw']} \"\"\" \"\"\" \u4e8c \"\"\" # \u4f7f\u7528clear\u65b9\u6cd5 \u201c\u91cd\u7f6e\u201d\u5217\u8868 def lst_func(name:str,age:int,default_lst=[])->dict: # clear\u4e4b\u540e\uff0c\u5b9e\u9645\u4e0a\u8fd8\u662f\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5217\u8868 default_lst.clear() default_lst.append(name) dic = dict( name=name, age=age, lst=default_lst, ) return dic test1 = lst_func(\"naruto\",28) test2 = lst_func(\"sasuke\",38) test3 = lst_func(\"whw\",18,default_lst=[]) # print(\"test1>>>>>>>\",test1) # print(\"test2>>>>>>>\",test2) # print(\"test3>>>>>>>\",test3) \"\"\" test1>>>>>>> {'name': 'naruto', 'age': 28, 'lst': ['naruto', 'sasuke']} test2>>>>>>> {'name': 'sasuke', 'age': 38, 'lst': ['naruto', 'sasuke']} test3>>>>>>> {'name': 'whw', 'age': 18, 'lst': ['whw']} \"\"\" \"\"\" \u4e09 \"\"\" # \u4e0d\u6307\u5b9a\u5728\u51fd\u6570\u5185\u90e8\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u8868 def lst_func(name:str,age:int,default_lst=[])->dict: # \u6307\u5411\u4e00\u4e2a\u65b0\u5217\u8868 default_lst = [] default_lst.append(name) dic = dict( name=name, age=age, lst=default_lst, ) return dic test1 = lst_func(\"naruto\",28) test2 = lst_func(\"sasuke\",38) test3 = lst_func(\"whw\",18,default_lst=[]) print(\"test1>>>>>>>\",test1) print(\"test2>>>>>>>\",test2) print(\"test3>>>>>>>\",test3) \"\"\" test1>>>>>>> {'name': 'naruto', 'age': 28, 'lst': ['naruto']} test2>>>>>>> {'name': 'sasuke', 'age': 38, 'lst': ['sasuke']} test3>>>>>>> {'name': 'whw', 'age': 18, 'lst': ['whw']} \"\"\"","title":"01 \u5217\u8868list"},{"location":"python\u57fa\u7840/list/#_1","text":"\u5217\u8868\u7684\u57fa\u672c\u64cd\u4f5c\u5305\u62ec\uff1a\u7d22\u5f15\u53d6\u503c\u3001\u5207\u7247\u3001\u6dfb\u52a0\u5143\u7d20(insert\u3001append\u3001extend)\u3001\u5220\u9664\u5143\u7d20(pop\u3001remove\u3001clear\u3001del)\u3001\u4fee\u6539\u3001\u6392\u5e8f\u3001\u53d6\u7d22\u5f15(index\u65b9\u6cd5)\u3001\u53cd\u8f6c\u7b49\u7b49\uff0c\u6211\u81ea\u5df1\u603b\u7ed3\u4e86\u4e0b\u76f8\u5173\u7684\u7ec3\u4e60\u4ee3\u7801\uff1a","title":"\u5217\u8868\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"python\u57fa\u7840/list/#_2","text":"# \u6a21\u5f0f[start:end:step] \"\"\" \u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57start\u8868\u793a\u5207\u7247\u5f00\u59cb\u4f4d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a0\uff1b \u7b2c\u4e8c\u4e2a\u6570\u5b57end\u8868\u793a\u5207\u7247\u622a\u6b62\uff08\u4f46\u4e0d\u5305\u542b\uff09\u4f4d\u7f6e\uff08\u9ed8\u8ba4\u4e3a\u5217\u8868\u957f\u5ea6\uff09\uff1b \u7b2c\u4e09\u4e2a\u6570\u5b57step\u8868\u793a\u5207\u7247\u7684\u6b65\u957f\uff08\u9ed8\u8ba4\u4e3a1\uff09\u3002 \u5f53start\u4e3a0\u65f6\u53ef\u4ee5\u7701\u7565\uff0c\u5f53end\u4e3a\u5217\u8868\u957f\u5ea6\u65f6\u53ef\u4ee5\u7701\u7565\uff0c \u5f53step\u4e3a1\u65f6\u53ef\u4ee5\u7701\u7565\uff0c\u5e76\u4e14\u7701\u7565\u6b65\u957f\u65f6\u53ef\u4ee5\u540c\u65f6\u7701\u7565\u6700\u540e\u4e00\u4e2a\u5192\u53f7\u3002 \u53e6\u5916\uff0c\u5f53step\u4e3a\u8d1f\u6574\u6570\u65f6\uff0c\u8868\u793a\u53cd\u5411\u5207\u7247\uff0c\u8fd9\u65f6start\u5e94\u8be5\u6bd4end\u7684\u503c\u8981\u5927\u624d\u884c\u3002 \"\"\" aList = [3, 4, 5, 6, 7, 9, 11, 13, 15, 17] print (aList[::]) # \u8fd4\u56de\u5305\u542b\u539f\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u65b0\u5217\u8868 print (aList[::-1]) # \u8fd4\u56de\u5305\u542b\u539f\u5217\u8868\u4e2d\u6240\u6709\u5143\u7d20\u7684\u9006\u5e8f\u5217\u8868 print (aList[::2]) # \u9694\u4e00\u4e2a\u53d6\u4e00\u4e2a\uff0c\u83b7\u53d6\u5076\u6570\u4f4d\u7f6e\u7684\u5143\u7d20 print (aList[1::2]) # \u9694\u4e00\u4e2a\u53d6\u4e00\u4e2a\uff0c\u83b7\u53d6\u5947\u6570\u4f4d\u7f6e\u7684\u5143\u7d20 print (aList[3:6]) # \u6307\u5b9a\u5207\u7247\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e aList[0:100] # \u5207\u7247\u7ed3\u675f\u4f4d\u7f6e\u5927\u4e8e\u5217\u8868\u957f\u5ea6\u65f6\uff0c\u4ece\u5217\u8868\u5c3e\u90e8\u622a\u65ad aList[100:] # \u5207\u7247\u5f00\u59cb\u4f4d\u7f6e\u5927\u4e8e\u5217\u8868\u957f\u5ea6\u65f6\uff0c\u8fd4\u56de\u7a7a\u5217\u8868 aList[len(aList):] = [9] # \u5728\u5217\u8868\u5c3e\u90e8\u589e\u52a0\u5143\u7d20 aList[:0] = [1, 2] # \u5728\u5217\u8868\u5934\u90e8\u63d2\u5165\u5143\u7d20 aList[3:3] = [4] # \u5728\u5217\u8868\u4e2d\u95f4\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 aList[:3] = [1, 2] # \u66ff\u6362\u5217\u8868\u5143\u7d20\uff0c\u7b49\u53f7\u4e24\u8fb9\u7684\u5217\u8868\u957f\u5ea6\u76f8\u7b49 aList[3:] = [4, 5, 6] # \u7b49\u53f7\u4e24\u8fb9\u7684\u5217\u8868\u957f\u5ea6\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u7b49 aList[::2] = [0] * 3 # \u9694\u4e00\u4e2a\u4fee\u6539\u4e00\u4e2a print (aList) aList[::2] = ['a', 'b', 'c'] # \u9694\u4e00\u4e2a\u4fee\u6539\u4e00\u4e2a print (aList) #aList[::2] = [1,2] # \u5de6\u4fa7\u5207\u7247\u4e0d\u8fde\u7eed\uff0c\u7b49\u53f7\u4e24\u8fb9\u5217\u8868\u957f\u5ea6\u5fc5\u987b\u76f8\u7b49 aList[:3] = [] # \u5220\u9664\u5217\u8868\u4e2d\u524d3\u4e2a\u5143\u7d20 print (aList) del aList[:3] # \u5207\u7247\u5143\u7d20\u8fde\u7eed print (aList) del aList[::2] # \u5207\u7247\u5143\u7d20\u4e0d\u8fde\u7eed\uff0c\u9694\u4e00\u4e2a\u5220\u4e00\u4e2a demo1 l1 = ['Naruto','Sakurua','Sasukey','wanghw'] # \u7d22\u5f15 print(l1[0],type(l1[0])) print(l1[1],type(l1[1])) # \u5207\u7247 print(l1[:5],type(l1[:5])) print(l1[0:4:2]) print(l1[-1:-4:-1]) # \u5217\u8868\u7684\u5e38\u7528\u64cd\u4f5c\u2014\u2014\u589e\u5220\u6539\u67e5 '''##\u589e\u2014\u2014insert\u3001append\u3001extend''' ###()append\u2014\u2014\u8ffd\u52a0 l1.append(['\u738b\u5b8f\u4f1f',22,'male']) print(l1) ###(2)insert\u2014\u2014\u63d2\u5165 l1.insert(1,'whw') print(l1) ###(3)extend\u2014\u2014\u8fed\u4ee3\u8ffd\u52a0 l1.extend('Alex') print(l1)# '''\u5220\u2014\u2014pop\u3001remove\u3001clear\u3001del''' ###()\u6309\u7167\u7d22\u5f15\u53bb\u5220\u2014\u2014pop() ###\u53ea\u6709pop()\u4f1a\u5c06\u88ab\u5220\u9664\u7684\u5143\u7d20\u8fd4\u56de ret = l1.pop(0) print('\u88ab\u5220\u9664\u7684\u5143\u7d20',ret) print(l1) ###(2)\u6309\u7167\u5143\u7d20\u5220\u9664\u2014\u2014remove() ###\u5982\u679c\u6709\u540c\u540d\u7684\u5143\u7d20\uff0c\u5219\u4f1a\u53ea\u5220\u9664\u7b2c\u4e00\u4e2a l1.append('A') print(l1) l1.remove('A') print(l1) ###(3)\u6e05\u7a7a\u5217\u8868 l3 = [1,2,3,4,5] print(l3) l3.clear() print(l3,type(l3)) ###(4)del\u2014\u2014\u2014\u2014\u2014\u2014 ###(4-)\u6309\u7167\u7d22\u5f15\u5220\u9664 del l1[-2] print(l1) ###(4-2)\u6309\u7167\u5207\u7247(\u53ef\u4ee5\u52a0\u6b65\u957f)\u5220\u9664 del l1[1:5:2] print(l1) ###(4-3)\u5220\u9664\u6574\u4e2a\u5217\u8868 l4 = [1,2,3] print(l4) del l4 # print(l4)# \u62a5\u9519\uff1aNameError: name 'l4' is not defined ''''#\u6539\u2014\u2014 l1[0]=* l1[:3]=\"wanghw\" l1[:4:2]=222,333 ''' l1[0] = 'hero' print(l1) l1[:3] = 'WhwEa' print(l1) ##\u6309\u7167\u6b65\u957f\u6dfb\u52a0\uff0c\u5143\u7d20\u7684\u4e2a\u6570\u5fc5\u987b\u4e0e\u7d22\u5f15\u4e2a\u6570\u4e00\u4e00\u5bf9\u5e94 l1[:4:2] = 222,333 print(l1) # \u67e5 ''' ###\uff081\uff09\u6309\u7167\u7d22\u5f15 ###\uff082\uff09\u6309\u7167\u5207\u7247+\u6b65\u957f ###\uff083\uff09for\u5faa\u73af ''' # \u5176\u4ed6\u65b9\u6cd5\uff1alen\u3001count\u3001index\u3001sort\u3001reverse ###len\u2014\u2014\u83b7\u53d6\u5217\u8868\u957f\u5ea6 print(len(l1)) ###count\u2014\u2014\u8ba1\u7b97\u67d0\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 print(l1.count('a1')) ###index\u2014\u2014\u901a\u8fc7\u5143\u7d20\u8fd4\u56de\u7d22\u5f15 # \u2014\u2014\u627e\u5230\u7b2c\u4e00\u4e2a\u5c31\u8fd4\u56de\uff0c\u627e\u4e0d\u5230\u5c31\u62a5\u9519 ###sort\u2014\u2014\u6392\u5e8f\u2014\u2014\u9ed8\u8ba4\u4ece\u5c0f\u5230\u5927 l11 = [1,4,3,2,6,5,11,9] l12 = [1,4,3,2,6,5,11,9] l11.sort() print(l11) l12.sort(reverse=True) print(l12) ###reverse\u2014\u2014\u53cd\u8f6c l13 = ['a1','b','c','d'] l13.reverse() print(l13)#['d', 'c', 'b', 'a1'] demo2 # \u521b\u5efa\u4e00\u4e2a\u4ece1\u52309\u7684\u5217\u8868 list1 = list(range(1,10)) print(list1) list2 = ['a1','b','c',1,2,3] # \u67e5\u627e\u5143\u7d20\u5bf9\u5e94\u7684\u4e0b\u6807\uff0c\u6ca1\u6709\u5219\u62a5\u9519 print(list2.index(3)) # \u67e5\u627e\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u6ca1\u6709\u5219\u662f0 print(list2.count('d')) # \u5207\u7247\u2014\u2014\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u2014\u2014\u201c\u987e\u5934\u4e0d\u987e\u5c3e\u201d print(list2[1:2]) #['b'] print(list2[0:-1])#['a1', 'b', 'c', 1, 2] print(list2[:]) print(list2[::2])#['a1', 'c', 2] print(list2[1::2])#['b', 1, 3] # \u589e\u52a0\u2014\u2014append\u3001insert\u3001extend list1.append('w') print(list1) list1.insert(0,'h') print(list1) list1.extend(list2) print(list1) # \u5220\u9664\u2014\u2014pop\u3001remove\u3001del list1.pop()#\u9ed8\u8ba4\u5220\u9664\u6700\u540e\u4e00\u4e2a print(list1) list1.pop(-1) print(list1) list1.remove('h') print(list1) #\u6ca1\u6709\u7684\u8bdd\u4f1a\u62a5\u9519 # ValueError: list.remove(x): x not in list #list1.remove('ww') # del list2 \u5c06\u5217\u8868\u5f7b\u5e95\u5220\u6389 #\u5148 del list2 \u518dprint(list2)\u7684\u8bdd\u4f1a\u62a5\u9519\uff0c\u63d0\u793alist2not defined del list1[2:5] print(list1) ##clear # list2.clear() \u6e05\u7a7a\u5217\u8868\uff0c\u5f97\u5230\u4e00\u4e2a\u7a7a\u5217\u8868 #\u904d\u5386\u2014\u2014\u2014\u2014for....\u4e0eenumerate\u914d\u5408 count = 0 for i in list2: count += 1 print(count,len(list2)) for i,v in enumerate(list2,1): print(i,v) # \u6392\u5e8f\u2014\u2014sort()\u2014\u2014\u2014\u2014\u2014\u2014\u53cd\u8f6c\u2014\u2014reverse() ##\u6ce8\u610fsort()\u65b9\u6cd5 reverse\u53c2\u6570\uff1a\u9ed8\u8ba4\u4e3aFalse:\u6b63\u5e8f,\u82e5\u6307\u5b9a\u4e3aTrue:\u9006\u5e8f list3 = [2,32,11,55,0,1,-1] list3.sort(reverse=True) print(list3)#[-1, 0, 1, 2, zz, 32, 55] list3.reverse() print(list3)#[55, 32, zz, 2, 1, 0, -1] ##\u6309\u7167\u683c\u5f0f\u6253\u5370\u5546\u54c1\u5217\u8868 products = [['iphon10',10000],['MacPro',16666],['\u5c0f\u7c7316',1555],['Coffee',23],['Book',12]] print('\u5546\u54c1\u5217\u8868'.center(20,'*')) for i,v in enumerate(products,1): print(str(i)+'.',v[0],v[1])","title":"\u5217\u8868\u5207\u7247\u7684\u8bf4\u660e"},{"location":"python\u57fa\u7840/list/#_3","text":"\u5217\u8868\u7684\u63a8\u5bfc\u5f0f\u53c8\u53eb\u5217\u8868\u751f\u6210\u5f0f\uff0c\u5217\u8868\u7684\u751f\u6210\u5f0f\u751f\u6210\u5217\u8868\u7684\u6548\u7387\u662f\u6700\u9ad8\u7684\uff0c\u5b9e\u9645\u4e2d\u5927\u5bb6\u5c3d\u91cf\u4f7f\u7528\u5217\u8868\u7684\u63a8\u5bfc\u5f0f\uff1a lst = [1,2,3,4,5] lst2 = [i**2 for i in lst] print(lst2) ''' [1,4,9,16,25] '''","title":"\u5217\u8868\u751f\u6210\u5f0f"},{"location":"python\u57fa\u7840/list/#1","text":"\u5b9e\u9645\u4e2d\u5728\u4f7f\u7528\u904d\u5386\u7684\u65b9\u5f0f\u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d20\u7684\u65f6\u5019\u4e00\u5b9a\u8981 \u5012\u5e8f\u904d\u5386 \u3002 \u6b63\u5e8f\u904d\u5386kennel\u4f1a\u6f0f\u6389\u4e00\u4e9b\u6570\u636e ### \u5220\u9664\u5176\u4e2d\u5c0f\u4e8e10\u7684\u6570\u636e ## \u6b63\u5e8f\u904d\u5386\u5220\u9664\u4f1a\u4e22\u6389\u4e00\u4e9b\u6570\u636e lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] for i in lst1: if i < 10: lst1.remove(i) print(\"lst1>>>\",lst1) # lst1>>> [2, 4, 6, 8, 10, 11, 12, 13, 14, 15] lst2 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] for i,v in enumerate(lst2): if v < 10: del lst2[i] print(\"lst2>>>\",lst2) # lst2>>> [2, 4, 6, 8, 10, 11, 12, 13, 14, 15] \u5012\u5e8f\u904d\u5386 lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] for i in lst1[::-1]: if i < 10: lst1.remove(i) print(\"lst1>>>\",lst1) # lst1>>> [10, 11, 12, 13, 14, 15] \u53ef\u4ee5\u4f7f\u7528filter\u6216\u8005\u5217\u8868\u751f\u6210\u5f0f # filter\u65b9\u6cd5 lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] lst2 = list(filter(lambda x:x>=10,lst1)) print(lst2) # [10, 11, 12, 13, 14, 15] # \u5217\u8868\u63a8\u5bfc\u5f0f lst1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] lst2 = [i for i in lst1 if i >= 10] print(lst2) # [10, 11, 12, 13, 14, 15]","title":"\u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d201"},{"location":"python\u57fa\u7840/list/#2","text":"'''#\u5220\u9664\u5076\u6570\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20''' l1 = [11,22,33,44,55,66] l2 = [11,22,33,44,55,66] l3 = [11,22,33,44,55,66] #\u65b9\u6cd5\u4e00\uff1a del l1[::2] print(l1) #\u65b9\u6cd5\u4e8c\uff1a for i in range(len(l2)-1,-1,-1): if i % 2 == 0: l2.pop(i) print(l2)","title":"\u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d202"},{"location":"python\u57fa\u7840/list/#_4","text":"lst = [1, -2, 10, -12, -4, -5, 9, 2] # \u5c06\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u6b63\u6570\u5728\u524d\uff0c\u8d1f\u6570\u5728\u540e\uff0c\u5e76\u4e14\u5206\u522b\u6309\u7edd\u5bf9\u503c\u4ece\u5c0f\u5230\u5927 lst.sort(key=lambda x:(x<0,abs(x))) print(lst) # [1, 2, 9, 10, -2, -4, -5, -12]","title":"\u5217\u8868\u6b63\u8d1f\u6570\u7684\u6392\u5e8f"},{"location":"python\u57fa\u7840/list/#listsortreverse","text":"list\u7684sort\u4e0ereverse\u65b9\u6cd5\u662f\u5bf9\u6e90\u5217\u8868\u7684\u4fee\u6539\uff0c\u5e76\u6ca1\u6709\u751f\u6210\u65b0\u7684\u5bf9\u8c61\uff01 l = [1,2,3,0] ll = l.reverse() print(ll)#None print(l)#[0, 3, 2, 1] l2 = l.sort() print(l2)#None print(l)#[0, 1, 2, 3]","title":"list\u7684sort\u4e0ereverse\u65b9\u6cd5\u662f\u5bf9\u6e90\u5217\u8868\u7684\u4fee\u6539"},{"location":"python\u57fa\u7840/list/#_5","text":"\u6211\u5728\u8fd9\u7bc7\u535a\u5ba2\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u751f\u6210\u5217\u8868\u7684\u4e00\u4e9b\u65b9\u6cd5\u5728\u6027\u80fd\u4e0a\u7684\u6d4b\u8bd5\u8bb0\u5f55\uff1a Python\u5185\u7f6e\u6570\u636e\u7c7b\u578blist\u5404\u65b9\u6cd5\u7684\u6027\u80fd\u6d4b\u8bd5","title":"\u6709\u5173\u751f\u6210\u5217\u8868\u76f8\u5173\u65b9\u6cd5\u5728\u6027\u80fd\u4e0a\u7684\u6d4b\u8bd5"},{"location":"python\u57fa\u7840/list/#_6","text":"\u6211\u5728\u5199\u4e1a\u52a1\u4ee3\u7801\u7684\u65f6\u5019\u53d1\u73b0\u8fc7\u4e00\u4e2a\u5173\u4e8e\u5217\u8868\u7684\u95ee\u9898\uff0c\u8bb0\u5f55\u5728\u4e86\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff1a Python\u53ef\u53d8\u6570\u636e\u7c7b\u578blist\u586b\u5751\u4e00\u5219","title":"\u5b9e\u9645\u4e2d\u4f7f\u7528\u5217\u8868\u7684\u4e00\u4e2a\u5751"},{"location":"python\u57fa\u7840/list/#_7","text":"\u81ea\u5df1\u5e73\u65f6\u5199\u4ee3\u7801\u65f6\u603b\u7ed3\u7684\u4e00\u4e9bdemo \u5217\u8868\u4e2d\u6570\u5b57\u5143\u7d20\u8f6c\u5b57\u7b26\u4e32\u7684\u4e0d\u540c\u89e3\u6cd5 \u5206\u5272\u5904\u7406\u5b58\u653e\u8fde\u7eed\u65f6\u95f4\u5b57\u7b26\u4e32\u7684\u5217\u8868","title":"\u5217\u8868\u6709\u5173\u7684\u51e0\u4e2a\u5c0f\u7ec3\u4e60"},{"location":"python\u57fa\u7840/list/#1_1","text":"\u5173\u4e8e\u201c\u53ef\u53d8\u6570\u636e\u7c7b\u578b\u201d\u505a\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570\u7684\u95ee\u9898 def add(a, b): a += b return a class Company: def __init__(self, name, staffs=[]): self.name = name self.staffs = staffs def add(self, staff_name): self.staffs.append(staff_name) def remove(self, staff_name): self.staffs.remove(staff_name) if __name__ == \"__main__\": # \u521d\u59cb\u5316\u7684\u65f6\u5019\u6307\u5b9astaffs\u5217\u8868\u7684\u8bdd\uff0c\u7528\u4f20\u5165\u7684\u8fd9\u4e2a\u5217\u8868 com1 = Company(\"com1\", [\"whw1\", \"whw2\"]) com1.add(\"whw3\") com1.remove(\"whw1\") print(com1.staffs) # ['whw2', 'whw3'] # \u521d\u59cb\u5316\u7684\u65f6\u5019\u4e0d\u6307\u5b9astaffs\u7684\u8bdd\uff0c\u7528\u9ed8\u8ba4\u7684\u54ea\u4e2a\u5217\u8868\uff01\u2014\u2014 \u53ef\u80fd\u4f1a\u4e0e\u5176\u4ed6\u4e0d\u6307\u5b9astaffs\u7684\u5bf9\u8c61\u7528\u540c\u4e00\u4e2a\u5217\u8868\uff01 com2 = Company(\"com2\") com2.add(\"whw\") print(com2.staffs) # ['whw'] print(\"default>>\",Company.__init__.__defaults__) # default>> (['whw'],) com3 = Company(\"com3\") com3.add(\"whw5\") print (com2.staffs) # ['whw', 'whw5'] print (com3.staffs) # ['whw', 'whw5'] print (com2.staffs is com3.staffs) # True","title":"\u5217\u8868\u5f53\u4f5c\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570\u7684\u57511"},{"location":"python\u57fa\u7840/list/#2_1","text":"\"\"\" \u4e00 \"\"\" # \u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u53c2\u6570 def lst_func(name:str,age:int,default_lst=[])->dict: default_lst.append(name) dic = dict( name=name, age=age, lst=default_lst, ) return dic # \u4f7f\u7528\u9ed8\u8ba4\u7684default\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5217\u8868 test1 = lst_func(\"naruto\",28) test2 = lst_func(\"sasuke\",38) # \u6307\u5b9adefault_lst test3 = lst_func(\"whw\",18,default_lst=[]) # print(\"test1>>>>>>>\",test1) # print(\"test2>>>>>>>\",test2) # print(\"test3>>>>>>>\",test3) \"\"\" test1>>>>>>> {'name': 'naruto', 'age': 28, 'lst': ['naruto', 'sasuke']} test2>>>>>>> {'name': 'sasuke', 'age': 38, 'lst': ['naruto', 'sasuke']} test3>>>>>>> {'name': 'whw', 'age': 18, 'lst': ['whw']} \"\"\" \"\"\" \u4e8c \"\"\" # \u4f7f\u7528clear\u65b9\u6cd5 \u201c\u91cd\u7f6e\u201d\u5217\u8868 def lst_func(name:str,age:int,default_lst=[])->dict: # clear\u4e4b\u540e\uff0c\u5b9e\u9645\u4e0a\u8fd8\u662f\u4f7f\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5217\u8868 default_lst.clear() default_lst.append(name) dic = dict( name=name, age=age, lst=default_lst, ) return dic test1 = lst_func(\"naruto\",28) test2 = lst_func(\"sasuke\",38) test3 = lst_func(\"whw\",18,default_lst=[]) # print(\"test1>>>>>>>\",test1) # print(\"test2>>>>>>>\",test2) # print(\"test3>>>>>>>\",test3) \"\"\" test1>>>>>>> {'name': 'naruto', 'age': 28, 'lst': ['naruto', 'sasuke']} test2>>>>>>> {'name': 'sasuke', 'age': 38, 'lst': ['naruto', 'sasuke']} test3>>>>>>> {'name': 'whw', 'age': 18, 'lst': ['whw']} \"\"\" \"\"\" \u4e09 \"\"\" # \u4e0d\u6307\u5b9a\u5728\u51fd\u6570\u5185\u90e8\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5217\u8868 def lst_func(name:str,age:int,default_lst=[])->dict: # \u6307\u5411\u4e00\u4e2a\u65b0\u5217\u8868 default_lst = [] default_lst.append(name) dic = dict( name=name, age=age, lst=default_lst, ) return dic test1 = lst_func(\"naruto\",28) test2 = lst_func(\"sasuke\",38) test3 = lst_func(\"whw\",18,default_lst=[]) print(\"test1>>>>>>>\",test1) print(\"test2>>>>>>>\",test2) print(\"test3>>>>>>>\",test3) \"\"\" test1>>>>>>> {'name': 'naruto', 'age': 28, 'lst': ['naruto']} test2>>>>>>> {'name': 'sasuke', 'age': 38, 'lst': ['sasuke']} test3>>>>>>> {'name': 'whw', 'age': 18, 'lst': ['whw']} \"\"\"","title":"\u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u53c2\u6570\u7684\u57512"},{"location":"python\u57fa\u7840/logging/","text":"\u4e2a\u4eba\u535a\u5ba2 \u7528\u6237\u81ea\u5df1\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b logging\u6a21\u5757\u77e5\u8bc6\u70b9\u53ca\u5e94\u7528\u5c0f\u7ed3 \u89e3\u51b3logging\u6a21\u5757\u65e5\u5fd7\u4fe1\u606f\u91cd\u590d\u95ee\u9898 \u5173\u4e8e\u89e3\u51b3logging\u6a21\u5757\u5199\u51fa\u7684\u65e5\u5fd7\u4fe1\u606f\u91cd\u590d\u7684\u95ee\u9898","title":"09 logging\u6a21\u5757"},{"location":"python\u57fa\u7840/logging/#_1","text":"\u7528\u6237\u81ea\u5df1\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b logging\u6a21\u5757\u77e5\u8bc6\u70b9\u53ca\u5e94\u7528\u5c0f\u7ed3 \u89e3\u51b3logging\u6a21\u5757\u65e5\u5fd7\u4fe1\u606f\u91cd\u590d\u95ee\u9898 \u5173\u4e8e\u89e3\u51b3logging\u6a21\u5757\u5199\u51fa\u7684\u65e5\u5fd7\u4fe1\u606f\u91cd\u590d\u7684\u95ee\u9898","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u57fa\u7840/optparse/","text":"optparse\u6a21\u5757\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\u7684\u8bf4\u660e\u53ca\u4f18\u5316 optparse\u6a21\u5757\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\u7684\u8bf4\u660e\u53ca\u4f18\u5316 \u5b9e\u9645\u4f7f\u7528\u6848\u4f8b \u4f7f\u7528optparse\u6a21\u5757\u6839\u636e\u4e0d\u540c\u7684\u53c2\u6570\u521b\u5efa\u4e0d\u540c\u7684csv\u6587\u4ef6","title":"10 optparse\u6a21\u5757"},{"location":"python\u57fa\u7840/optparse/#optparse","text":"optparse\u6a21\u5757\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\u7684\u8bf4\u660e\u53ca\u4f18\u5316","title":"optparse\u6a21\u5757\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\u7684\u8bf4\u660e\u53ca\u4f18\u5316"},{"location":"python\u57fa\u7840/optparse/#_1","text":"\u4f7f\u7528optparse\u6a21\u5757\u6839\u636e\u4e0d\u540c\u7684\u53c2\u6570\u521b\u5efa\u4e0d\u540c\u7684csv\u6587\u4ef6","title":"\u5b9e\u9645\u4f7f\u7528\u6848\u4f8b"},{"location":"python\u57fa\u7840/os\u6a21\u5757/","text":"os\u6a21\u5757 os\u6a21\u5757\u662fPython\u5185\u7f6e\u7684\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4ea4\u4e92\u7684\u4e00\u4e2a\u6a21\u5757\u3002 \u6587\u4ef6\u5939\u4e0e\u6587\u4ef6\u76f8\u5173\u64cd\u4f5c import os #\u9012\u5f52\u521b\u5efa\u6587\u4ef6 os.makedirs('app/a/b/c') #\u9012\u5f52\u5220\u9664\u6587\u4ef6\uff0c\u5f53\u8fd9\u4e2a\u8981\u5220\u9664\u7684\u76ee\u5f55\u91cc\u9762\u6709\u6587\u4ef6\uff0c\u5c31\u505c\u6b62\u5220\u9664 os.removedirs('app/a/b/c') #\u521b\u5efa\u5355\u4e2a\u76ee\u5f55 os.mkdir('app/a/cc') #\u5220\u9664\u5355\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u76ee\u5f55\u91cc\u6709\u4e1c\u897f\u5c31\u62a5\u9519\uff0c\u4e0d\u5220\u9664 os.rmdir('app/a/cc') #\u67e5\u770b\u67d0\u4e2a\u76ee\u5f55\u4e0b\u7684\u5185\u5bb9 \u2014\u2014\u2014\u2014 \u5f88\u5e38\u7528 l = os.listdir('app/a') print(l) # \u5220\u9664\uff0c\u5220\u9664\u4e86\u5c31\u4e0d\u80fd\u6062\u590d os.remove(file_path) # \u4fee\u6539\u6587\u4ef6\u7684\u540d\u5b57 os.rename(file_path) \u8def\u5f84\u76f8\u5173 ''' \u5fc5\u4f1a\u7684\uff1a os.path.join os.path.basedir os.path.abspath os.path.basename os.path.dirname os.remove os.rename os.listdir ''' # \u5c06\u591a\u4e2a\u8def\u5f84\u7ec4\u5408\u540e\u8fd4\u56de\uff0c\u7b2c\u4e00\u4e2a\u7edd\u5bf9\u8def\u5f84\u4e4b\u524d\u7684\u53c2\u6570\u5c06\u88ab\u5ffd\u7565 s = os.path.join(r'E:\\practice',r'app',r'a') print(s) #E:\\practice\\app\\a ##\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84 ***** print(os.path.abspath('app')) #E:\\practice\\app #\u8fd4\u56depath\u7684\u76ee\u5f55\u3002\u5176\u5b9e\u5c31\u662fos.path.split(path)\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 print(os.path.dirname(r'E:\\practice\\app')) #E:\\practice #\u8fd4\u56depath\u6700\u540e\u7684\u6587\u4ef6\u540d\u3002\u5982\u4f55path\u4ee5\uff0f\u6216\\\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de\u7a7a\u503c\uff0c\u5373os.path.split(path)\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002 ***** print(os.path.basename(r'E:\\practice\\app')) #app ### \u5982\u679cpath\u5b58\u5728\uff0c\u8fd4\u56deTrue\uff1b\u5982\u679cpath\u4e0d\u5b58\u5728\uff0c\u8fd4\u56deFalse print(os.path.exists(r'E:\\practice\\app')) ##\u5c06\u8fd9\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u5206\u6210\u76ee\u5f55\u4e0e\u6587\u4ef6\uff0c\u6ce8\u610f\u52a0r print(os.path.split(r'E:\\practice\\app')) #('E:\\\\practice\\\\old_boy\\\\day14-\u6a21\u5757', 'app') # \u5982\u679cpath\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd4\u56deTrue print(os.path.isabs(r'E:\\practice\\app')) \u5176\u4ed6 #\u8fd4\u56depath\u7684\u5927\u5c0f<br></em> #\u5b9e\u9645\u4e0a\u83b7\u53d6\u7684\u662f\u6587\u4ef6\u7684\u5927\u5c0f\uff0c # \u5751\uff1a\u83b7\u53d6\u76ee\u5f55\u5927\u5c0f\u7684\u65f6\u5019\u2014\u2014\u2014\u2014 # \u4e00\u822c\u83b7\u53d6\u76ee\u5f55\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u5c06\u91cc\u9762\u6240\u6709\u6587\u4ef6\u7684\u5927\u5c0f\u7d2f\u52a0\uff01\uff01\uff01 print('\u76ee\u5f55\u5927\u5c0f\uff1a',os.path.getsize('E:\\practice')) print('\u6587\u4ef6\u5927\u5c0f\uff1a',os.path.getsize('E:\\practice\\p')) ## \u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173 print(os.sep) # \\ print(repr(os.sep)) # '\\\\' # \u6362\u884c\u7b26 print(repr(os.linesep))#'\\r\\n' #\u73af\u5883\u53d8\u91cf\u7684\u5206\u5272 print(repr(os.pathsep)) #';' ### # print(os.system('dir'))#\u4e2d\u6587\u4e71\u7801 # \u5728\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\u53ef\u4ee5\u4e0b\u53d1\u64cd\u4f5c\u7cfb\u7edf\u7684\u6307\u4ee4 # \u5728linux\u7cfb\u7edf\u4e0a\u76f8\u5f53\u4e8e\u53d1shell\u547d\u4ee4 ***** print(os.popen('dir').read()) #\u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf # print(os.environ) # \u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u5373\u5f53\u524dpython\u811a\u672c\u5de5\u4f5c\u7684\u76ee\u5f55\u8def\u5f84 *** print(os.getcwd()) # \u6539\u53d8\u5f53\u524d\u811a\u672c\u5de5\u4f5c\u76ee\u5f55\uff1b\u76f8\u5f53\u4e8eshell\u4e0bcd # \u8def\u5f84\u5207\u6362 \u5c11\u7528 os.chdir(\"E:\\practice\") # \u8fd4\u56de\u5f53\u524d\u76ee\u5f55: ('.') # os.curdir # \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u7684\u7236\u76ee\u5f55\u5b57\u7b26\u4e32\u540d\uff1a('..') # os.pardir \u81ea\u5df1\u603b\u7ed3\u4e86\u51e0\u7bc7\u76f8\u5173\u7684\u535a\u5ba2 os.walk\u8bf4\u660e \u5173\u4e8e\u6587\u4ef6\u8def\u5f84\u7684\u751f\u6210 Python3 \u6587\u4ef6\u7684\u91cd\u547d\u540d \u6c42\u6587\u4ef6\u5939\u5927\u5c0f\u4e0e\u5220\u9664\u6587\u4ef6\u5939\uff1a\u6587\u4ef6\u5939\u4e2d\u6709\u5b50\u6587\u4ef6\u5939\u4e0e\u6587\u4ef6\uff0c\u5b50\u6587\u4ef6\u5939\u4e2d\u6709\u6587\u4ef6 rename\u65b9\u6cd5\u5b9e\u73b0\u6587\u4ef6\u65b0\u5185\u5bb9\u66ff\u6362\u65e7\u5185\u5bb9 \u5c06\u6587\u4ef6 file_new_path \u4e2d\u7684\u5185\u5bb9\u66ff\u6362\u5230 file_path \u4e2d\u5e76\u4e14\u4e0d\u4fee\u6539 file_path \u7684\u6587\u4ef6\u540d\u3002 \u6700\u540e\u9ed8\u8ba4\u4f1a\u5220\u6389 file_new_path \u8fd9\u4e2a\u6587\u4ef6\u3002 import os ### \u6d4b\u8bd5\uff1afile_new_path\u4e2d\u5b58\u7684\u662f\u65b0\u5185\u5bb9\uff0cfile_path\u4e2d\u5b58\u7684\u662f\u65e7\u5185\u5bb9\uff0c\u9700\u8981\u628a\u65b0\u5185\u5bb9\u66ff\u6362\u5230\u65e7\u5185\u5bb9\u4e2d\uff0c\u4f46\u662f\u6587\u4ef6\u540d\u8fd8\u5f97\u662ffile_path\u7684\uff01 file_path = \"/Users/wanghongwei/file.txt\" file_new_path = \"/Users/wanghongwei/file_new.txt\" with open(file_path,\"r\") as f1: file_msg = f1.read() with open(file_new_path,\"r\") as f2: file_new_msg = f2.read() print(\"file_msg>>>\",file_msg) \"\"\" file_msg>>> file file file \"\"\" print(\"file_new_msg>>>\",file_new_msg) \"\"\" file_new_msg>>> file_new file_new file_new \"\"\" # \u4fee\u6539 + \u66ff\u6362 \u2014\u2014 \u53ea\u5728mac/linux\u4e0b\u53ef\u76f4\u63a5\u7528rename os.rename(file_new_path,file_path) print(\"\u65b0\u7684file_path\u7684\u503c\uff1a\",file_path) \"\"\" \u65b0\u7684file_path\u7684\u503c\uff1a /Users/wanghongwei/file.txt \"\"\" ### \u91cd\u65b0\u6253\u5f00file_path\u4e2d\u7684\u5185\u5bb9\u770b\u770b\uff1a with open(file_path,\"r\") as f3: file_msg = f3.read() print(\"\u65b0\u7684file_path\u4e2d\u7684\u5185\u5bb9\uff1a\",file_msg) # \u6587\u4ef6\u5185\u5bb9\u88ab\u66ff\u6362\u4e86 \"\"\" \u65b0\u7684file_path\u4e2d\u7684\u5185\u5bb9\uff1a file_new file_new file_new \"\"\" ##### \u6700\u540e\u53ef\u4ee5\u770b\u5230\uff0cfile_new_path\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u88ab\u7cfb\u7edf\u9ed8\u8ba4\u5220\u6389\u4e86\uff01\uff01\uff01","title":"03 os\u6a21\u5757"},{"location":"python\u57fa\u7840/os\u6a21\u5757/#os","text":"os\u6a21\u5757\u662fPython\u5185\u7f6e\u7684\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4ea4\u4e92\u7684\u4e00\u4e2a\u6a21\u5757\u3002","title":"os\u6a21\u5757"},{"location":"python\u57fa\u7840/os\u6a21\u5757/#_1","text":"import os #\u9012\u5f52\u521b\u5efa\u6587\u4ef6 os.makedirs('app/a/b/c') #\u9012\u5f52\u5220\u9664\u6587\u4ef6\uff0c\u5f53\u8fd9\u4e2a\u8981\u5220\u9664\u7684\u76ee\u5f55\u91cc\u9762\u6709\u6587\u4ef6\uff0c\u5c31\u505c\u6b62\u5220\u9664 os.removedirs('app/a/b/c') #\u521b\u5efa\u5355\u4e2a\u76ee\u5f55 os.mkdir('app/a/cc') #\u5220\u9664\u5355\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u76ee\u5f55\u91cc\u6709\u4e1c\u897f\u5c31\u62a5\u9519\uff0c\u4e0d\u5220\u9664 os.rmdir('app/a/cc') #\u67e5\u770b\u67d0\u4e2a\u76ee\u5f55\u4e0b\u7684\u5185\u5bb9 \u2014\u2014\u2014\u2014 \u5f88\u5e38\u7528 l = os.listdir('app/a') print(l) # \u5220\u9664\uff0c\u5220\u9664\u4e86\u5c31\u4e0d\u80fd\u6062\u590d os.remove(file_path) # \u4fee\u6539\u6587\u4ef6\u7684\u540d\u5b57 os.rename(file_path)","title":"\u6587\u4ef6\u5939\u4e0e\u6587\u4ef6\u76f8\u5173\u64cd\u4f5c"},{"location":"python\u57fa\u7840/os\u6a21\u5757/#_2","text":"''' \u5fc5\u4f1a\u7684\uff1a os.path.join os.path.basedir os.path.abspath os.path.basename os.path.dirname os.remove os.rename os.listdir ''' # \u5c06\u591a\u4e2a\u8def\u5f84\u7ec4\u5408\u540e\u8fd4\u56de\uff0c\u7b2c\u4e00\u4e2a\u7edd\u5bf9\u8def\u5f84\u4e4b\u524d\u7684\u53c2\u6570\u5c06\u88ab\u5ffd\u7565 s = os.path.join(r'E:\\practice',r'app',r'a') print(s) #E:\\practice\\app\\a ##\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84 ***** print(os.path.abspath('app')) #E:\\practice\\app #\u8fd4\u56depath\u7684\u76ee\u5f55\u3002\u5176\u5b9e\u5c31\u662fos.path.split(path)\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 print(os.path.dirname(r'E:\\practice\\app')) #E:\\practice #\u8fd4\u56depath\u6700\u540e\u7684\u6587\u4ef6\u540d\u3002\u5982\u4f55path\u4ee5\uff0f\u6216\\\u7ed3\u5c3e\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fd4\u56de\u7a7a\u503c\uff0c\u5373os.path.split(path)\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002 ***** print(os.path.basename(r'E:\\practice\\app')) #app ### \u5982\u679cpath\u5b58\u5728\uff0c\u8fd4\u56deTrue\uff1b\u5982\u679cpath\u4e0d\u5b58\u5728\uff0c\u8fd4\u56deFalse print(os.path.exists(r'E:\\practice\\app')) ##\u5c06\u8fd9\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\u5206\u6210\u76ee\u5f55\u4e0e\u6587\u4ef6\uff0c\u6ce8\u610f\u52a0r print(os.path.split(r'E:\\practice\\app')) #('E:\\\\practice\\\\old_boy\\\\day14-\u6a21\u5757', 'app') # \u5982\u679cpath\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd4\u56deTrue print(os.path.isabs(r'E:\\practice\\app'))","title":"\u8def\u5f84\u76f8\u5173"},{"location":"python\u57fa\u7840/os\u6a21\u5757/#_3","text":"#\u8fd4\u56depath\u7684\u5927\u5c0f<br></em> #\u5b9e\u9645\u4e0a\u83b7\u53d6\u7684\u662f\u6587\u4ef6\u7684\u5927\u5c0f\uff0c # \u5751\uff1a\u83b7\u53d6\u76ee\u5f55\u5927\u5c0f\u7684\u65f6\u5019\u2014\u2014\u2014\u2014 # \u4e00\u822c\u83b7\u53d6\u76ee\u5f55\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u5c06\u91cc\u9762\u6240\u6709\u6587\u4ef6\u7684\u5927\u5c0f\u7d2f\u52a0\uff01\uff01\uff01 print('\u76ee\u5f55\u5927\u5c0f\uff1a',os.path.getsize('E:\\practice')) print('\u6587\u4ef6\u5927\u5c0f\uff1a',os.path.getsize('E:\\practice\\p')) ## \u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173 print(os.sep) # \\ print(repr(os.sep)) # '\\\\' # \u6362\u884c\u7b26 print(repr(os.linesep))#'\\r\\n' #\u73af\u5883\u53d8\u91cf\u7684\u5206\u5272 print(repr(os.pathsep)) #';' ### # print(os.system('dir'))#\u4e2d\u6587\u4e71\u7801 # \u5728\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\u53ef\u4ee5\u4e0b\u53d1\u64cd\u4f5c\u7cfb\u7edf\u7684\u6307\u4ee4 # \u5728linux\u7cfb\u7edf\u4e0a\u76f8\u5f53\u4e8e\u53d1shell\u547d\u4ee4 ***** print(os.popen('dir').read()) #\u83b7\u53d6\u7cfb\u7edf\u73af\u5883\u53d8\u91cf # print(os.environ) # \u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u5373\u5f53\u524dpython\u811a\u672c\u5de5\u4f5c\u7684\u76ee\u5f55\u8def\u5f84 *** print(os.getcwd()) # \u6539\u53d8\u5f53\u524d\u811a\u672c\u5de5\u4f5c\u76ee\u5f55\uff1b\u76f8\u5f53\u4e8eshell\u4e0bcd # \u8def\u5f84\u5207\u6362 \u5c11\u7528 os.chdir(\"E:\\practice\") # \u8fd4\u56de\u5f53\u524d\u76ee\u5f55: ('.') # os.curdir # \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u7684\u7236\u76ee\u5f55\u5b57\u7b26\u4e32\u540d\uff1a('..') # os.pardir","title":"\u5176\u4ed6"},{"location":"python\u57fa\u7840/os\u6a21\u5757/#_4","text":"os.walk\u8bf4\u660e \u5173\u4e8e\u6587\u4ef6\u8def\u5f84\u7684\u751f\u6210 Python3 \u6587\u4ef6\u7684\u91cd\u547d\u540d \u6c42\u6587\u4ef6\u5939\u5927\u5c0f\u4e0e\u5220\u9664\u6587\u4ef6\u5939\uff1a\u6587\u4ef6\u5939\u4e2d\u6709\u5b50\u6587\u4ef6\u5939\u4e0e\u6587\u4ef6\uff0c\u5b50\u6587\u4ef6\u5939\u4e2d\u6709\u6587\u4ef6","title":"\u81ea\u5df1\u603b\u7ed3\u4e86\u51e0\u7bc7\u76f8\u5173\u7684\u535a\u5ba2"},{"location":"python\u57fa\u7840/os\u6a21\u5757/#rename","text":"\u5c06\u6587\u4ef6 file_new_path \u4e2d\u7684\u5185\u5bb9\u66ff\u6362\u5230 file_path \u4e2d\u5e76\u4e14\u4e0d\u4fee\u6539 file_path \u7684\u6587\u4ef6\u540d\u3002 \u6700\u540e\u9ed8\u8ba4\u4f1a\u5220\u6389 file_new_path \u8fd9\u4e2a\u6587\u4ef6\u3002 import os ### \u6d4b\u8bd5\uff1afile_new_path\u4e2d\u5b58\u7684\u662f\u65b0\u5185\u5bb9\uff0cfile_path\u4e2d\u5b58\u7684\u662f\u65e7\u5185\u5bb9\uff0c\u9700\u8981\u628a\u65b0\u5185\u5bb9\u66ff\u6362\u5230\u65e7\u5185\u5bb9\u4e2d\uff0c\u4f46\u662f\u6587\u4ef6\u540d\u8fd8\u5f97\u662ffile_path\u7684\uff01 file_path = \"/Users/wanghongwei/file.txt\" file_new_path = \"/Users/wanghongwei/file_new.txt\" with open(file_path,\"r\") as f1: file_msg = f1.read() with open(file_new_path,\"r\") as f2: file_new_msg = f2.read() print(\"file_msg>>>\",file_msg) \"\"\" file_msg>>> file file file \"\"\" print(\"file_new_msg>>>\",file_new_msg) \"\"\" file_new_msg>>> file_new file_new file_new \"\"\" # \u4fee\u6539 + \u66ff\u6362 \u2014\u2014 \u53ea\u5728mac/linux\u4e0b\u53ef\u76f4\u63a5\u7528rename os.rename(file_new_path,file_path) print(\"\u65b0\u7684file_path\u7684\u503c\uff1a\",file_path) \"\"\" \u65b0\u7684file_path\u7684\u503c\uff1a /Users/wanghongwei/file.txt \"\"\" ### \u91cd\u65b0\u6253\u5f00file_path\u4e2d\u7684\u5185\u5bb9\u770b\u770b\uff1a with open(file_path,\"r\") as f3: file_msg = f3.read() print(\"\u65b0\u7684file_path\u4e2d\u7684\u5185\u5bb9\uff1a\",file_msg) # \u6587\u4ef6\u5185\u5bb9\u88ab\u66ff\u6362\u4e86 \"\"\" \u65b0\u7684file_path\u4e2d\u7684\u5185\u5bb9\uff1a file_new file_new file_new \"\"\" ##### \u6700\u540e\u53ef\u4ee5\u770b\u5230\uff0cfile_new_path\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u88ab\u7cfb\u7edf\u9ed8\u8ba4\u5220\u6389\u4e86\uff01\uff01\uff01","title":"rename\u65b9\u6cd5\u5b9e\u73b0\u6587\u4ef6\u65b0\u5185\u5bb9\u66ff\u6362\u65e7\u5185\u5bb9"},{"location":"python\u57fa\u7840/pymysql/","text":"\u4e2a\u4eba\u535a\u5ba2 pymysql\u5e38\u7528\u5230\u7684\u65b9\u6cd5 pymysql\u63d2\u5165\u6570\u636e\u7684\u65b9\u6cd5 pymysql\u94fe\u63a5\u6c60\u3001\u4e8b\u7269\u7684\u4f7f\u7528\u6d45\u8c08 pymysql\u5f80\u6570\u636e\u5e93\u4e2d\u63d2\u5165datetime\u7c7b\u578b\u7684\"\u7a7a\u6570\u636e\"\u4e0eMySQL5.7sql_mode\u7684\u4e00\u4e2a\u95ee\u9898","title":"17 \u64cd\u4f5c\u6570\u636e\u5e93pymysql\u6a21\u5757"},{"location":"python\u57fa\u7840/pymysql/#_1","text":"pymysql\u5e38\u7528\u5230\u7684\u65b9\u6cd5 pymysql\u63d2\u5165\u6570\u636e\u7684\u65b9\u6cd5 pymysql\u94fe\u63a5\u6c60\u3001\u4e8b\u7269\u7684\u4f7f\u7528\u6d45\u8c08 pymysql\u5f80\u6570\u636e\u5e93\u4e2d\u63d2\u5165datetime\u7c7b\u578b\u7684\"\u7a7a\u6570\u636e\"\u4e0eMySQL5.7sql_mode\u7684\u4e00\u4e2a\u95ee\u9898","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u57fa\u7840/random/","text":"\u57fa\u672c\u64cd\u4f5c import random # random.random() print(random.random())#\u83b7\u53d6\u7684\u662f0-1\u4e4b\u95f4\u7684\u968f\u673a\u5c0f\u6570 #0-2\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u90fd\u5305\u542b\uff0c\u95ed\u533a\u95f4 print(random.randint(0,2)) #0--5\u4e4b\u95f4\u7684\u5947\u6570\uff0c\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 print(random.randrange(1,5,2)) lis = ['whw','wanghw','aaa'] #\u968f\u673a\u4ece\u5217\u8868\u4e2d\u9009\u62e9 print(random.choice(lis)) #\u968f\u673a\u9009\u62e9\u4e24\u4e2a\uff0c\u4e24\u6b21\u53ef\u4ee5\u662f\u91cd\u590d\u7684\uff01 ['whw', 'whw'] print(random.choices(lis,k=2)) #\u968f\u673a\u90092\u4e2a\uff0c\u6ca1\u6709\u91cd\u590d\uff01 ['wanghw', 'aaa'] print(random.sample(lis,k=2)) #\u53d8\u6210\u968f\u673a\u6392\u5e8f\u7684 print(random.shuffle(lis)) # \u6ce8\u610f\u8fd9\u662f\u4e2a\u64cd\u4f5c\uff01\u8fd4\u56de\u7684\u662f\uff1aNone print(lis) \u4e0estring\u6a21\u5757\u7ed3\u5408\u751f\u6210\u968f\u673a\u9a8c\u8bc1\u7801 # -*- coding:utf-8 -*- import random import string print(string.ascii_letters) #abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) #abcdefghijklmnopqrstuvwxyz print(string.ascii_uppercase) #ABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.digits) #0123456789 print(string.hexdigits) #0123456789abcdefABCDEF print(string.octdigits) #01234567 s = random.sample(string.ascii_letters+string.digits,5) print(s) #['i', '3', 'E', 'R', 'v'] print(''.join(s)) #i3ERv","title":"08 random\u6a21\u5757"},{"location":"python\u57fa\u7840/random/#_1","text":"import random # random.random() print(random.random())#\u83b7\u53d6\u7684\u662f0-1\u4e4b\u95f4\u7684\u968f\u673a\u5c0f\u6570 #0-2\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u90fd\u5305\u542b\uff0c\u95ed\u533a\u95f4 print(random.randint(0,2)) #0--5\u4e4b\u95f4\u7684\u5947\u6570\uff0c\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 print(random.randrange(1,5,2)) lis = ['whw','wanghw','aaa'] #\u968f\u673a\u4ece\u5217\u8868\u4e2d\u9009\u62e9 print(random.choice(lis)) #\u968f\u673a\u9009\u62e9\u4e24\u4e2a\uff0c\u4e24\u6b21\u53ef\u4ee5\u662f\u91cd\u590d\u7684\uff01 ['whw', 'whw'] print(random.choices(lis,k=2)) #\u968f\u673a\u90092\u4e2a\uff0c\u6ca1\u6709\u91cd\u590d\uff01 ['wanghw', 'aaa'] print(random.sample(lis,k=2)) #\u53d8\u6210\u968f\u673a\u6392\u5e8f\u7684 print(random.shuffle(lis)) # \u6ce8\u610f\u8fd9\u662f\u4e2a\u64cd\u4f5c\uff01\u8fd4\u56de\u7684\u662f\uff1aNone print(lis)","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"python\u57fa\u7840/random/#string","text":"# -*- coding:utf-8 -*- import random import string print(string.ascii_letters) #abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) #abcdefghijklmnopqrstuvwxyz print(string.ascii_uppercase) #ABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.digits) #0123456789 print(string.hexdigits) #0123456789abcdefABCDEF print(string.octdigits) #01234567 s = random.sample(string.ascii_letters+string.digits,5) print(s) #['i', '3', 'E', 'R', 'v'] print(''.join(s)) #i3ERv","title":"\u4e0estring\u6a21\u5757\u7ed3\u5408\u751f\u6210\u968f\u673a\u9a8c\u8bc1\u7801"},{"location":"python\u57fa\u7840/re\u6a21\u5757/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0ePython\u4e2dre\u6a21\u5757\u7684\u4f7f\u7528 \u722c\u866b\u4e2d \u6b63\u5219\u8868\u8fbe\u5f0f \u4f7f\u7528\u7684\u975e\u5e38\u591a\uff0c\u7528Python\u505a\u7684\u8bdd\u4f1a\u7528\u5230 re\u6a21\u5757 \u3002 \u672c\u6587\u603b\u7ed3\u4e00\u4e0b \u6b63\u5219\u8868\u8fbe\u5f0f \u4e0e re\u6a21\u5757 \u7684\u57fa\u7840\u4e0e\u4f7f\u7528\u3002 \u53e6\u5916\uff0c\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e2a \u5728\u7ebf\u6d4b\u8bd5\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u795e\u5668\u7f51\u7ad9 \uff1a http://tool.chinaz.com/regex \u6b63\u5219\u8868\u8fbe\u5f0f \u4f7f\u7528\u573a\u666f \u5173\u4e8e \u6b63\u5219\u8868\u8fbe\u5f0f \u7684\u57fa\u672c\u6982\u5ff5\u8fd9\u91cc\u5c31\u4e0d\u8d58\u8ff0\u4e86\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u5404\u79cd\u767e\u79d1\u91cc\u67e5\u627e\u5b83\u7684\u5b9a\u4e49\u3002\u6b63\u5219\u7684 \u4f7f\u7528\u573a\u666f \u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\uff1a \u4e00\u662f\uff1a\u68c0\u6d4b\u67d0\u4e00\u6bb5\u5b57\u7b26\u4e32\u662f\u5426\u7b26\u5408\u89c4\u5219\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\"\u6821\u9a8c\" \u4e8c\u662f\uff1a\u4ece\u4e00\u5927\u6bb5\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7b26\u5408\u89c4\u5219\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\"\u68c0\u7d22\" \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u4f7f\u7528\u573a\u666f\uff0c\u6211\u4eec\u5728\u767b\u9646\u6216\u8005\u6ce8\u518c\u65f6\u586b\u5199\u90ae\u7bb1\u3001\u624b\u673a\u53f7\u7b49\u5185\u5bb9\u7684\u65f6\u5019\u7ecf\u5e38\u4f1a\u89c1\u5230\u2014\u2014\u5e95\u5c42\u7684\u5b9e\u73b0\u601d\u8def\u5c31\u662f\u5229\u7528\u6b63\u5219\u201c\u6821\u9a8c\u201d\u6211\u4eec\u8f93\u5165\u7684\u5185\u5bb9\u662f\u5426\u201c\u89c4\u8303\u201d\u3002 \u53e6\u5916\uff0c\u6b63\u5219\u7684\u201c\u68c0\u7d22\u201d\u529f\u80fd\u5927\u91cf\u4f7f\u7528\u5728 \u722c\u866b \u91cc\uff0c\u7b80\u5355\u7684\u8bf4\uff0c \u722c\u866b \u80fd\u4ece\u4e00\u4e2a\u7f51\u7ad9\u5927\u91cf\u7684\u6570\u636e\u4e2d\u5f97\u5230\u7528\u6237\u60f3\u8981\u7684\u5185\u5bb9\u7b49\u7b49...... \u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u53ea\u662f\u7528\u6765\u5904\u7406\u5b57\u7b26\u4e32\u7684 \u5143\u5b57\u7b26 \u4e00\uff1a\u53ef\u4ee5\u7075\u6d3b\u4f7f\u7528\u7684\u5143\u5b57\u7b26\uff1a[] \u4e0e [^] \uff081\uff09\u6570\u5b57 [0-9] \uff082\uff09\u5c0f\u5199\u5b57\u6bcd [a-z] \uff083\uff09\u5927\u5199\u5b57\u6bcd [A-Z] \uff084\uff09\u5927\u5c0f\u5199\u5b57\u6bcd [A-Za-z] \uff085\uff09\u5927\u5c0f\u5199\u5b57\u6bcd+\u6570\u5b57 [0-9A-Za-z] \uff086\uff09\u6ce8\u610f\u4e00\u4e2a\u5b57\u7b26\u7ec4\u4e0d\u9650\u5236\u4e2a\u6570\uff1a\u5339\u914d\u4e09\u4e2a\u7684\u8bdd\uff1a[0-9A-Za-z][0-9A-Za-z][0-9A-Za-z] \uff087\uff09\u5927\u5c0f\u5199\u5b57\u6bcd+ _\u4e0e% [A-Za-z_%] \uff088-1\uff09\u5339\u914d1-5 [1\\-5] \u7528\u8f6c\u4e49\u7b26\uff0c- \u6709\u7279\u6b8a\u542b\u4e49 \uff088-2\uff09\u5b57\u7b26\u7ec4\u4e2d - \u662f\u6709\u7279\u6b8a\u610f\u4e49\u7684\uff0c\u9700\u8981\u4f7f\u7528\\\u4f5c\u4e3a\u8f6c\u4e49\u7b26\uff01 \uff089\uff09[^123]\u2014\u2014\u9664\u4e86123\u90fd\u5339\u914d\uff0c\u5305\u62ec\u6362\u884c \u4e8c\uff1a\u5339\u914d\u5b57\u7b26 \uff081\uff09\\d\u2014\u2014\u6240\u6709\u6570\u5b57 \uff082\uff09\\w\u2014\u2014\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf \uff083\uff09\\s\u2014\u2014\u7a7a\u767d \uff084\uff09\u7a7a\u683c\u5339\u914d\u7a7a\u683c \uff085\uff09\\t\u2014\u2014\u5236\u8868\u7b26 \uff086\uff09\\n\u2014\u2014\u6362\u884c\u7b26 \uff087\uff09\\b\u2014\u2014\u5355\u8bcd\u7684\u8fb9\u754c o\\b\u2014\u2014hello\u7684'o'(o\u662f\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a) \\bo\u2014\u2014ok\u7684'o'(o\u662f\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a) \uff088\uff09\\W\u2014\u2014\u9664\u4e86\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf \uff089\uff09\\D\u2014\u2014\u9664\u4e86\u6570\u5b57 \uff0810\uff09\\S\u2014\u2014\u9664\u4e86\u7a7a\u767d\u7b26 \uff0811\uff09.\u2014\u2014\u5339\u914d\u9664\u4e86\u6362\u884c\u7b26\u6240\u6709\u7684 \uff0812\uff09[\\D\\d]\u3001[\\W\\w]\u3001[\\s\\S]\u2014\u2014\u5339\u914d\u6240\u6709\u7684 \uff0813\uff09[^123]\u2014\u2014\u9664\u4e86123\u90fd\u5339\u914d\uff0c\u5305\u62ec\u6362\u884c \uff0814\uff09^\u2014\u2014\u5f00\u59cb\u5b57\u7b26 \uff0815\uff09$\u2014\u2014\u7ed3\u675f\u5b57\u7b26 \uff0816\uff09^.....$\u2014\u2014\u5f00\u59cb+\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u662f5\u4e2a\u9664\u4e86\u6362\u884c\u7684\u7b26\u53f7 \uff0817\uff09|\u2014\u2014\u6216 \u957f\u7684\u653e\u5728\u524d\u9762\uff01 \uff0818\uff09()\u2014\u2014\u5206\u7ec4 www\\.(baidu|oldboy)\\.com \u5339\u914dwww.baidu.com\u6216\u8005www.oldboy.com \u91cf\u8bcd \u91cf\u8bcd\u7528\u6765\u9650\u5236 \u5339\u914d\u7684\u6b21\u6570 \uff081\uff09{n}\u2014\u2014\u5339\u914dn\u6b21 \uff082\uff09{n,}\u2014\u2014\u5339\u914d\u81f3\u5c11n\u6b21 \uff083\uff09{n,m}\u2014\u2014\u5339\u914dn\u5230m\u6b21 \uff084\uff09+\u2014\u2014\u4e00\u6b21\u6216\u8005\u591a\u6b21 \u5339\u914d\u5c0f\u6570\u70b9\u7684\u524d\u540e\u5fc5\u987b\u6709\u6570 \\d+\\.\\d+ \uff085\uff09*\u2014\u20140\u6b21\u6216\u8005\u591a\u6b21 \u5339\u914d\u6574\u6570\uff1a\u7b2c\u4e00\u4f4d\u662f1-9\u4e0d\u8981\u662f0\uff1a [1-9]\\d*|0 \uff086\uff09?\u2014\u20140\u6b21\u6216\u8005\u4e00\u6b21 \u5339\u914d\u4e00\u4e2a\u6574\u6570\u6216\u8005\u5c0f\u6570\uff1a \\d+(\\.\\d+)? \u5e38\u7528\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5c0f\u7ed3 '.' \u9ed8\u8ba4\u5339\u914d\u9664\\n\u4e4b\u5916\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u82e5\u6307\u5b9aflag DOTALL,\u5219\u5339\u914d\u4efb\u610f\u5b57\u7b26\uff0c\u5305\u62ec\u6362\u884c '^' \u5339\u914d\u5b57\u7b26\u5f00\u5934\uff0c\u82e5\u6307\u5b9aflags MULTILINE,\u8fd9\u79cd\u4e5f\u53ef\u4ee5\u5339\u914d\u4e0a(r\"^a\",\"\\nabc\\neee\",flags=re.MULTILINE) '$' \u5339\u914d\u5b57\u7b26\u7ed3\u5c3e\uff0c\u82e5\u6307\u5b9a\uff1aflags MULTILINE ,re.search('foo.$','foo1\\nfoo2\\n',re.MULTILINE).group() \u4f1a\u5339\u914d\u5230foo1 '*' \u5339\u914d \u53f7\u524d\u7684\u5b57\u7b260\u6b21\u6216\u591a\u6b21\uff0c re.search('a ','aaaabac') \u7ed3\u679c'aaaa' '+' \u5339\u914d\u524d\u4e00\u4e2a\u5b57\u7b261\u6b21\u6216\u591a\u6b21\uff0cre.findall(\"ab+\",\"ab+cd+abb+bba\") \u7ed3\u679c['ab', 'abb'] '?' \u5339\u914d\u524d\u4e00\u4e2a\u5b57\u7b261\u6b21\u62160\u6b21 ,re.search('b?','alex').group() \u5339\u914db 0\u6b21 '{m}' \u5339\u914d\u524d\u4e00\u4e2a\u5b57\u7b26m\u6b21 ,re.search('b{3}','alexbbbs').group() \u5339\u914d\u5230'bbb' '{n,m}' \u5339\u914d\u524d\u4e00\u4e2a\u5b57\u7b26n\u5230m\u6b21\uff0cre.findall(\"ab{1,3}\",\"abb abc abbcbbb\") \u7ed3\u679c'abb', 'ab', 'abb'] '|' \u5339\u914d|\u5de6\u6216|\u53f3\u7684\u5b57\u7b26\uff0cre.search(\"abc|ABC\",\"ABCBabcCD\").group() \u7ed3\u679c'ABC' '(...)' \u5206\u7ec4\u5339\u914d\uff0c re.search(\"(abc){2}a(123|45)\", \"abcabca456c\").group() \u7ed3\u679c\u4e3a'abcabca45' '\\A' \u53ea\u4ece\u5b57\u7b26\u5f00\u5934\u5339\u914d\uff0cre.search(\"\\Aabc\",\"alexabc\") \u662f\u5339\u914d\u4e0d\u5230\u7684\uff0c\u76f8\u5f53\u4e8ere.match('abc',\"alexabc\") \u6216^ '\\Z' \u5339\u914d\u5b57\u7b26\u7ed3\u5c3e\uff0c\u540c$ '\\d' \u5339\u914d\u6570\u5b570-9 '\\D' \u5339\u914d\u975e\u6570\u5b57 '\\w' \u5339\u914d[A-Za-z0-9] '\\W' \u5339\u914d\u975e[A-Za-z0-9] '\\s' \u5339\u914d\u7a7a\u767d\u5b57\u7b26\u3001\\t\u3001\\n\u3001\\r , re.search(\"\\s+\",\"ab\\tc1\\n3\").group() \u7ed3\u679c '\\t' (?P<name>...) \u5206\u7ec4\u5339\u914d re.search(\"(?P<province>[0-9]{4})(?P<city>[0-9]{2})(?P<birthday>[0-9]{4})\",\"371481199306143242\").groupdict(\"city\") \u7ed3\u679c{'province': '3714', 'city': '81', 'birthday': '1993'} \u8d2a\u5a6a\u5339\u914d\u4e0e\u60f0\u6027\u5339\u914d \u5728\u6b63\u5219\u4e2d\uff0c\u9ed8\u8ba4\u7684\u5339\u914d\u6a21\u5f0f\u662f\u201c\u8d2a\u5a6a\u5339\u914d\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c \u5728\u7b26\u5408\u5339\u914d\u89c4\u5219\u7684\u524d\u63d0\u4e0b\u5c3d\u53ef\u80fd\u591a\u7684\u53bb\u5339\u914d\u5b57\u7b26 \uff0c\u4f46\u662f\u6709\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5339\u914d\u592a\u591a\u7684\u5185\u5bb9\uff0c\u53ea\u8981\u5f97\u5230\u9700\u8981\u7684\u201c\u7247\u6bb5\u201d\u5185\u5bb9\u5c31\u597d\u4e86\u3002 \u800c \u91cf\u8bcd \u662f\u5339\u914d\u591a\u6b21\u7684\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5728\u91cf\u8bcd\u7684\u540e\u9762\u52a0\u4e0a ? \u5c31\u53ef\u4ee5\u8ba9\u5339\u914d\u201c\u9002\u53ef\u800c\u6b62\u201d\u4e86\uff0c\u8fd9\u6837\u7684\u5339\u914d\u89c4\u5219\u5c31\u662f \u60f0\u6027\u5339\u914d \u8fd9\u91cc\u4e3e\u4e00\u4e2a \u8d2a\u5a6a\u5339\u914d \u4e0e \u60f0\u6027\u5339\u914d \u5bf9\u6bd4\u7684\u4f8b\u5b50\uff1a \u6709\u5b57\u7b26\u4e32\"aasdasdasdxxxxxxasdasd\"\uff0c\u73b0\u5728\u60f3\u5339\u914d\u5230x\u7ed3\u675f \uff081\uff09\u7528\"\u60f0\u6027\u5339\u914d\"\u7684\u8bdd\uff1a \u8bed\u6cd5\uff1aa.*?x \u8bf4\u660e\uff1a\u9047\u89c1\u4e00\u4e2a\u5148\u68c0\u6d4b\u662f\u4e0d\u662fx\uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u505c\u6b62\uff0c\u4e0d\u662f\u7684\u8bdd\u5c31\u5339\u914d \u7ed3\u679c\uff1aaasdasdasdx \uff082\uff09\u9ed8\u8ba4\u7684\"\u8d2a\u5a6a\u5339\u914d\"\uff1a \u8bed\u6cd5\uff1aa.*x \u8bf4\u660e\uff1a\u8fd9\u91cc\u4f1a\u5339\u914d\u540e\u9762\u6240\u6709\u7684x \u7ed3\u679c\uff1aaasdasdasdxxxxxx \u5f53\u7136\uff0c\u4ec0\u4e48\u65f6\u5019\u7528 \u8d2a\u5a6a\u5339\u914d \u4ec0\u4e48\u65f6\u5019\u7528 \u60f0\u6027\u5339\u914d \u9700\u8981\u6211\u4eec\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u3002 re\u6a21\u5757 re\u6a21\u5757 \u662fPython\u7684\u5185\u7f6e\u6a21\u5757\uff0c\u662f\u4e13\u95e8\u7528\u6765\u5904\u7406\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5173\u9700\u6c42\u7684\u6a21\u5757\u3002 \u4f7f\u7528\u65b9\u6cd5\uff1a\u76f4\u63a5\u5728Python\u7a0b\u5e8f\u4e2dimport\u5373\u53ef\uff1a import re \u6839\u636e\u6b63\u5219\u7684\u89c4\u5219\u4ece\u4e00\u6bb5\u5185\u5bb9\u4e2d\u67e5\u627e\u7ed3\u679c findall \u627e\u5230\u6240\u6709\u7b26\u5408\u6b63\u5219\u89c4\u5219\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\uff1a ret = re.findall('\\d+','whw123w1233') print(ret) #\u7ed3\u679c\uff1a ['123', '1233'] search \u627e\u5230\u7b2c\u4e00\u4e2a\uff0c\u8fd4\u56de \u7ed3\u679c\u96c6 \uff0c\u9700\u8981\u901a\u8fc7group\u65b9\u6cd5\u53d6\u503c\u3002\u6ca1\u53d6\u5230\u7684\u8bdd\u8fd4\u56deNone\uff0c\u6b64\u65f6\u7528group\u65b9\u6cd5\u4f1a\u62a5\u9519\uff01\u56e0\u6b64\u9700\u8981\u63d0\u524d\u5224\u65ad\u4e0b\uff1a ret = re.search('\\d+','wanghw123ww') print(ret) if ret: print(ret.group()) #\u7ed3\u679c\uff1a <_sre.SRE_Match object; span=(6, 9), match='123'> 123 match \u4ece\u5934\u5f00\u59cb\u627e\u7b2c\u4e00\u4e2a\uff0c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6\uff0c\u9700\u8981\u901a\u8fc7group\u53d6\u503c\u3002\u6ca1\u53d6\u5230\u7684\u8bdd\u8fd4\u56deNone\uff0c\u6b64\u65f6\u7528group\u65b9\u6cd5\u4f1a\u62a5\u9519\uff01\u56e0\u6b64\u9700\u8981\u63d0\u524d\u5224\u65ad\u4e0b\uff1a \u4e0b\u9762\u662f\u5339\u914d\u5230\u7ed3\u679c\u7684\uff1a ret = re.match('\\d+','23whw22a') print(ret) if ret: print(ret.group()) #\u7ed3\u679c\uff1a <_sre.SRE_Match object; span=(0, 2), match='23'> 23 \u6ca1\u6709\u5339\u914d\u5230\u7684\u8bdd\u53ef\u4ee5\u5229\u7528\u5f02\u5e38\u5904\u7406\u6216\u8005\u50cf\u4e0a\u9762\u4e00\u6837\u7684\u6761\u4ef6\u5224\u65ad\uff1a ret = re.match('\\d+','whw22a') print(ret) try: print(ret.group()) except AttributeError as e: print(e,':','\u6ca1\u6709\u5339\u914d\u5230\uff01') #\u7ed3\u679c\uff1a None 'NoneType' object has no attribute 'group' : \u6ca1\u6709\u5339\u914d\u5230\uff01 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cmatch\u7684\u8fd4\u56de\u7ed3\u679c\u4e0esearch\u662f\u4e00\u6837\u7684\uff1b\u800c\u4e14\uff0cmatch\u7684\u5339\u914d\u8bed\u6cd5\u5176\u5b9e\u5c31\u662f\u76f8\u5f53\u4e8esearch\u5728\u5176\u5339\u914d\u89c4\u5219\u4e0a\u52a0\u4e0a ^ \uff0c\u56e0\u6b64\uff1a match\u53ef\u4ee5\u88absearch\u4ee3\u66ff \uff0c\u5b9e\u9645\u4e2dmatch\u7528\u7684\u6bd4\u8f83\u5c11\u3002 re.search('^\\d+','123asd') \u7b49\u540c\u4e8e: re.match('\\d+','123asd') \u66ff\u6362\u4e0e\u5207\u5272 sub \u6211\u4eec\u53ef\u4ee5\u5229\u7528re\u6a21\u5757\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u7ed3\u5408\u8fdb\u884c\u5b57\u7b26\u4e32\u7684 \u6279\u91cf\u66ff\u6362: \u6709\u5982\u4e0b\u9700\u6c42\uff1a \u5b57\u7b26\u4e32\uff1as1 = 'wanghw123whw456'\uff0c\u5c06s1\u4e2d\u6240\u6709\u7684\u6570\u5b57\u66ff\u6362\u6210\u5b57\u7b26\u4e32\"HERO\"\u3002 \u6211\u4eec\u53ef\u4ee5\u5229\u7528re\u6a21\u5757\u7684sub\u65b9\u6cd5\u6765\u505a\uff1a s1 = 'wanghw123whw456' ss = re.sub('\\d+','HERO',s1) print(ss) #\u7ed3\u679c\uff1a wanghwHEROwhwHERO sub\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u7684\u89c4\u5219\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u88ab\u66ff\u6362\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u9700\u8981\u88ab\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\u3002\u5f53\u7136\uff0c\u806a\u660e\u7684\u4f60\u80af\u5b9a\u60f3\u5230\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u9ed8\u8ba4\u66ff\u6362\u7684\u662f\u6240\u6709\u7b26\u5408\u89c4\u5219\u7684\u5b57\u7b26\u4e32\u5440\uff01\u6211\u5982\u679c\u60f3 \u9650\u5b9a\u66ff\u6362\u7684\u6b21\u6570 \u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u7b2c\u56db\u4e2a\u53c2\u6570\uff0c\u6765\u8fbe\u5230\u9650\u5b9a\u66ff\u6362\u6b21\u6570\u7684\u4f5c\u7528\uff1a s1 = 'wanghw123whw456' ss = re.sub('\\d+','HERO',s1,1) print(ss) #\u7ed3\u679c\uff1a wanghwHEROwhw456 subn subn\u7684\u7528\u6cd5\u8ddfsub\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7 \u8fd4\u56de\u503c \u662f\u6709\u533a\u522b\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4e00\u4e0b\u770b\u770b\uff1a s1 = 'wanghw123whw456' ss = re.subn('\\d+','HERO',s1) print(ss) #\u7ed3\u679c\uff1a ('wanghwHEROwhwHERO', 2) \u5f53\u7136\u4e5f\u53ef\u4ee5\u6307\u5b9a\u66ff\u6362\u7684\u6b21\u6570\uff1a s1 = 'wanghw123whw456' ss = re.subn('\\d+','HERO',s1,1) print(ss) #\u7ed3\u679c\uff1a ('wanghwHEROwhw456', 1) \u5927\u5bb6\u53ef\u4ee5\u770b\u5230\uff0csubn\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff1a\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u66ff\u6362\u7684\u6b21\u6570\u3002 split split\u65b9\u6cd5\u4e0e\u5b57\u7b26\u4e32\u7684\u5207\u5272\u65b9\u6cd5\u4e00\u6837\uff0c\u8fd4\u56de\u7684\u4e5f\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u53ea\u4e0d\u8fc7\uff0c\u8fd9\u6b21\u6211\u4eec\u7528\u7684\u662f \u6b63\u5219\u5339\u914d\u7684\u7ed3\u679c \u8fdb\u884c\u5207\u5272\u7684\uff01 s1 = 'wanghw123whw456qwe' sq = re.split('\\d+',s1) print(sq) #\u7ed3\u679c\uff1a ['wanghw', 'whw', 'qwe'] split\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u653e\u6b63\u5219\u89c4\u5219\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u653e\u88ab\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\u3002 \u9884\u7f16\u8bd1 \u6211\u4eec\u90fd\u77e5\u9053\uff0cPython\u662f\u4e00\u79cd\u89e3\u91ca\u578b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0cPython\u7684\u4ee3\u7801\u9700\u8981\u5148\u5728\u89e3\u91ca\u5668\u4e2d\u8f6c\u6362\u4e3a\u673a\u5668\u7801\uff0c\u6700\u7ec8\u8f6c\u6362\u4e3a\u8ba1\u7b97\u673a\u80fd\u8bc6\u522b\u7684\u7f16\u7801\u624d\u80fd\u8fd0\u884c\u3002 \u5bf9\u4e8e\u6b63\u5219\u5339\u914d\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u540c\u6837\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u9700\u8981\u7528\u5230\u51e0\u5341\u6b21\u751a\u81f3\u4e0a\u767e\u6b21\u53bb\u5339\u914d\u4e00\u6bb5\u957f\u6587\u5b57\u7684\u8bdd\uff0c\u7528\u666e\u901a\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u8fd0\u884c\u51e0\u5341\u6b21\u751a\u81f3\u4e0a\u767e\u6b21\u6765\u8fdb\u884c\u6bcf\u4e00\u6b21\u7684\u5339\u914d\u3002\u8fd9\u6837\u5927\u5927\u7684\u964d\u4f4e\u4e86\u6211\u4eec\u7a0b\u5e8f\u7684\u6548\u7387\uff0c\u662f\u6211\u4eec\u6700\u4e0d\u613f\u610f\u770b\u5230\u7684\uff01 \u800c\u5728Python\u4e2d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 \u9884\u7f16\u8bd1 \u7684\u65b9\u6cd5\u53bb\u89e3\u51b3\u8fd9\u4e2a\u96be\u9898\u3002 \u6240\u8c13\u7684 \u9884\u7f16\u8bd1 \uff0c\u5728\u6b63\u5219\u4e2d\u6211\u4eec\u5b9e\u9645\u7528\u5728\u4e0b\u9762\u8fd9\u6837\u7684\u573a\u666f\u4e2d\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u7ecf\u5e38\u88ab\u91cd\u590d\u4f7f\u7528\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8fdb\u884c\u4e00\u6b21\u7f16\u8bd1\uff0c \u5c06\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u9700\u8981\u505a\u7684\u4e8b\u9884\u5148\u7f16\u8bd1 \uff0c\u8fd9\u6837\uff0c\u4e4b\u540e\u53ea\u8981\u7528\u5230\u4e86\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6211\u4eec\u53ef\u4ee5\u5c06 \u7f16\u8bd1\u597d\u7684\u7ed3\u679c \u76f4\u63a5\u62ff\u6765\u7528\u5c31\u884c\u4e86\uff0c\u9171\u7d2b\u5927\u5927\u7684\u7701\u4e86\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\uff01 \u9884\u7f16\u8bd1\u7684\u4f7f\u7528\u4e3e\u4f8b\uff1a \u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u60f3\u5339\u914d\u4e09\u6bb5(\u5b9e\u9645\u4e2d\u53ef\u80fd\u662f\u4e0a\u767e\u4e2a)\u7528\u5230\u76f8\u540c\u89c4\u5219\u5339\u914d\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\u3002\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u89c4\u5219\u8fdb\u884c\u9884\u7f16\u8bd1\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e2a\u9884\u7f16\u8bd1\u7684\u7ed3\u679c\u53bb\u5339\u914d\u6bcf\u4e00\u6bb5\u9700\u8981\u5339\u914d\u7684\u5b57\u7b26\u4e32\uff1a ss = 'wangh123qwe3123' ss1 = 'wangh123qwe3123312' ss2 = 'wangh123qwe3123qwqasd5412' par = re.compile('\\d+') print(par) rets = par.findall(ss) rets1 = par.findall(ss1) rets2 = par.findall(ss2) print(rets) print(rets1) print(rets2) \u770b\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u806a\u660e\u7684\u4f60\u53c8\u53d1\u73b0\u95ee\u9898\u4e86\uff01\u8fd9\u6837\u56fa\u7136\u964d\u4f4e\u4e86 \u65f6\u95f4\u590d\u6742\u5ea6 \uff0c\u4f46\u662f\uff0c\u5982\u679c\u5b9e\u9645\u4e2d\u6709\u51e0\u4e07\u4e2a\u5927\u5b57\u7b26\u4e32\uff0c\u4f60\u8fd9\u6837\u4e00\u4e0b\u5b50\u8bfb\u53d6\u51fa\u6765\uff0c\u5185\u5b58\u4e0d\u662f\u76f4\u63a5\u7206\u70b8\u4e86\u4e48\uff01 \u5bf9\uff01\u6ca1\u9519\uff0c\u9488\u5bf9\u964d\u4f4e \u7a7a\u95f4\u590d\u6742\u5ea6 \u7684\u95ee\u9898\uff0cPython\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u53e6\u5916\u4e00\u4e2a\u65b9\u6cd5\u2014\u2014\u2014\u2014 finditer finditer \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cfinditer\u65b9\u6cd5\u5f97\u5230\u7684\u662f\u4e00\u4e2a \u8fed\u4ee3\u5668 \u3002\u4e0b\u9762\u6211\u4eec\u6a21\u62df\u5339\u914d10\u4e2a\u76f8\u540c\u5b57\u7b26\u4e32\u7684\u4f8b\u5b50\uff1a re= re.finditer('\\d+','23adq9009qwe'*10) print(re) for i in re: print(i) print(i.group()) #\u7ed3\u679c(\u53ea\u62ff\u4e00\u4e2a\u7ed3\u679c\u4e3e\u4f8b)\uff1a #\u7b2c\u4e00\u4e2a\u62ff\u5230\u7684\u662fre\u2014\u2014\u8fed\u4ee3\u5668\u5bf9\u8c61 <callable_iterator object at 0x000001157E942940> #\u904d\u5386re\u4e2d\u62ff\u5230\u7684\u662f\"\u7ed3\u679c\u96c6\" <_sre.SRE_Match object; span=(0, 2), match='23'> #\u6700\u7ec8\u7684\u7ed3\u679c\u9700\u8981\u7528group()\u65b9\u6cd5\u53d6\u5230\uff1a 23 \u4e0b\u9762\u5c31\u6765\u4e00\u53d1 compile\u4e0efinditer\u7ed3\u5408\u540c\u65f6\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u65b9\u6cd5 \uff1a par = re.compile('\\d+') ret = par.finditer('wanghe123asdh2312asd33'*10) print(ret) for i in ret: print(i.group()) #\u7ed3\u679c(\u53ea\u62ff\u524d1\u7ec4)\uff1a <callable_iterator object at 0x000001DA20362940> 123 2312 33 \u201c\u5206\u7ec4\u201d\u4e0ere\u6a21\u5757\u7684\u7ed3\u5408\u4f7f\u7528 \u5728\u5b9e\u9645\u4e2d\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u201c\u5206\u7ec4\u201d\u601d\u60f3\u4e0ere\u6a21\u5757\u7684\u65b9\u6cd5\u7ed3\u5408\u4f7f\u7528\u7684\u60c5\u51b5\u975e\u5e38\u591a findall\u4e0e\u5206\u7ec4 \u6709\u5982\u4e0b\u9700\u6c42\uff1a\u5728\u6807\u7b7e\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u51fa\u6807\u7b7e\u4e2d\u7684\u5185\u5bb9\uff1a \u4e00\u822c\u7684\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a s = '<title>whwHERO</title>' print(ret) print(ret[0].split('>')) print(ret[0].split('>')[1].split('<')[0]) #\u7ed3\u679c\uff1a ['>whwHERO<'] ['', 'whwHERO<'] whwHERO \u8fd9\u6837\u7684\u65b9\u6cd5\u770b\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6b63\u5219\u5339\u914d\u5230\u4ee5\u540e\u6211\u4eec\u8fd8\u5f97\u7528Python\u7684\u65b9\u6cd5\u53bb\u5904\u7406\u3002 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6b63\u5219\u7684 \u5206\u7ec4 \u4e0ere\u6a21\u5757\u7684\u65b9\u6cd5\u7ed3\u5408\u533a\u5b9e\u73b0\uff1a ret = re.findall('>(\\w+)<',r'<title>whwHERO<\\\\title>') print(ret) #\u7ed3\u679c\uff1a ['whwHERO'] \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a findall\u4f18\u5148\u663e\u793a\u5206\u7ec4\u4e2d\u7684\u5185\u5bb9 \uff01\u7b80\u76f4\u4e0d\u8981\u592a\u68d2\uff01 \u8fd9\u6837\u7684\u6548\u679c\u5728\u672c\u4f8b\u4e2d\u6548\u679c\u5f88\u68d2\uff0c\u4f46\u662f\uff0c\u5728\u4e00\u4e0b\u60c5\u51b5\u4e0b\u6211\u4eec\u662f\u4e0d\u60f3\u9171\u7d2b\u7684\uff1a \u5982\u679c\u6211\u4eec\u60f3\u5339\u914dwww.baidu.com\u6216\u8005www.taobao.com\u3002\u6b63\u5219\u8868\u8fbe\u5f0f\u5229\u7528\u5206\u7ec4\u6211\u4eec\u53ef\u4ee5\u9171\u7d2b\u5199\uff1a www\\.(baidu|taobao)\\.com \u4f46\u662f\uff0c\u4e0efindall\u65b9\u6cd5\u7ed3\u5408\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a ret = re.findall('www\\.(baidu|taobao)\\.com','www.baidu.com') print(ret) #\u7ed3\u679c\uff1a ['baidu'] \u518d\u6bd4\u5982\uff0c\u6211\u4eec\u60f3\u83b7\u53d6\u4e00\u4e32\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57(\u5305\u62ec\u5c0f\u6570)\uff1a digit = re.findall('\\d+(\\.\\d+)?',r'1.23+2.33') print(digit) #\u7ed3\u679c\uff1a['.23', '.33'] \u5f88\u663e\u7136\uff0c\u9171\u7d2b\u7684 \u5206\u7ec4\u4f18\u5148 \u662f\u6211\u4eec\u4e0d\u60f3\u8981\u7684\u3002\u90a3\u4e48\u5982\u4f55\u53d6\u6d88findall\u4e0b\u7684\u5206\u7ec4\u4f18\u5148\u5462\uff1f \u5728\u5206\u7ec4\u91cc\u7684\u6700\u524d\u9762\u52a0\u4e0a ?: \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0a\u9762\u4e24\u4e2a\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u9171\u7d2b\u4fee\u6539\uff1a ret = re.findall('www\\.(?:baidu|taobao)\\.com','www.baidu.com') print(ret) #\u7ed3\u679c\uff1a['www.baidu.com'] digit = re.findall('\\d+(?:\\.\\d+)?','1.23+2.33') print(digit) #\u7ed3\u679c\uff1a ['1.23', '2.33'] split\u4e0e\u5206\u7ec4 split\u4e0e\u5206\u7ec4\u7ed3\u5408\u8ddf\u666e\u901a\u7684split\u65b9\u6cd5\u7684\u533a\u522b\u662f\uff1a\u4e0e\u5206\u7ec4\u7ed3\u5408\u7684\u8bdd\u4f1a\u4fdd\u7559\u5728\u5206\u7ec4\u4e2d\u201c\u5207\u6389\u201d\u7684\u5185\u5bb9\uff0c\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bb2\u5c31\u5f88\u76f4\u89c2\u4e86\uff1a ret = re.split('\\d(\\d)','wanghw211whw222www233ee') print(ret) #\u7ed3\u679c\uff1a ['wanghw', '1', '1whw', '2', '2www', '3', '3ee'] \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a\u5339\u914d\u7684\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5728\u5206\u7ec4\u4e2d\uff0c\u6211\u4eec\u5229\u7528\u5339\u914d\u5230\u7684\u4e24\u4e2a\u6570\u5b57\u8fdb\u884c\u5207\u5272\uff0c\u4f46\u662f\u7531\u4e8e\u53ea\u6709\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5728\u5206\u7ec4\u4e2d\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u6570\u5b57\u88ab\u201c\u5e72\u6389\u201d\u4e86\uff0c\u5207\u5272\u540e\u7684\u5217\u8868\u53ea\u4fdd\u7559\u4e86\u7b2c\u4e8c\u4e2a\u6570\u5b57\uff01 search\u4e0e\u5206\u7ec4 \u5728\u8bb2search\u4e0e\u5206\u7ec4\u7684\u5173\u7cfb\u65f6\uff0c\u8bf7\u5927\u5bb6\u8bb0\u4f4f\u4e0b\u9762\u505a\u6570\u636e\u5904\u7406\u7684\u601d\u60f3\uff1a \u5728\u722c\u866b\\\u6570\u636e\u6e05\u6d17\u7684\u8fc7\u7a0b\u4e2d\u6700\u5e38\u7528\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u64cd\u4f5c \u800c\u5927\u591a\u6570\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u662f\u628a\u6211\u4eec\u8981\u7684\u5185\u5bb9\u90fd\u7528\u6b63\u5219\u5199\u51fa\u6765 \u800c\u662f\u628a\u6574\u4e2a\u9875\u9762\u90fd\u7528\u6b63\u5219\u63cf\u8ff0\u4e0b\u6765,\u7136\u540e\u628a\u6211\u9700\u8981\u7684\u5185\u5bb9\u653e\u5728\u5206\u7ec4\u91cc \u8fd9\u6837\u5c31\u80fd\u591f\u901a\u8fc7\u5206\u7ec4\u53d6\u5230\u6211\u60f3\u8981\u7684\u5185\u5bb9\u4e86 (\u5fc3\u4e2d\u9ed8\u5ff5\u4e00\u904d\u540e)\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a \u6bd4\u5982\u8bf4\u6211\u4eec\u4ece\u7f51\u9875\u4e2d\u722c\u53d6\u4e86\u4e0b\u9762\u5b57\u7b26\u4e32(\u5f53\u7136\u5b9e\u9645\u4e2d\u8981\u5927\u5f97\u591a\uff0c\u8fd9\u91cc\u53ea\u505a\u6a21\u62df) s=\"<title>whwisahero<\\title>\" \u6211\u4eec\u60f3\u7528search\u65b9\u6cd5\u83b7\u53d6\u91cc\u9762\u7684\u5185\u5bb9\uff0c\u6839\u636e\u4e0a\u9762\u4ecb\u7ecd\u7684 \u5904\u7406\u6570\u636e\u7684\u601d\u8def \uff0c\u6211\u4eec\u5148\u5229\u7528search\u62ff\u5230 \u7ed3\u679c\u96c6 \uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u7ed3\u679c\u96c6\u4e2d\u53d6\u6570\u636e\uff1a ret = re.search(r'<(\\w+)>(\\w+)<\\\\(\\w+)>',r'<title>whwisahero<\\title>') print(ret.group()) print(ret.group(0)) print(ret.group(1)) print(ret.group(2)) print(ret.group(3)) #\u7ed3\u679c\uff1a <title>whwhwhw<\\title> <title>whwhwhw<\\title> title whwisahero (\u8fd9\u662f\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9) title \u9171\u7d2b\u6211\u4eec\u5c31\u62ff\u5230\u4e86\u7ed3\u679c\u3002 \u4f46\u662f\uff0c\u76f8\u4fe1\u806a\u660e\u7684\u4f60\u53d5\u53d5\u53d5\u53d5\u53d5\u53d1\u73b0\u95ee\u9898\u4e86\uff01 \u6211\u600e\u4e48\u77e5\u9053\u6211\u60f3\u8981\u7684\u5185\u5bb9\u5728\u54ea\u4e2a\u7d22\u5f15\u91cc\uff01 \u6ca1\u9519\uff01\u8fd9\u91cc\u5c31\u9700\u8981\u6211\u4eec\u5229\u7528 \u5206\u7ec4\u547d\u540d \u4e86\uff01 ret = re.search('<(?P<title>\\w+)>(?P<content>\\w+)</(?P<title2>\\w+)>',r'<title>whwisahero</title>') print(ret.group('title')) print(ret.group('title2')) print(ret.group('content')) #\u7ed3\u679c\uff1a title title whwisahero \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5728\u5206\u7ec4\u5185\u90e8\u7684\u524d\u9762\u5229\u7528 ?P<\u5206\u7ec4\u540d> \u7684\u8bed\u6cd5\u4e3a\u5206\u7ec4\u8d77\u4e86\u4e2a\u540d\u5b57\uff0c\u5728\u6700\u540e\u53d6\u503c\u7684\u65f6\u5019\u5c06\u5206\u7ec4\u540d\u52a0\u5728group\u65b9\u6cd5\u7684\u53c2\u6570\u91cc\u5c31OK\u4e86\uff01 \u53e6\u5916\uff0c\u5206\u7ec4\u540d\u8fd8\u53ef\u4ee5\u8fd9\u4e48\u73a9\uff1a \u5982\u679c\u4e24\u4e2a\u5206\u7ec4\u540d\u4e00\u6837\u53ef\u4ee5\u9171\u7d2b\u5199\uff1a ret1 = re.search('<(?P<title>\\w+)>(?P<content>\\w+)</(?P=title)>',r'<title>whwisahero</title>') print(ret1.group('title')) print(ret1.group('content')) #\u7ed3\u679c\uff1a title whwisahero \u4e5f\u53ef\u4ee5\u9171\u7d2b\u5199\uff1a ret2 = re.search(r'<(?P<title>\\w+)>(?P<content>\\w+)</\\1>',r'<title>whwisahero</title>') print(ret2.group('title')) print(ret2.group('content')) #\u7ed3\u679c\uff1a title whwisahero \u7b5b\u9009\u6570\u636e\u7684\u601d\u60f3 \u63a5\u7740\u8ddf\u5927\u5bb6\u4e0b\u7b5b\u9009\u6570\u636e\u7684\u601d\u8def\uff1a \u5f53\u6211\u4eec\u8981\u5339\u914d\u7684\u5185\u5bb9\u6df7\u5728\u4e0d\u60f3\u5339\u914d\u7684\u5185\u5bb9\u4e2d \u53ea\u80fd\u628a\u4e0d\u60f3\u8981\u7684\u4e5f\u5339\u914d\u51fa\u6765,\u7136\u540e\u53bb\u6389\u4e0d\u60f3\u8981\u7684\u5c31\u662f\u60f3\u8981\u7684 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u6211\u60f3\u62ff\u5230\u4e00\u4e32\u5b57\u7b26\u4e32\u4e2d\u7684\u6b63\u6574\u6570\uff0c\u5229\u7528\u4e0a\u9762\u7684\u601d\u8def\u53ef\u4ee5\u9171\u7d2b\u505a\uff1a\u5148\u5c06\u4e0d\u9700\u8981\u7684\u6570\u636e\u4e5f\u5339\u914d\u51fa\u6765\uff0c\u7136\u540e\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u52a0\u5de5\u3002\u56e0\u4e3a\u5b9e\u9645\u4e2d\u6b63\u5219\u8868\u8fbe\u5f0f\u5e76\u4e0d\u662f\u4e07\u80fd\u6216\u8005\u4e00\u52b3\u6c38\u9038\u7684\uff0c\u5f97\u5230\u7684\u6570\u636e\u8fd8\u9700\u8981\u6211\u4eec\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff1a ret = re.findall('-*\\d+\\.\\d+|(-*\\d+)','2*(60+(-40.35/5)-(-4*3))') print(ret)#['2', '60', '', '5', '-4', '3'] for i in ret: if not i or i.startswith('-'): ret.remove(i) print(ret)#['2', '60', '5', '3'] \u5e38\u89c1\u7684\u51e0\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4f8b\u5b50\uff1a \u6700\u540e\u7ed9\u5927\u5bb6\u5206\u4eab\u5e38\u89c1\u7684\u51e0\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a #\u90ae\u7bb1\u7684\u89c4\u5219\uff1a \uff081\uff09@\u4e4b\u524d\u5fc5\u987b\u6709\u5185\u5bb9\u4e14\u53ea\u80fd\u662f\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\uff09\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf(_)\u3001\u51cf\u53f7\uff08-\uff09\u3001\u70b9\uff08.\uff09 \uff082\uff09@\u548c\u6700\u540e\u4e00\u4e2a\u70b9\uff08.\uff09\u4e4b\u95f4\u5fc5\u987b\u6709\u5185\u5bb9\u4e14\u53ea\u80fd\u662f\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\uff09\u3001\u6570\u5b57\u3001\u70b9\uff08.\uff09\u3001\u51cf\u53f7\uff08-\uff09\uff0c\u4e14\u4e24\u4e2a\u70b9\u4e0d\u80fd\u6328\u7740 \uff083\uff09\u6700\u540e\u4e00\u4e2a\u70b9\uff08.\uff09\u4e4b\u540e\u5fc5\u987b\u6709\u5185\u5bb9\u4e14\u5185\u5bb9\u53ea\u80fd\u662f\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\uff09\u3001\u6570\u5b57\u4e14\u957f\u5ea6\u4e3a\u5927\u4e8e\u7b49\u4e8e2\u4e2a\u5b57\u8282\uff0c\u5c0f\u4e8e\u7b49\u4e8e6\u4e2a\u5b57\u8282 \u6b63\u5219\u8868\u8fbe\u5f0f\uff1a[\\w\\-\\.]+@([a-zA-Z\\d\\-]+\\.)+[a-zA-Z\\d]{2,6} 1.\u6574\u6570\u6216\u8005\u5c0f\u6570 \u5305\u62ec\u6b63\u6570\u548c\u8d1f\u6570 -?\\d+(\\.\\d+)? 2.\u5e74\u6708\u65e5 2018-9-20 \\d{1,4}-\\d{1,2}-\\d{1,2} \\d{1,4}-(1[0-2]|0?[1-9])-(3[01]|[12]\\d|0?[1-9]) 3.\u5339\u914dqq\u53f7 4\u4f4d 11\u4f4d [1-9]\\d{4,11} 4.8-10\u4f4d\u7684\u5bc6\u7801 \u6570\u5b57\u5b57\u6bcd\u4e0b\u5212\u7ebf \\w{8,10} 5.\u9a8c\u8bc1\u7801 [\\da-zA-Z]{4} re\u6709\u5173\u7684\u722c\u866b\u7ec3\u4e60 \u7b80\u5355\u7248\u672c import re import json from urllib.request import urlopen def getPage(url): response = urlopen(url) return response.read().decode('utf-8') def parsePage(s): com = re.compile( '<div class=\"item\">.*?<div class=\"pic\">.*?<em .*?>(?P<id>\\d+).*?<span class=\"title\">(?P<title>.*?)</span>' '.*?<span class=\"rating_num\" .*?>(?P<rating_num>.*?)</span>.*?<span>(?P<comment_num>.*?)\u8bc4\u4ef7</span>', re.S) ret = com.finditer(s) for i in ret: yield { \"id\": i.group(\"id\"), \"title\": i.group(\"title\"), \"rating_num\": i.group(\"rating_num\"), \"comment_num\": i.group(\"comment_num\"), } def main(num): url = 'https://movie.douban.com/top250?start=%s&filter=' % num response_html = getPage(url) ret = parsePage(response_html) print(ret) f = open(\"move_info7\", \"a\", encoding=\"utf8\") for obj in ret: print(obj) data = str(obj) f.write(data + \"\\n\") count = 0 for i in range(10): main(count) count += 25 \u4f18\u5316\u7248 import requests import re import json def getPage(url): response = requests.get(url) return response.text def parsePage(s): com = re.compile( '<div class=\"item\">.*?<div class=\"pic\">.*?<em .*?>(?P<id>\\d+).*?<span class=\"title\">(?P<title>.*?)</span>' '.*?<span class=\"rating_num\" .*?>(?P<rating_num>.*?)</span>.*?<span>(?P<comment_num>.*?)\u8bc4\u4ef7</span>', re.S) ret = com.finditer(s) for i in ret: yield { \"id\": i.group(\"id\"), \"title\": i.group(\"title\"), \"rating_num\": i.group(\"rating_num\"), \"comment_num\": i.group(\"comment_num\"), } def main(num): url = 'https://movie.douban.com/top250?start=%s&filter=' % num response_html = getPage(url) ret = parsePage(response_html) print(ret) f = open(\"move_info7\", \"a\", encoding=\"utf8\") for obj in ret: print(obj) data = json.dumps(obj, ensure_ascii=False) f.write(data + \"\\n\") if __name__ == '__main__': count = 0 for i in range(10): main(count) count += 25 \u5b9e\u9645\u6821\u9a8c\u7684\u4e00\u4e2a\u4f8b\u5b50 \u6821\u9a8c\u5bc6\u7801:\u957f\u5ea6\u518d8~24\u4e4b\u95f4\u5e76\u4e14\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u6570\u5b57\u7279\u6b8a\u5b57\u7b26\u4e2d\u7684\u81f3\u5c11\u4e09\u79cd \u81ea\u5df1\u7ec3\u4e60\u7684\u4f8b\u5b50 re\u6a21\u5757\u5c0f\u7ed3","title":"15 \u6b63\u5219\u8868\u8fbe\u5f0f\u4e0ere\u6a21\u5757"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#pythonre","text":"\u722c\u866b\u4e2d \u6b63\u5219\u8868\u8fbe\u5f0f \u4f7f\u7528\u7684\u975e\u5e38\u591a\uff0c\u7528Python\u505a\u7684\u8bdd\u4f1a\u7528\u5230 re\u6a21\u5757 \u3002 \u672c\u6587\u603b\u7ed3\u4e00\u4e0b \u6b63\u5219\u8868\u8fbe\u5f0f \u4e0e re\u6a21\u5757 \u7684\u57fa\u7840\u4e0e\u4f7f\u7528\u3002 \u53e6\u5916\uff0c\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e2a \u5728\u7ebf\u6d4b\u8bd5\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u795e\u5668\u7f51\u7ad9 \uff1a http://tool.chinaz.com/regex","title":"\u6b63\u5219\u8868\u8fbe\u5f0f\u4e0ePython\u4e2dre\u6a21\u5757\u7684\u4f7f\u7528"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_1","text":"","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_2","text":"\u5173\u4e8e \u6b63\u5219\u8868\u8fbe\u5f0f \u7684\u57fa\u672c\u6982\u5ff5\u8fd9\u91cc\u5c31\u4e0d\u8d58\u8ff0\u4e86\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u5404\u79cd\u767e\u79d1\u91cc\u67e5\u627e\u5b83\u7684\u5b9a\u4e49\u3002\u6b63\u5219\u7684 \u4f7f\u7528\u573a\u666f \u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\uff1a \u4e00\u662f\uff1a\u68c0\u6d4b\u67d0\u4e00\u6bb5\u5b57\u7b26\u4e32\u662f\u5426\u7b26\u5408\u89c4\u5219\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\"\u6821\u9a8c\" \u4e8c\u662f\uff1a\u4ece\u4e00\u5927\u6bb5\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7b26\u5408\u89c4\u5219\u7684\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\"\u68c0\u7d22\" \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u4f7f\u7528\u573a\u666f\uff0c\u6211\u4eec\u5728\u767b\u9646\u6216\u8005\u6ce8\u518c\u65f6\u586b\u5199\u90ae\u7bb1\u3001\u624b\u673a\u53f7\u7b49\u5185\u5bb9\u7684\u65f6\u5019\u7ecf\u5e38\u4f1a\u89c1\u5230\u2014\u2014\u5e95\u5c42\u7684\u5b9e\u73b0\u601d\u8def\u5c31\u662f\u5229\u7528\u6b63\u5219\u201c\u6821\u9a8c\u201d\u6211\u4eec\u8f93\u5165\u7684\u5185\u5bb9\u662f\u5426\u201c\u89c4\u8303\u201d\u3002 \u53e6\u5916\uff0c\u6b63\u5219\u7684\u201c\u68c0\u7d22\u201d\u529f\u80fd\u5927\u91cf\u4f7f\u7528\u5728 \u722c\u866b \u91cc\uff0c\u7b80\u5355\u7684\u8bf4\uff0c \u722c\u866b \u80fd\u4ece\u4e00\u4e2a\u7f51\u7ad9\u5927\u91cf\u7684\u6570\u636e\u4e2d\u5f97\u5230\u7528\u6237\u60f3\u8981\u7684\u5185\u5bb9\u7b49\u7b49...... \u9700\u8981\u7279\u522b\u6ce8\u610f\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u53ea\u662f\u7528\u6765\u5904\u7406\u5b57\u7b26\u4e32\u7684","title":"\u4f7f\u7528\u573a\u666f"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_3","text":"","title":"\u5143\u5b57\u7b26"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_4","text":"\uff081\uff09\u6570\u5b57 [0-9] \uff082\uff09\u5c0f\u5199\u5b57\u6bcd [a-z] \uff083\uff09\u5927\u5199\u5b57\u6bcd [A-Z] \uff084\uff09\u5927\u5c0f\u5199\u5b57\u6bcd [A-Za-z] \uff085\uff09\u5927\u5c0f\u5199\u5b57\u6bcd+\u6570\u5b57 [0-9A-Za-z] \uff086\uff09\u6ce8\u610f\u4e00\u4e2a\u5b57\u7b26\u7ec4\u4e0d\u9650\u5236\u4e2a\u6570\uff1a\u5339\u914d\u4e09\u4e2a\u7684\u8bdd\uff1a[0-9A-Za-z][0-9A-Za-z][0-9A-Za-z] \uff087\uff09\u5927\u5c0f\u5199\u5b57\u6bcd+ _\u4e0e% [A-Za-z_%] \uff088-1\uff09\u5339\u914d1-5 [1\\-5] \u7528\u8f6c\u4e49\u7b26\uff0c- \u6709\u7279\u6b8a\u542b\u4e49 \uff088-2\uff09\u5b57\u7b26\u7ec4\u4e2d - \u662f\u6709\u7279\u6b8a\u610f\u4e49\u7684\uff0c\u9700\u8981\u4f7f\u7528\\\u4f5c\u4e3a\u8f6c\u4e49\u7b26\uff01 \uff089\uff09[^123]\u2014\u2014\u9664\u4e86123\u90fd\u5339\u914d\uff0c\u5305\u62ec\u6362\u884c","title":"\u4e00\uff1a\u53ef\u4ee5\u7075\u6d3b\u4f7f\u7528\u7684\u5143\u5b57\u7b26\uff1a[] \u4e0e [^]"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_5","text":"\uff081\uff09\\d\u2014\u2014\u6240\u6709\u6570\u5b57 \uff082\uff09\\w\u2014\u2014\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf \uff083\uff09\\s\u2014\u2014\u7a7a\u767d \uff084\uff09\u7a7a\u683c\u5339\u914d\u7a7a\u683c \uff085\uff09\\t\u2014\u2014\u5236\u8868\u7b26 \uff086\uff09\\n\u2014\u2014\u6362\u884c\u7b26 \uff087\uff09\\b\u2014\u2014\u5355\u8bcd\u7684\u8fb9\u754c o\\b\u2014\u2014hello\u7684'o'(o\u662f\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a) \\bo\u2014\u2014ok\u7684'o'(o\u662f\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a) \uff088\uff09\\W\u2014\u2014\u9664\u4e86\u5b57\u6bcd\u6570\u5b57\u4e0b\u5212\u7ebf \uff089\uff09\\D\u2014\u2014\u9664\u4e86\u6570\u5b57 \uff0810\uff09\\S\u2014\u2014\u9664\u4e86\u7a7a\u767d\u7b26 \uff0811\uff09.\u2014\u2014\u5339\u914d\u9664\u4e86\u6362\u884c\u7b26\u6240\u6709\u7684 \uff0812\uff09[\\D\\d]\u3001[\\W\\w]\u3001[\\s\\S]\u2014\u2014\u5339\u914d\u6240\u6709\u7684 \uff0813\uff09[^123]\u2014\u2014\u9664\u4e86123\u90fd\u5339\u914d\uff0c\u5305\u62ec\u6362\u884c \uff0814\uff09^\u2014\u2014\u5f00\u59cb\u5b57\u7b26 \uff0815\uff09$\u2014\u2014\u7ed3\u675f\u5b57\u7b26 \uff0816\uff09^.....$\u2014\u2014\u5f00\u59cb+\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u662f5\u4e2a\u9664\u4e86\u6362\u884c\u7684\u7b26\u53f7 \uff0817\uff09|\u2014\u2014\u6216 \u957f\u7684\u653e\u5728\u524d\u9762\uff01 \uff0818\uff09()\u2014\u2014\u5206\u7ec4 www\\.(baidu|oldboy)\\.com \u5339\u914dwww.baidu.com\u6216\u8005www.oldboy.com","title":"\u4e8c\uff1a\u5339\u914d\u5b57\u7b26"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_6","text":"\u91cf\u8bcd\u7528\u6765\u9650\u5236 \u5339\u914d\u7684\u6b21\u6570 \uff081\uff09{n}\u2014\u2014\u5339\u914dn\u6b21 \uff082\uff09{n,}\u2014\u2014\u5339\u914d\u81f3\u5c11n\u6b21 \uff083\uff09{n,m}\u2014\u2014\u5339\u914dn\u5230m\u6b21 \uff084\uff09+\u2014\u2014\u4e00\u6b21\u6216\u8005\u591a\u6b21 \u5339\u914d\u5c0f\u6570\u70b9\u7684\u524d\u540e\u5fc5\u987b\u6709\u6570 \\d+\\.\\d+ \uff085\uff09*\u2014\u20140\u6b21\u6216\u8005\u591a\u6b21 \u5339\u914d\u6574\u6570\uff1a\u7b2c\u4e00\u4f4d\u662f1-9\u4e0d\u8981\u662f0\uff1a [1-9]\\d*|0 \uff086\uff09?\u2014\u20140\u6b21\u6216\u8005\u4e00\u6b21 \u5339\u914d\u4e00\u4e2a\u6574\u6570\u6216\u8005\u5c0f\u6570\uff1a \\d+(\\.\\d+)?","title":"\u91cf\u8bcd"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_7","text":"'.' \u9ed8\u8ba4\u5339\u914d\u9664\\n\u4e4b\u5916\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u82e5\u6307\u5b9aflag DOTALL,\u5219\u5339\u914d\u4efb\u610f\u5b57\u7b26\uff0c\u5305\u62ec\u6362\u884c '^' \u5339\u914d\u5b57\u7b26\u5f00\u5934\uff0c\u82e5\u6307\u5b9aflags MULTILINE,\u8fd9\u79cd\u4e5f\u53ef\u4ee5\u5339\u914d\u4e0a(r\"^a\",\"\\nabc\\neee\",flags=re.MULTILINE) '$' \u5339\u914d\u5b57\u7b26\u7ed3\u5c3e\uff0c\u82e5\u6307\u5b9a\uff1aflags MULTILINE ,re.search('foo.$','foo1\\nfoo2\\n',re.MULTILINE).group() \u4f1a\u5339\u914d\u5230foo1 '*' \u5339\u914d \u53f7\u524d\u7684\u5b57\u7b260\u6b21\u6216\u591a\u6b21\uff0c re.search('a ','aaaabac') \u7ed3\u679c'aaaa' '+' \u5339\u914d\u524d\u4e00\u4e2a\u5b57\u7b261\u6b21\u6216\u591a\u6b21\uff0cre.findall(\"ab+\",\"ab+cd+abb+bba\") \u7ed3\u679c['ab', 'abb'] '?' \u5339\u914d\u524d\u4e00\u4e2a\u5b57\u7b261\u6b21\u62160\u6b21 ,re.search('b?','alex').group() \u5339\u914db 0\u6b21 '{m}' \u5339\u914d\u524d\u4e00\u4e2a\u5b57\u7b26m\u6b21 ,re.search('b{3}','alexbbbs').group() \u5339\u914d\u5230'bbb' '{n,m}' \u5339\u914d\u524d\u4e00\u4e2a\u5b57\u7b26n\u5230m\u6b21\uff0cre.findall(\"ab{1,3}\",\"abb abc abbcbbb\") \u7ed3\u679c'abb', 'ab', 'abb'] '|' \u5339\u914d|\u5de6\u6216|\u53f3\u7684\u5b57\u7b26\uff0cre.search(\"abc|ABC\",\"ABCBabcCD\").group() \u7ed3\u679c'ABC' '(...)' \u5206\u7ec4\u5339\u914d\uff0c re.search(\"(abc){2}a(123|45)\", \"abcabca456c\").group() \u7ed3\u679c\u4e3a'abcabca45' '\\A' \u53ea\u4ece\u5b57\u7b26\u5f00\u5934\u5339\u914d\uff0cre.search(\"\\Aabc\",\"alexabc\") \u662f\u5339\u914d\u4e0d\u5230\u7684\uff0c\u76f8\u5f53\u4e8ere.match('abc',\"alexabc\") \u6216^ '\\Z' \u5339\u914d\u5b57\u7b26\u7ed3\u5c3e\uff0c\u540c$ '\\d' \u5339\u914d\u6570\u5b570-9 '\\D' \u5339\u914d\u975e\u6570\u5b57 '\\w' \u5339\u914d[A-Za-z0-9] '\\W' \u5339\u914d\u975e[A-Za-z0-9] '\\s' \u5339\u914d\u7a7a\u767d\u5b57\u7b26\u3001\\t\u3001\\n\u3001\\r , re.search(\"\\s+\",\"ab\\tc1\\n3\").group() \u7ed3\u679c '\\t' (?P<name>...) \u5206\u7ec4\u5339\u914d re.search(\"(?P<province>[0-9]{4})(?P<city>[0-9]{2})(?P<birthday>[0-9]{4})\",\"371481199306143242\").groupdict(\"city\") \u7ed3\u679c{'province': '3714', 'city': '81', 'birthday': '1993'}","title":"\u5e38\u7528\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5c0f\u7ed3"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_8","text":"\u5728\u6b63\u5219\u4e2d\uff0c\u9ed8\u8ba4\u7684\u5339\u914d\u6a21\u5f0f\u662f\u201c\u8d2a\u5a6a\u5339\u914d\u201d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c \u5728\u7b26\u5408\u5339\u914d\u89c4\u5219\u7684\u524d\u63d0\u4e0b\u5c3d\u53ef\u80fd\u591a\u7684\u53bb\u5339\u914d\u5b57\u7b26 \uff0c\u4f46\u662f\u6709\u4e9b\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5339\u914d\u592a\u591a\u7684\u5185\u5bb9\uff0c\u53ea\u8981\u5f97\u5230\u9700\u8981\u7684\u201c\u7247\u6bb5\u201d\u5185\u5bb9\u5c31\u597d\u4e86\u3002 \u800c \u91cf\u8bcd \u662f\u5339\u914d\u591a\u6b21\u7684\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5728\u91cf\u8bcd\u7684\u540e\u9762\u52a0\u4e0a ? \u5c31\u53ef\u4ee5\u8ba9\u5339\u914d\u201c\u9002\u53ef\u800c\u6b62\u201d\u4e86\uff0c\u8fd9\u6837\u7684\u5339\u914d\u89c4\u5219\u5c31\u662f \u60f0\u6027\u5339\u914d \u8fd9\u91cc\u4e3e\u4e00\u4e2a \u8d2a\u5a6a\u5339\u914d \u4e0e \u60f0\u6027\u5339\u914d \u5bf9\u6bd4\u7684\u4f8b\u5b50\uff1a \u6709\u5b57\u7b26\u4e32\"aasdasdasdxxxxxxasdasd\"\uff0c\u73b0\u5728\u60f3\u5339\u914d\u5230x\u7ed3\u675f \uff081\uff09\u7528\"\u60f0\u6027\u5339\u914d\"\u7684\u8bdd\uff1a \u8bed\u6cd5\uff1aa.*?x \u8bf4\u660e\uff1a\u9047\u89c1\u4e00\u4e2a\u5148\u68c0\u6d4b\u662f\u4e0d\u662fx\uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u505c\u6b62\uff0c\u4e0d\u662f\u7684\u8bdd\u5c31\u5339\u914d \u7ed3\u679c\uff1aaasdasdasdx \uff082\uff09\u9ed8\u8ba4\u7684\"\u8d2a\u5a6a\u5339\u914d\"\uff1a \u8bed\u6cd5\uff1aa.*x \u8bf4\u660e\uff1a\u8fd9\u91cc\u4f1a\u5339\u914d\u540e\u9762\u6240\u6709\u7684x \u7ed3\u679c\uff1aaasdasdasdxxxxxx \u5f53\u7136\uff0c\u4ec0\u4e48\u65f6\u5019\u7528 \u8d2a\u5a6a\u5339\u914d \u4ec0\u4e48\u65f6\u5019\u7528 \u60f0\u6027\u5339\u914d \u9700\u8981\u6211\u4eec\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u3002","title":"\u8d2a\u5a6a\u5339\u914d\u4e0e\u60f0\u6027\u5339\u914d"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#re","text":"re\u6a21\u5757 \u662fPython\u7684\u5185\u7f6e\u6a21\u5757\uff0c\u662f\u4e13\u95e8\u7528\u6765\u5904\u7406\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5173\u9700\u6c42\u7684\u6a21\u5757\u3002 \u4f7f\u7528\u65b9\u6cd5\uff1a\u76f4\u63a5\u5728Python\u7a0b\u5e8f\u4e2dimport\u5373\u53ef\uff1a import re \u6839\u636e\u6b63\u5219\u7684\u89c4\u5219\u4ece\u4e00\u6bb5\u5185\u5bb9\u4e2d\u67e5\u627e\u7ed3\u679c","title":"re\u6a21\u5757"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#findall","text":"\u627e\u5230\u6240\u6709\u7b26\u5408\u6b63\u5219\u89c4\u5219\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\uff1a ret = re.findall('\\d+','whw123w1233') print(ret) #\u7ed3\u679c\uff1a ['123', '1233']","title":"findall"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#search","text":"\u627e\u5230\u7b2c\u4e00\u4e2a\uff0c\u8fd4\u56de \u7ed3\u679c\u96c6 \uff0c\u9700\u8981\u901a\u8fc7group\u65b9\u6cd5\u53d6\u503c\u3002\u6ca1\u53d6\u5230\u7684\u8bdd\u8fd4\u56deNone\uff0c\u6b64\u65f6\u7528group\u65b9\u6cd5\u4f1a\u62a5\u9519\uff01\u56e0\u6b64\u9700\u8981\u63d0\u524d\u5224\u65ad\u4e0b\uff1a ret = re.search('\\d+','wanghw123ww') print(ret) if ret: print(ret.group()) #\u7ed3\u679c\uff1a <_sre.SRE_Match object; span=(6, 9), match='123'> 123","title":"search"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#match","text":"\u4ece\u5934\u5f00\u59cb\u627e\u7b2c\u4e00\u4e2a\uff0c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6\uff0c\u9700\u8981\u901a\u8fc7group\u53d6\u503c\u3002\u6ca1\u53d6\u5230\u7684\u8bdd\u8fd4\u56deNone\uff0c\u6b64\u65f6\u7528group\u65b9\u6cd5\u4f1a\u62a5\u9519\uff01\u56e0\u6b64\u9700\u8981\u63d0\u524d\u5224\u65ad\u4e0b\uff1a \u4e0b\u9762\u662f\u5339\u914d\u5230\u7ed3\u679c\u7684\uff1a ret = re.match('\\d+','23whw22a') print(ret) if ret: print(ret.group()) #\u7ed3\u679c\uff1a <_sre.SRE_Match object; span=(0, 2), match='23'> 23 \u6ca1\u6709\u5339\u914d\u5230\u7684\u8bdd\u53ef\u4ee5\u5229\u7528\u5f02\u5e38\u5904\u7406\u6216\u8005\u50cf\u4e0a\u9762\u4e00\u6837\u7684\u6761\u4ef6\u5224\u65ad\uff1a ret = re.match('\\d+','whw22a') print(ret) try: print(ret.group()) except AttributeError as e: print(e,':','\u6ca1\u6709\u5339\u914d\u5230\uff01') #\u7ed3\u679c\uff1a None 'NoneType' object has no attribute 'group' : \u6ca1\u6709\u5339\u914d\u5230\uff01 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cmatch\u7684\u8fd4\u56de\u7ed3\u679c\u4e0esearch\u662f\u4e00\u6837\u7684\uff1b\u800c\u4e14\uff0cmatch\u7684\u5339\u914d\u8bed\u6cd5\u5176\u5b9e\u5c31\u662f\u76f8\u5f53\u4e8esearch\u5728\u5176\u5339\u914d\u89c4\u5219\u4e0a\u52a0\u4e0a ^ \uff0c\u56e0\u6b64\uff1a match\u53ef\u4ee5\u88absearch\u4ee3\u66ff \uff0c\u5b9e\u9645\u4e2dmatch\u7528\u7684\u6bd4\u8f83\u5c11\u3002 re.search('^\\d+','123asd') \u7b49\u540c\u4e8e: re.match('\\d+','123asd') \u66ff\u6362\u4e0e\u5207\u5272","title":"match"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#sub","text":"\u6211\u4eec\u53ef\u4ee5\u5229\u7528re\u6a21\u5757\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u7ed3\u5408\u8fdb\u884c\u5b57\u7b26\u4e32\u7684 \u6279\u91cf\u66ff\u6362: \u6709\u5982\u4e0b\u9700\u6c42\uff1a \u5b57\u7b26\u4e32\uff1as1 = 'wanghw123whw456'\uff0c\u5c06s1\u4e2d\u6240\u6709\u7684\u6570\u5b57\u66ff\u6362\u6210\u5b57\u7b26\u4e32\"HERO\"\u3002 \u6211\u4eec\u53ef\u4ee5\u5229\u7528re\u6a21\u5757\u7684sub\u65b9\u6cd5\u6765\u505a\uff1a s1 = 'wanghw123whw456' ss = re.sub('\\d+','HERO',s1) print(ss) #\u7ed3\u679c\uff1a wanghwHEROwhwHERO sub\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6b63\u5219\u7684\u89c4\u5219\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u88ab\u66ff\u6362\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u9700\u8981\u88ab\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\u3002\u5f53\u7136\uff0c\u806a\u660e\u7684\u4f60\u80af\u5b9a\u60f3\u5230\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u9ed8\u8ba4\u66ff\u6362\u7684\u662f\u6240\u6709\u7b26\u5408\u89c4\u5219\u7684\u5b57\u7b26\u4e32\u5440\uff01\u6211\u5982\u679c\u60f3 \u9650\u5b9a\u66ff\u6362\u7684\u6b21\u6570 \u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u7b2c\u56db\u4e2a\u53c2\u6570\uff0c\u6765\u8fbe\u5230\u9650\u5b9a\u66ff\u6362\u6b21\u6570\u7684\u4f5c\u7528\uff1a s1 = 'wanghw123whw456' ss = re.sub('\\d+','HERO',s1,1) print(ss) #\u7ed3\u679c\uff1a wanghwHEROwhw456","title":"sub"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#subn","text":"subn\u7684\u7528\u6cd5\u8ddfsub\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7 \u8fd4\u56de\u503c \u662f\u6709\u533a\u522b\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4e00\u4e0b\u770b\u770b\uff1a s1 = 'wanghw123whw456' ss = re.subn('\\d+','HERO',s1) print(ss) #\u7ed3\u679c\uff1a ('wanghwHEROwhwHERO', 2) \u5f53\u7136\u4e5f\u53ef\u4ee5\u6307\u5b9a\u66ff\u6362\u7684\u6b21\u6570\uff1a s1 = 'wanghw123whw456' ss = re.subn('\\d+','HERO',s1,1) print(ss) #\u7ed3\u679c\uff1a ('wanghwHEROwhw456', 1) \u5927\u5bb6\u53ef\u4ee5\u770b\u5230\uff0csubn\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff1a\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u66ff\u6362\u7684\u6b21\u6570\u3002","title":"subn"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#split","text":"split\u65b9\u6cd5\u4e0e\u5b57\u7b26\u4e32\u7684\u5207\u5272\u65b9\u6cd5\u4e00\u6837\uff0c\u8fd4\u56de\u7684\u4e5f\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u53ea\u4e0d\u8fc7\uff0c\u8fd9\u6b21\u6211\u4eec\u7528\u7684\u662f \u6b63\u5219\u5339\u914d\u7684\u7ed3\u679c \u8fdb\u884c\u5207\u5272\u7684\uff01 s1 = 'wanghw123whw456qwe' sq = re.split('\\d+',s1) print(sq) #\u7ed3\u679c\uff1a ['wanghw', 'whw', 'qwe'] split\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u653e\u6b63\u5219\u89c4\u5219\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u653e\u88ab\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32\u3002","title":"split"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_9","text":"\u6211\u4eec\u90fd\u77e5\u9053\uff0cPython\u662f\u4e00\u79cd\u89e3\u91ca\u578b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0cPython\u7684\u4ee3\u7801\u9700\u8981\u5148\u5728\u89e3\u91ca\u5668\u4e2d\u8f6c\u6362\u4e3a\u673a\u5668\u7801\uff0c\u6700\u7ec8\u8f6c\u6362\u4e3a\u8ba1\u7b97\u673a\u80fd\u8bc6\u522b\u7684\u7f16\u7801\u624d\u80fd\u8fd0\u884c\u3002 \u5bf9\u4e8e\u6b63\u5219\u5339\u914d\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u540c\u6837\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u9700\u8981\u7528\u5230\u51e0\u5341\u6b21\u751a\u81f3\u4e0a\u767e\u6b21\u53bb\u5339\u914d\u4e00\u6bb5\u957f\u6587\u5b57\u7684\u8bdd\uff0c\u7528\u666e\u901a\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u8fd0\u884c\u51e0\u5341\u6b21\u751a\u81f3\u4e0a\u767e\u6b21\u6765\u8fdb\u884c\u6bcf\u4e00\u6b21\u7684\u5339\u914d\u3002\u8fd9\u6837\u5927\u5927\u7684\u964d\u4f4e\u4e86\u6211\u4eec\u7a0b\u5e8f\u7684\u6548\u7387\uff0c\u662f\u6211\u4eec\u6700\u4e0d\u613f\u610f\u770b\u5230\u7684\uff01 \u800c\u5728Python\u4e2d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 \u9884\u7f16\u8bd1 \u7684\u65b9\u6cd5\u53bb\u89e3\u51b3\u8fd9\u4e2a\u96be\u9898\u3002 \u6240\u8c13\u7684 \u9884\u7f16\u8bd1 \uff0c\u5728\u6b63\u5219\u4e2d\u6211\u4eec\u5b9e\u9645\u7528\u5728\u4e0b\u9762\u8fd9\u6837\u7684\u573a\u666f\u4e2d\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u7ecf\u5e38\u88ab\u91cd\u590d\u4f7f\u7528\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8fdb\u884c\u4e00\u6b21\u7f16\u8bd1\uff0c \u5c06\u8fd9\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u9700\u8981\u505a\u7684\u4e8b\u9884\u5148\u7f16\u8bd1 \uff0c\u8fd9\u6837\uff0c\u4e4b\u540e\u53ea\u8981\u7528\u5230\u4e86\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6211\u4eec\u53ef\u4ee5\u5c06 \u7f16\u8bd1\u597d\u7684\u7ed3\u679c \u76f4\u63a5\u62ff\u6765\u7528\u5c31\u884c\u4e86\uff0c\u9171\u7d2b\u5927\u5927\u7684\u7701\u4e86\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\uff01","title":"\u9884\u7f16\u8bd1"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_10","text":"\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u60f3\u5339\u914d\u4e09\u6bb5(\u5b9e\u9645\u4e2d\u53ef\u80fd\u662f\u4e0a\u767e\u4e2a)\u7528\u5230\u76f8\u540c\u89c4\u5219\u5339\u914d\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u5185\u5bb9\u3002\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u89c4\u5219\u8fdb\u884c\u9884\u7f16\u8bd1\uff0c\u7136\u540e\u5229\u7528\u8fd9\u4e2a\u9884\u7f16\u8bd1\u7684\u7ed3\u679c\u53bb\u5339\u914d\u6bcf\u4e00\u6bb5\u9700\u8981\u5339\u914d\u7684\u5b57\u7b26\u4e32\uff1a ss = 'wangh123qwe3123' ss1 = 'wangh123qwe3123312' ss2 = 'wangh123qwe3123qwqasd5412' par = re.compile('\\d+') print(par) rets = par.findall(ss) rets1 = par.findall(ss1) rets2 = par.findall(ss2) print(rets) print(rets1) print(rets2) \u770b\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u806a\u660e\u7684\u4f60\u53c8\u53d1\u73b0\u95ee\u9898\u4e86\uff01\u8fd9\u6837\u56fa\u7136\u964d\u4f4e\u4e86 \u65f6\u95f4\u590d\u6742\u5ea6 \uff0c\u4f46\u662f\uff0c\u5982\u679c\u5b9e\u9645\u4e2d\u6709\u51e0\u4e07\u4e2a\u5927\u5b57\u7b26\u4e32\uff0c\u4f60\u8fd9\u6837\u4e00\u4e0b\u5b50\u8bfb\u53d6\u51fa\u6765\uff0c\u5185\u5b58\u4e0d\u662f\u76f4\u63a5\u7206\u70b8\u4e86\u4e48\uff01 \u5bf9\uff01\u6ca1\u9519\uff0c\u9488\u5bf9\u964d\u4f4e \u7a7a\u95f4\u590d\u6742\u5ea6 \u7684\u95ee\u9898\uff0cPython\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u53e6\u5916\u4e00\u4e2a\u65b9\u6cd5\u2014\u2014\u2014\u2014 finditer","title":"\u9884\u7f16\u8bd1\u7684\u4f7f\u7528\u4e3e\u4f8b\uff1a"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#finditer","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cfinditer\u65b9\u6cd5\u5f97\u5230\u7684\u662f\u4e00\u4e2a \u8fed\u4ee3\u5668 \u3002\u4e0b\u9762\u6211\u4eec\u6a21\u62df\u5339\u914d10\u4e2a\u76f8\u540c\u5b57\u7b26\u4e32\u7684\u4f8b\u5b50\uff1a re= re.finditer('\\d+','23adq9009qwe'*10) print(re) for i in re: print(i) print(i.group()) #\u7ed3\u679c(\u53ea\u62ff\u4e00\u4e2a\u7ed3\u679c\u4e3e\u4f8b)\uff1a #\u7b2c\u4e00\u4e2a\u62ff\u5230\u7684\u662fre\u2014\u2014\u8fed\u4ee3\u5668\u5bf9\u8c61 <callable_iterator object at 0x000001157E942940> #\u904d\u5386re\u4e2d\u62ff\u5230\u7684\u662f\"\u7ed3\u679c\u96c6\" <_sre.SRE_Match object; span=(0, 2), match='23'> #\u6700\u7ec8\u7684\u7ed3\u679c\u9700\u8981\u7528group()\u65b9\u6cd5\u53d6\u5230\uff1a 23 \u4e0b\u9762\u5c31\u6765\u4e00\u53d1 compile\u4e0efinditer\u7ed3\u5408\u540c\u65f6\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u65b9\u6cd5 \uff1a par = re.compile('\\d+') ret = par.finditer('wanghe123asdh2312asd33'*10) print(ret) for i in ret: print(i.group()) #\u7ed3\u679c(\u53ea\u62ff\u524d1\u7ec4)\uff1a <callable_iterator object at 0x000001DA20362940> 123 2312 33","title":"finditer"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#re_1","text":"\u5728\u5b9e\u9645\u4e2d\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u201c\u5206\u7ec4\u201d\u601d\u60f3\u4e0ere\u6a21\u5757\u7684\u65b9\u6cd5\u7ed3\u5408\u4f7f\u7528\u7684\u60c5\u51b5\u975e\u5e38\u591a","title":"\u201c\u5206\u7ec4\u201d\u4e0ere\u6a21\u5757\u7684\u7ed3\u5408\u4f7f\u7528"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#findall_1","text":"\u6709\u5982\u4e0b\u9700\u6c42\uff1a\u5728\u6807\u7b7e\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u51fa\u6807\u7b7e\u4e2d\u7684\u5185\u5bb9\uff1a \u4e00\u822c\u7684\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a s = '<title>whwHERO</title>' print(ret) print(ret[0].split('>')) print(ret[0].split('>')[1].split('<')[0]) #\u7ed3\u679c\uff1a ['>whwHERO<'] ['', 'whwHERO<'] whwHERO \u8fd9\u6837\u7684\u65b9\u6cd5\u770b\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6b63\u5219\u5339\u914d\u5230\u4ee5\u540e\u6211\u4eec\u8fd8\u5f97\u7528Python\u7684\u65b9\u6cd5\u53bb\u5904\u7406\u3002 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6b63\u5219\u7684 \u5206\u7ec4 \u4e0ere\u6a21\u5757\u7684\u65b9\u6cd5\u7ed3\u5408\u533a\u5b9e\u73b0\uff1a ret = re.findall('>(\\w+)<',r'<title>whwHERO<\\\\title>') print(ret) #\u7ed3\u679c\uff1a ['whwHERO'] \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a findall\u4f18\u5148\u663e\u793a\u5206\u7ec4\u4e2d\u7684\u5185\u5bb9 \uff01\u7b80\u76f4\u4e0d\u8981\u592a\u68d2\uff01 \u8fd9\u6837\u7684\u6548\u679c\u5728\u672c\u4f8b\u4e2d\u6548\u679c\u5f88\u68d2\uff0c\u4f46\u662f\uff0c\u5728\u4e00\u4e0b\u60c5\u51b5\u4e0b\u6211\u4eec\u662f\u4e0d\u60f3\u9171\u7d2b\u7684\uff1a \u5982\u679c\u6211\u4eec\u60f3\u5339\u914dwww.baidu.com\u6216\u8005www.taobao.com\u3002\u6b63\u5219\u8868\u8fbe\u5f0f\u5229\u7528\u5206\u7ec4\u6211\u4eec\u53ef\u4ee5\u9171\u7d2b\u5199\uff1a www\\.(baidu|taobao)\\.com \u4f46\u662f\uff0c\u4e0efindall\u65b9\u6cd5\u7ed3\u5408\u4f1a\u51fa\u73b0\u95ee\u9898\uff1a ret = re.findall('www\\.(baidu|taobao)\\.com','www.baidu.com') print(ret) #\u7ed3\u679c\uff1a ['baidu'] \u518d\u6bd4\u5982\uff0c\u6211\u4eec\u60f3\u83b7\u53d6\u4e00\u4e32\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57(\u5305\u62ec\u5c0f\u6570)\uff1a digit = re.findall('\\d+(\\.\\d+)?',r'1.23+2.33') print(digit) #\u7ed3\u679c\uff1a['.23', '.33'] \u5f88\u663e\u7136\uff0c\u9171\u7d2b\u7684 \u5206\u7ec4\u4f18\u5148 \u662f\u6211\u4eec\u4e0d\u60f3\u8981\u7684\u3002\u90a3\u4e48\u5982\u4f55\u53d6\u6d88findall\u4e0b\u7684\u5206\u7ec4\u4f18\u5148\u5462\uff1f \u5728\u5206\u7ec4\u91cc\u7684\u6700\u524d\u9762\u52a0\u4e0a ?: \u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0a\u9762\u4e24\u4e2a\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u9171\u7d2b\u4fee\u6539\uff1a ret = re.findall('www\\.(?:baidu|taobao)\\.com','www.baidu.com') print(ret) #\u7ed3\u679c\uff1a['www.baidu.com'] digit = re.findall('\\d+(?:\\.\\d+)?','1.23+2.33') print(digit) #\u7ed3\u679c\uff1a ['1.23', '2.33']","title":"findall\u4e0e\u5206\u7ec4"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#split_1","text":"split\u4e0e\u5206\u7ec4\u7ed3\u5408\u8ddf\u666e\u901a\u7684split\u65b9\u6cd5\u7684\u533a\u522b\u662f\uff1a\u4e0e\u5206\u7ec4\u7ed3\u5408\u7684\u8bdd\u4f1a\u4fdd\u7559\u5728\u5206\u7ec4\u4e2d\u201c\u5207\u6389\u201d\u7684\u5185\u5bb9\uff0c\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bb2\u5c31\u5f88\u76f4\u89c2\u4e86\uff1a ret = re.split('\\d(\\d)','wanghw211whw222www233ee') print(ret) #\u7ed3\u679c\uff1a ['wanghw', '1', '1whw', '2', '2www', '3', '3ee'] \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a\u5339\u914d\u7684\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5728\u5206\u7ec4\u4e2d\uff0c\u6211\u4eec\u5229\u7528\u5339\u914d\u5230\u7684\u4e24\u4e2a\u6570\u5b57\u8fdb\u884c\u5207\u5272\uff0c\u4f46\u662f\u7531\u4e8e\u53ea\u6709\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5728\u5206\u7ec4\u4e2d\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u6570\u5b57\u88ab\u201c\u5e72\u6389\u201d\u4e86\uff0c\u5207\u5272\u540e\u7684\u5217\u8868\u53ea\u4fdd\u7559\u4e86\u7b2c\u4e8c\u4e2a\u6570\u5b57\uff01","title":"split\u4e0e\u5206\u7ec4"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#search_1","text":"\u5728\u8bb2search\u4e0e\u5206\u7ec4\u7684\u5173\u7cfb\u65f6\uff0c\u8bf7\u5927\u5bb6\u8bb0\u4f4f\u4e0b\u9762\u505a\u6570\u636e\u5904\u7406\u7684\u601d\u60f3\uff1a \u5728\u722c\u866b\\\u6570\u636e\u6e05\u6d17\u7684\u8fc7\u7a0b\u4e2d\u6700\u5e38\u7528\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u64cd\u4f5c \u800c\u5927\u591a\u6570\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u662f\u628a\u6211\u4eec\u8981\u7684\u5185\u5bb9\u90fd\u7528\u6b63\u5219\u5199\u51fa\u6765 \u800c\u662f\u628a\u6574\u4e2a\u9875\u9762\u90fd\u7528\u6b63\u5219\u63cf\u8ff0\u4e0b\u6765,\u7136\u540e\u628a\u6211\u9700\u8981\u7684\u5185\u5bb9\u653e\u5728\u5206\u7ec4\u91cc \u8fd9\u6837\u5c31\u80fd\u591f\u901a\u8fc7\u5206\u7ec4\u53d6\u5230\u6211\u60f3\u8981\u7684\u5185\u5bb9\u4e86 (\u5fc3\u4e2d\u9ed8\u5ff5\u4e00\u904d\u540e)\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a \u6bd4\u5982\u8bf4\u6211\u4eec\u4ece\u7f51\u9875\u4e2d\u722c\u53d6\u4e86\u4e0b\u9762\u5b57\u7b26\u4e32(\u5f53\u7136\u5b9e\u9645\u4e2d\u8981\u5927\u5f97\u591a\uff0c\u8fd9\u91cc\u53ea\u505a\u6a21\u62df) s=\"<title>whwisahero<\\title>\" \u6211\u4eec\u60f3\u7528search\u65b9\u6cd5\u83b7\u53d6\u91cc\u9762\u7684\u5185\u5bb9\uff0c\u6839\u636e\u4e0a\u9762\u4ecb\u7ecd\u7684 \u5904\u7406\u6570\u636e\u7684\u601d\u8def \uff0c\u6211\u4eec\u5148\u5229\u7528search\u62ff\u5230 \u7ed3\u679c\u96c6 \uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u7ed3\u679c\u96c6\u4e2d\u53d6\u6570\u636e\uff1a ret = re.search(r'<(\\w+)>(\\w+)<\\\\(\\w+)>',r'<title>whwisahero<\\title>') print(ret.group()) print(ret.group(0)) print(ret.group(1)) print(ret.group(2)) print(ret.group(3)) #\u7ed3\u679c\uff1a <title>whwhwhw<\\title> <title>whwhwhw<\\title> title whwisahero (\u8fd9\u662f\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9) title \u9171\u7d2b\u6211\u4eec\u5c31\u62ff\u5230\u4e86\u7ed3\u679c\u3002 \u4f46\u662f\uff0c\u76f8\u4fe1\u806a\u660e\u7684\u4f60\u53d5\u53d5\u53d5\u53d5\u53d5\u53d1\u73b0\u95ee\u9898\u4e86\uff01 \u6211\u600e\u4e48\u77e5\u9053\u6211\u60f3\u8981\u7684\u5185\u5bb9\u5728\u54ea\u4e2a\u7d22\u5f15\u91cc\uff01 \u6ca1\u9519\uff01\u8fd9\u91cc\u5c31\u9700\u8981\u6211\u4eec\u5229\u7528 \u5206\u7ec4\u547d\u540d \u4e86\uff01 ret = re.search('<(?P<title>\\w+)>(?P<content>\\w+)</(?P<title2>\\w+)>',r'<title>whwisahero</title>') print(ret.group('title')) print(ret.group('title2')) print(ret.group('content')) #\u7ed3\u679c\uff1a title title whwisahero \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5728\u5206\u7ec4\u5185\u90e8\u7684\u524d\u9762\u5229\u7528 ?P<\u5206\u7ec4\u540d> \u7684\u8bed\u6cd5\u4e3a\u5206\u7ec4\u8d77\u4e86\u4e2a\u540d\u5b57\uff0c\u5728\u6700\u540e\u53d6\u503c\u7684\u65f6\u5019\u5c06\u5206\u7ec4\u540d\u52a0\u5728group\u65b9\u6cd5\u7684\u53c2\u6570\u91cc\u5c31OK\u4e86\uff01 \u53e6\u5916\uff0c\u5206\u7ec4\u540d\u8fd8\u53ef\u4ee5\u8fd9\u4e48\u73a9\uff1a \u5982\u679c\u4e24\u4e2a\u5206\u7ec4\u540d\u4e00\u6837\u53ef\u4ee5\u9171\u7d2b\u5199\uff1a ret1 = re.search('<(?P<title>\\w+)>(?P<content>\\w+)</(?P=title)>',r'<title>whwisahero</title>') print(ret1.group('title')) print(ret1.group('content')) #\u7ed3\u679c\uff1a title whwisahero \u4e5f\u53ef\u4ee5\u9171\u7d2b\u5199\uff1a ret2 = re.search(r'<(?P<title>\\w+)>(?P<content>\\w+)</\\1>',r'<title>whwisahero</title>') print(ret2.group('title')) print(ret2.group('content')) #\u7ed3\u679c\uff1a title whwisahero","title":"search\u4e0e\u5206\u7ec4"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_11","text":"\u63a5\u7740\u8ddf\u5927\u5bb6\u4e0b\u7b5b\u9009\u6570\u636e\u7684\u601d\u8def\uff1a \u5f53\u6211\u4eec\u8981\u5339\u914d\u7684\u5185\u5bb9\u6df7\u5728\u4e0d\u60f3\u5339\u914d\u7684\u5185\u5bb9\u4e2d \u53ea\u80fd\u628a\u4e0d\u60f3\u8981\u7684\u4e5f\u5339\u914d\u51fa\u6765,\u7136\u540e\u53bb\u6389\u4e0d\u60f3\u8981\u7684\u5c31\u662f\u60f3\u8981\u7684 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u6211\u60f3\u62ff\u5230\u4e00\u4e32\u5b57\u7b26\u4e32\u4e2d\u7684\u6b63\u6574\u6570\uff0c\u5229\u7528\u4e0a\u9762\u7684\u601d\u8def\u53ef\u4ee5\u9171\u7d2b\u505a\uff1a\u5148\u5c06\u4e0d\u9700\u8981\u7684\u6570\u636e\u4e5f\u5339\u914d\u51fa\u6765\uff0c\u7136\u540e\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u52a0\u5de5\u3002\u56e0\u4e3a\u5b9e\u9645\u4e2d\u6b63\u5219\u8868\u8fbe\u5f0f\u5e76\u4e0d\u662f\u4e07\u80fd\u6216\u8005\u4e00\u52b3\u6c38\u9038\u7684\uff0c\u5f97\u5230\u7684\u6570\u636e\u8fd8\u9700\u8981\u6211\u4eec\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff1a ret = re.findall('-*\\d+\\.\\d+|(-*\\d+)','2*(60+(-40.35/5)-(-4*3))') print(ret)#['2', '60', '', '5', '-4', '3'] for i in ret: if not i or i.startswith('-'): ret.remove(i) print(ret)#['2', '60', '5', '3']","title":"\u7b5b\u9009\u6570\u636e\u7684\u601d\u60f3"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_12","text":"\u6700\u540e\u7ed9\u5927\u5bb6\u5206\u4eab\u5e38\u89c1\u7684\u51e0\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a #\u90ae\u7bb1\u7684\u89c4\u5219\uff1a \uff081\uff09@\u4e4b\u524d\u5fc5\u987b\u6709\u5185\u5bb9\u4e14\u53ea\u80fd\u662f\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\uff09\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf(_)\u3001\u51cf\u53f7\uff08-\uff09\u3001\u70b9\uff08.\uff09 \uff082\uff09@\u548c\u6700\u540e\u4e00\u4e2a\u70b9\uff08.\uff09\u4e4b\u95f4\u5fc5\u987b\u6709\u5185\u5bb9\u4e14\u53ea\u80fd\u662f\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\uff09\u3001\u6570\u5b57\u3001\u70b9\uff08.\uff09\u3001\u51cf\u53f7\uff08-\uff09\uff0c\u4e14\u4e24\u4e2a\u70b9\u4e0d\u80fd\u6328\u7740 \uff083\uff09\u6700\u540e\u4e00\u4e2a\u70b9\uff08.\uff09\u4e4b\u540e\u5fc5\u987b\u6709\u5185\u5bb9\u4e14\u5185\u5bb9\u53ea\u80fd\u662f\u5b57\u6bcd\uff08\u5927\u5c0f\u5199\uff09\u3001\u6570\u5b57\u4e14\u957f\u5ea6\u4e3a\u5927\u4e8e\u7b49\u4e8e2\u4e2a\u5b57\u8282\uff0c\u5c0f\u4e8e\u7b49\u4e8e6\u4e2a\u5b57\u8282 \u6b63\u5219\u8868\u8fbe\u5f0f\uff1a[\\w\\-\\.]+@([a-zA-Z\\d\\-]+\\.)+[a-zA-Z\\d]{2,6} 1.\u6574\u6570\u6216\u8005\u5c0f\u6570 \u5305\u62ec\u6b63\u6570\u548c\u8d1f\u6570 -?\\d+(\\.\\d+)? 2.\u5e74\u6708\u65e5 2018-9-20 \\d{1,4}-\\d{1,2}-\\d{1,2} \\d{1,4}-(1[0-2]|0?[1-9])-(3[01]|[12]\\d|0?[1-9]) 3.\u5339\u914dqq\u53f7 4\u4f4d 11\u4f4d [1-9]\\d{4,11} 4.8-10\u4f4d\u7684\u5bc6\u7801 \u6570\u5b57\u5b57\u6bcd\u4e0b\u5212\u7ebf \\w{8,10} 5.\u9a8c\u8bc1\u7801 [\\da-zA-Z]{4}","title":"\u5e38\u89c1\u7684\u51e0\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u4f8b\u5b50\uff1a"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#re_2","text":"\u7b80\u5355\u7248\u672c import re import json from urllib.request import urlopen def getPage(url): response = urlopen(url) return response.read().decode('utf-8') def parsePage(s): com = re.compile( '<div class=\"item\">.*?<div class=\"pic\">.*?<em .*?>(?P<id>\\d+).*?<span class=\"title\">(?P<title>.*?)</span>' '.*?<span class=\"rating_num\" .*?>(?P<rating_num>.*?)</span>.*?<span>(?P<comment_num>.*?)\u8bc4\u4ef7</span>', re.S) ret = com.finditer(s) for i in ret: yield { \"id\": i.group(\"id\"), \"title\": i.group(\"title\"), \"rating_num\": i.group(\"rating_num\"), \"comment_num\": i.group(\"comment_num\"), } def main(num): url = 'https://movie.douban.com/top250?start=%s&filter=' % num response_html = getPage(url) ret = parsePage(response_html) print(ret) f = open(\"move_info7\", \"a\", encoding=\"utf8\") for obj in ret: print(obj) data = str(obj) f.write(data + \"\\n\") count = 0 for i in range(10): main(count) count += 25 \u4f18\u5316\u7248 import requests import re import json def getPage(url): response = requests.get(url) return response.text def parsePage(s): com = re.compile( '<div class=\"item\">.*?<div class=\"pic\">.*?<em .*?>(?P<id>\\d+).*?<span class=\"title\">(?P<title>.*?)</span>' '.*?<span class=\"rating_num\" .*?>(?P<rating_num>.*?)</span>.*?<span>(?P<comment_num>.*?)\u8bc4\u4ef7</span>', re.S) ret = com.finditer(s) for i in ret: yield { \"id\": i.group(\"id\"), \"title\": i.group(\"title\"), \"rating_num\": i.group(\"rating_num\"), \"comment_num\": i.group(\"comment_num\"), } def main(num): url = 'https://movie.douban.com/top250?start=%s&filter=' % num response_html = getPage(url) ret = parsePage(response_html) print(ret) f = open(\"move_info7\", \"a\", encoding=\"utf8\") for obj in ret: print(obj) data = json.dumps(obj, ensure_ascii=False) f.write(data + \"\\n\") if __name__ == '__main__': count = 0 for i in range(10): main(count) count += 25","title":"re\u6709\u5173\u7684\u722c\u866b\u7ec3\u4e60"},{"location":"python\u57fa\u7840/re\u6a21\u5757/#_13","text":"\u6821\u9a8c\u5bc6\u7801:\u957f\u5ea6\u518d8~24\u4e4b\u95f4\u5e76\u4e14\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u6570\u5b57\u7279\u6b8a\u5b57\u7b26\u4e2d\u7684\u81f3\u5c11\u4e09\u79cd \u81ea\u5df1\u7ec3\u4e60\u7684\u4f8b\u5b50 re\u6a21\u5757\u5c0f\u7ed3","title":"\u5b9e\u9645\u6821\u9a8c\u7684\u4e00\u4e2a\u4f8b\u5b50"},{"location":"python\u57fa\u7840/set/","text":"\u96c6\u5408\u7684\u64cd\u4f5c \u96c6\u5408\u7684\u5177\u4f53\u64cd\u4f5c\uff1a \u96c6\u5408\u7684\u64cd\u4f5c","title":"05 \u96c6\u5408set"},{"location":"python\u57fa\u7840/set/#_1","text":"\u96c6\u5408\u7684\u5177\u4f53\u64cd\u4f5c\uff1a \u96c6\u5408\u7684\u64cd\u4f5c","title":"\u96c6\u5408\u7684\u64cd\u4f5c"},{"location":"python\u57fa\u7840/string/","text":"\u751f\u6210\u6307\u5b9a\u7684\u5b57\u7b26\u4e32 import string print(string.ascii_letters) #abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) #abcdefghijklmnopqrstuvwxyz print(string.ascii_uppercase) #ABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.digits) #0123456789 print(string.hexdigits) #0123456789abcdefABCDEF print(string.octdigits) #01234567 \u5b57\u7b26\u4e32\u7684\u7f6e\u6362 string\u6a21\u5757\u7684\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u529f\u80fd\u662f \u5b57\u7b26\u4e32\u7684\u7f6e\u6362 \u3002 \u5b57\u7b26\u4e32\u7684\u7f6e\u63621 import string values = {'name': 'whw', 'age': 28, 'sex': 'male'} # 1\u3001string.Template(s1).substitute(values)\u65b9\u6cd5 s1 = ''' Name :$name Age :$age Sex :$sex Text :${name} is a1 good boy ''' ret1 = string.Template(s1) print('\u4e00:string.Template(s1).substitute(values)\u65b9\u6cd5:', ret1.substitute(values)) # 2\u3001%\u64cd\u4f5c\u7b26\u5b9e\u73b0 s2 = ''' Name:%(name)s Age:%(age)s Sex:%(sex)s Text:%(name)s is a1 GOOD BOY ''' ret2 = s2 % (values) print('\u4e8c\uff1a%\u64cd\u4f5c\u7b26\u65b9\u6cd5', ret2) # 3\u3001format\u683c\u5f0f\u5316 s3 = ''' Name::{name} Age::{age} Sex::{sex} Text::{name} IS A GOOD BOY ''' ret3 = s3.format(**values) print('\u4e09:format\u65b9\u6cd5\uff1a', ret3) \u5b57\u7b26\u4e32\u7684\u7f6e\u63622\u2014\u2014safe_substitute\u65b9\u6cd5 import string values = {'var': 'foo'} s = '$var is here but $missing is not here' try: print(string.Template(s).substitute(values)) except KeyError as err: print('ERROR:', str(err)) print('safe_substitute()\u65b9\u6cd5:\\n', string.Template(s).safe_substitute(values)) string.Template\u7684\u7b80\u5355\u4ecb\u7ecd \u5173\u4e8estring.Template\u7684\u7b80\u5355\u4ecb\u7ecd","title":"07 string\u6a21\u5757"},{"location":"python\u57fa\u7840/string/#_1","text":"import string print(string.ascii_letters) #abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) #abcdefghijklmnopqrstuvwxyz print(string.ascii_uppercase) #ABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.digits) #0123456789 print(string.hexdigits) #0123456789abcdefABCDEF print(string.octdigits) #01234567","title":"\u751f\u6210\u6307\u5b9a\u7684\u5b57\u7b26\u4e32"},{"location":"python\u57fa\u7840/string/#_2","text":"string\u6a21\u5757\u7684\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u529f\u80fd\u662f \u5b57\u7b26\u4e32\u7684\u7f6e\u6362 \u3002 \u5b57\u7b26\u4e32\u7684\u7f6e\u63621 import string values = {'name': 'whw', 'age': 28, 'sex': 'male'} # 1\u3001string.Template(s1).substitute(values)\u65b9\u6cd5 s1 = ''' Name :$name Age :$age Sex :$sex Text :${name} is a1 good boy ''' ret1 = string.Template(s1) print('\u4e00:string.Template(s1).substitute(values)\u65b9\u6cd5:', ret1.substitute(values)) # 2\u3001%\u64cd\u4f5c\u7b26\u5b9e\u73b0 s2 = ''' Name:%(name)s Age:%(age)s Sex:%(sex)s Text:%(name)s is a1 GOOD BOY ''' ret2 = s2 % (values) print('\u4e8c\uff1a%\u64cd\u4f5c\u7b26\u65b9\u6cd5', ret2) # 3\u3001format\u683c\u5f0f\u5316 s3 = ''' Name::{name} Age::{age} Sex::{sex} Text::{name} IS A GOOD BOY ''' ret3 = s3.format(**values) print('\u4e09:format\u65b9\u6cd5\uff1a', ret3) \u5b57\u7b26\u4e32\u7684\u7f6e\u63622\u2014\u2014safe_substitute\u65b9\u6cd5 import string values = {'var': 'foo'} s = '$var is here but $missing is not here' try: print(string.Template(s).substitute(values)) except KeyError as err: print('ERROR:', str(err)) print('safe_substitute()\u65b9\u6cd5:\\n', string.Template(s).safe_substitute(values))","title":"\u5b57\u7b26\u4e32\u7684\u7f6e\u6362"},{"location":"python\u57fa\u7840/string/#stringtemplate","text":"\u5173\u4e8estring.Template\u7684\u7b80\u5355\u4ecb\u7ecd","title":"string.Template\u7684\u7b80\u5355\u4ecb\u7ecd"},{"location":"python\u57fa\u7840/sys\u6a21\u5757/","text":"sys\u6a21\u5757 sys\u6a21\u5757\u662fPython\u5185\u7f6e\u7684\u4e0ePython\u89e3\u91ca\u5668\u4ea4\u4e92\u7684\u6a21\u5757\u3002 \u57fa\u672c\u64cd\u4f5c import sys # \u547d\u4ee4\u884c\u53c2\u6570List\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u7a0b\u5e8f\u672c\u8eab\u8def\u5f84 *** # \u53ef\u4ee5\u5c06\u6587\u4ef6\u540e\u7684\u5185\u5bb9\u4f20\u9012\u5230\u6587\u4ef6\u4e2d\u4f7f\u7528 # \u540e\u7aef\u4ee3\u7801\u653e\u5728linux\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u63a5\u6536cmd\u65b9\u5f0f\u8c03\u7528\uff0c\u540e\u8fb9\u7684\u53c2\u6570\u4f1a\u4f20\u9012\u8fc7\u6765 # \u9700\u8981\u5728terminal\u6216\u8005cmd\u7ec8\u7aef\u91cc\u8fd0\u884c\uff01 print(sys.argv[-1]) # \u8fd4\u56dePython\u89e3\u91ca\u5668\u52a0\u8f7d\u7684\u8def\u5f84\uff0c\u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84\uff0c\u521d\u59cb\u5316\u65f6\u4f7f\u7528PYTHONPATH\u73af\u5883\u53d8\u91cf\u7684\u503c ****** # \u81ea\u5b9a\u4e49\u6a21\u5757\uff1a\u5148\u4ecesys.path\u91cc\u9762\u53bb\u627e # \u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6a21\u5757\u7684\u8def\u5f84 print(sys.path) # \u83b7\u53d6Python\u89e3\u91ca\u7a0b\u5e8f\u7684\u7248\u672c\u4fe1\u606f print(sys.version) # \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u540d\u79f0 print(sys.platform) # \u9000\u51fa\uff01 # sys.exit() \u76f8\u5173\u7b14\u8bb0 \u804a\u4e00\u804asys\u7684argv\u6a21\u5757 [sys.modules name ]\u7684\u4e00\u4e2a\u5b9e\u4f8b sys.argv \u2014\u2014 \u767b\u9646\u7684\u4f8b\u5b50\u89e3\u91ca\u5176\u6548\u7387\u9ad8 \u5173\u4e8ePython\u7684\u6e90\u6587\u4ef6\u7f16\u8bd1\u770b\u8fd9\u4e00\u7bc7\u5c31\u591f\u4e86 (t3.py\u6709\u9879\u76ee\u6a21\u5757\u5bfc\u5165\u7684\u64cd\u4f5c)","title":"04 sys\u6a21\u5757"},{"location":"python\u57fa\u7840/sys\u6a21\u5757/#sys","text":"sys\u6a21\u5757\u662fPython\u5185\u7f6e\u7684\u4e0ePython\u89e3\u91ca\u5668\u4ea4\u4e92\u7684\u6a21\u5757\u3002","title":"sys\u6a21\u5757"},{"location":"python\u57fa\u7840/sys\u6a21\u5757/#_1","text":"import sys # \u547d\u4ee4\u884c\u53c2\u6570List\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u7a0b\u5e8f\u672c\u8eab\u8def\u5f84 *** # \u53ef\u4ee5\u5c06\u6587\u4ef6\u540e\u7684\u5185\u5bb9\u4f20\u9012\u5230\u6587\u4ef6\u4e2d\u4f7f\u7528 # \u540e\u7aef\u4ee3\u7801\u653e\u5728linux\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u63a5\u6536cmd\u65b9\u5f0f\u8c03\u7528\uff0c\u540e\u8fb9\u7684\u53c2\u6570\u4f1a\u4f20\u9012\u8fc7\u6765 # \u9700\u8981\u5728terminal\u6216\u8005cmd\u7ec8\u7aef\u91cc\u8fd0\u884c\uff01 print(sys.argv[-1]) # \u8fd4\u56dePython\u89e3\u91ca\u5668\u52a0\u8f7d\u7684\u8def\u5f84\uff0c\u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84\uff0c\u521d\u59cb\u5316\u65f6\u4f7f\u7528PYTHONPATH\u73af\u5883\u53d8\u91cf\u7684\u503c ****** # \u81ea\u5b9a\u4e49\u6a21\u5757\uff1a\u5148\u4ecesys.path\u91cc\u9762\u53bb\u627e # \u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6a21\u5757\u7684\u8def\u5f84 print(sys.path) # \u83b7\u53d6Python\u89e3\u91ca\u7a0b\u5e8f\u7684\u7248\u672c\u4fe1\u606f print(sys.version) # \u8fd4\u56de\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u540d\u79f0 print(sys.platform) # \u9000\u51fa\uff01 # sys.exit()","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"python\u57fa\u7840/sys\u6a21\u5757/#_2","text":"\u804a\u4e00\u804asys\u7684argv\u6a21\u5757 [sys.modules name ]\u7684\u4e00\u4e2a\u5b9e\u4f8b sys.argv \u2014\u2014 \u767b\u9646\u7684\u4f8b\u5b50\u89e3\u91ca\u5176\u6548\u7387\u9ad8 \u5173\u4e8ePython\u7684\u6e90\u6587\u4ef6\u7f16\u8bd1\u770b\u8fd9\u4e00\u7bc7\u5c31\u591f\u4e86 (t3.py\u6709\u9879\u76ee\u6a21\u5757\u5bfc\u5165\u7684\u64cd\u4f5c)","title":"\u76f8\u5173\u7b14\u8bb0"},{"location":"python\u57fa\u7840/time\u6a21\u5757/","text":"\u64cd\u4f5c\u7b14\u8bb0 ### \u5185\u7f6e\u7684\u6a21\u5757 ### \u6ce8\u610f\u53ea\u6709 \u201c\u65f6\u95f4\u6233\u65f6\u95f4\u201d\u624d\u80fd\u8fdb\u884c\u8fd0\u7b97\uff01\uff01\uff01 import time ###\u62ff\u5230 \u65f6\u95f4\u6233\u2014\u2014\u6d6e\u70b9\u578b\u7684\u5c0f\u6570 ###\u7ed9\u8ba1\u7b97\u673a\u770b\u7684\uff0c\u53ef\u4ee5\u505a\u4e00\u4e9b\u8ba1\u7b97 time.time() '''# \u4e09\u79cd\u65f6\u95f4\uff1a''' # #\u65f6\u95f4\u6233 time.time \u7ed9\u8ba1\u7b97\u673a\u770b print(time.time()) # #2\u3001\u7ed3\u6784\u5316\u65f6\u95f4-\u4fee\u6539 \u53c8\u53eb \u547d\u540d\u5143\u7ec4 print(time.localtime()) #3\u3001\u5b57\u7b26\u4e32\u65f6\u95f4\u2014\u2014\u7ed9\u4eba\u770b\u7684 ''' %Y \u56db\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a\uff08000-9999\uff09 %m \u6708\u4efd\uff0801-12\uff09 %d \u6708\u5185\u4e2d\u7684\u4e00\u5929\uff080-31\uff09 %H 24\u5c0f\u65f6\u5236\u5c0f\u65f6\u6570\uff080-23\uff09 %I 12\u5c0f\u65f6\u5236\u5c0f\u65f6\u6570\uff0801-12\uff09 %M \u5206\u949f\u6570\uff0800=59\uff09 %S \u79d2\uff0800-59\uff09 %x \u672c\u5730\u76f8\u5e94\u7684\u65e5\u671f\u8868\u793a %X \u672c\u5730\u76f8\u5e94\u7684\u65f6\u95f4\u8868\u793a ''' print(time.strftime('%Y-%m-%d %X')) # \u65f6\u95f4\u6233\u8f6c\u5b57\u7b26\u4e32\u65f6\u95f4\uff1a # \u5148\u8f6c\u6210\u7ed3\u6784\u5316\u65f6\u95f4(localtime())\uff0c\u518d\u8f6c\u6210\u5b57\u7b26\u4e32\u65f6\u95f4(strftime()) # \u62ec\u53f7\u4ec0\u4e48\u4e5f\u4e0d\u5199\u7684\u8bdd\u9ed8\u8ba4\u662f\u5f53\u524d\u7684\u65f6\u95f4 # \u4e00\u5929\u662f 86400 \u79d2 3600*24 # \u9762\u8bd5\u9898\uff1a f = time.localtime(time.time()-3600*24*3) #3\u5929\u4ee5\u524d\uff0c\u53ef\u4ee5\u7528\u65f6\u95f4\u6233\u6309\u7167\u79d2\u8ba1\u7b97 print(f) str_time = time.strftime('%Y-%m-%d %H:%M:%S',f) print(str_time) # \u9762\u8bd5\uff1a\uff1a\uff1a\u5b57\u7b26\u4e32\u65f6\u95f4\u8f6c\u65f6\u95f4\u6233 # # \u5148\u8f6c\u7ed3\u6784\u5316\u65f6\u95f4\uff0c\u518d\u8f6c\u65f6\u95f4\u6233 s = '2018-zz-30 12:30' #\u6ca1\u6709\u7ed9\u79d2\uff0c\u540e\u9762\u683c\u5f0f\u5316\u7684\u65f6\u95f4\u5199\u5230\u5206\uff01 f1 = time.strptime(s,'%Y-%m-%d %H:%M') print(f1) #\u5f97\u51fa\u6765\u5143\u7ec4 print(f1.tm_yday) # 334 \u8fd9\u4e00\u5e74\u7684\u7b2c\u51e0\u5929 print(f1.tm_mday) # 30 \u8fd9\u4e2a\u6708\u7684\u7b2c\u51e0\u5929 # #\u8f6c\u65f6\u95f4\u6233 \u2014\u2014\u2014\u2014\u63a8\u540e\u4e24\u5c0f\u65f6\u2014\u2014\u6ce8\u610f\u5355\u4f4d\u662f\u79d2 c_new = time.mktime(f1) + 2 * 3600 print(c_new) # #\u518d\u8f6c\u56de\u53bb\uff01\uff01\uff01 f_new = time.localtime(c_new) str_time_new = time.strftime('%Y-%m-%d %H:%M:%S') print(str_time_new) ### 1\u3001\u8fd9\u4e2a\u65f6\u95f4\u5411\u540e\u63a8\u4e00\u4e2a\u6708\uff01 ### 2\u3001 \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u7136\u540e\u62ff\u8fd9\u4e2a\u65f6\u95f4\u6c42\u4e0a\u4e2a\u6708\u7684\u5f53\u524d\u65f6\u95f4 str_t = '2019-03-20 10:40:00' #\u5148\u8f6c\u683c\u5f0f\u5316\u65f6\u95f4\uff1a struct_t = time.strptime(str_t,'%Y-%m-%d %H:%M:%S') print(struct_t) #\u518d\u8f6c\u65f6\u95f4\u6233\u5e76\u8fdb\u884c\u8ba1\u7b97 c_t = time.mktime(struct_t) print(c_t) c_t_new = c_t + (30*24*3600) print(c_t_new) #\u6700\u540e\u518d\u8f6c\u65f6\u95f4\u6233\u518d\u8f6c\u6210\u5b57\u7b26\u4e32\u65f6\u95f4 struct_t_new = time.localtime(c_t_new) str_t_new = time.strftime('%Y-%m-%d %X',struct_t_new) print(str_t_new) #2\u3001 #\u5f53\u524d\u65f6\u95f4\u6233 time_now = time.time() time_before = time_now - 30*24*3600 #\u4e4b\u524d\u7ed3\u6784\u5316\u65f6\u95f4 struct_before = time.localtime(time_before) # \u4e4b\u524d\u5b57\u7b26\u4e32\u65f6\u95f4 str_before = time.strftime('%Y-%m-%d %X',struct_before) print(str_before) ###\u603b\u7ed3\uff1a # \u6700\u4e3b\u8981\u7684\u662f\uff1a\u76f8\u4e92\u8f6c\u6362\uff1a4\u4e2a\uff1b****** # \u518d\u52a0\u4e00\u4e2a\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u6233\uff1atime.time() # \u8ba1\u7b97\u7684\u65f6\u5019\u53ea\u80fd\u5148\u8f6c\u6210\u65f6\u95f4\u6233\u518d\u8fdb\u884c\u8ba1\u7b97\uff01 ''' \u5b57\u7b26\u4e32\u65f6\u95f4\u2014\u2014\u2014\u2014>\u7ed3\u6784\u5316\u65f6\u95f4 strptime() \u7ed3\u6784\u5316\u65f6\u95f4\u2014\u2014\u2014\u2014>\u65f6\u95f4\u6233 mktime() \u65f6\u95f4\u6233 \u2014\u2014\u2014\u2014>\u7ed3\u6784\u5316\u65f6\u95f4 localtime() \u7ed3\u6784\u5316\u65f6\u95f4\u2014\u2014\u2014\u2014>\u5b57\u7b26\u4e32\u65f6\u95f4 strftime() ''' ''' ### \u6ce8\u610f\uff1a # strftime('\u683c\u5f0f','\u7ed3\u6784\u5316\u65f6\u95f4') \u683c\u5f0f\u53ef\u4ee5\u5c11\u5199 # strptime('\u5b57\u7b26\u4e32\u65f6\u95f4','\u683c\u5f0f') \u683c\u5f0f\u5fc5\u987b\u8ddf\u5b57\u7b26\u4e32\u65f6\u95f4\u4e00\u4e00\u5bf9\u5e94\uff01 '''","title":"05 time\u6a21\u5757"},{"location":"python\u57fa\u7840/time\u6a21\u5757/#_1","text":"### \u5185\u7f6e\u7684\u6a21\u5757 ### \u6ce8\u610f\u53ea\u6709 \u201c\u65f6\u95f4\u6233\u65f6\u95f4\u201d\u624d\u80fd\u8fdb\u884c\u8fd0\u7b97\uff01\uff01\uff01 import time ###\u62ff\u5230 \u65f6\u95f4\u6233\u2014\u2014\u6d6e\u70b9\u578b\u7684\u5c0f\u6570 ###\u7ed9\u8ba1\u7b97\u673a\u770b\u7684\uff0c\u53ef\u4ee5\u505a\u4e00\u4e9b\u8ba1\u7b97 time.time() '''# \u4e09\u79cd\u65f6\u95f4\uff1a''' # #\u65f6\u95f4\u6233 time.time \u7ed9\u8ba1\u7b97\u673a\u770b print(time.time()) # #2\u3001\u7ed3\u6784\u5316\u65f6\u95f4-\u4fee\u6539 \u53c8\u53eb \u547d\u540d\u5143\u7ec4 print(time.localtime()) #3\u3001\u5b57\u7b26\u4e32\u65f6\u95f4\u2014\u2014\u7ed9\u4eba\u770b\u7684 ''' %Y \u56db\u4f4d\u6570\u7684\u5e74\u4efd\u8868\u793a\uff08000-9999\uff09 %m \u6708\u4efd\uff0801-12\uff09 %d \u6708\u5185\u4e2d\u7684\u4e00\u5929\uff080-31\uff09 %H 24\u5c0f\u65f6\u5236\u5c0f\u65f6\u6570\uff080-23\uff09 %I 12\u5c0f\u65f6\u5236\u5c0f\u65f6\u6570\uff0801-12\uff09 %M \u5206\u949f\u6570\uff0800=59\uff09 %S \u79d2\uff0800-59\uff09 %x \u672c\u5730\u76f8\u5e94\u7684\u65e5\u671f\u8868\u793a %X \u672c\u5730\u76f8\u5e94\u7684\u65f6\u95f4\u8868\u793a ''' print(time.strftime('%Y-%m-%d %X')) # \u65f6\u95f4\u6233\u8f6c\u5b57\u7b26\u4e32\u65f6\u95f4\uff1a # \u5148\u8f6c\u6210\u7ed3\u6784\u5316\u65f6\u95f4(localtime())\uff0c\u518d\u8f6c\u6210\u5b57\u7b26\u4e32\u65f6\u95f4(strftime()) # \u62ec\u53f7\u4ec0\u4e48\u4e5f\u4e0d\u5199\u7684\u8bdd\u9ed8\u8ba4\u662f\u5f53\u524d\u7684\u65f6\u95f4 # \u4e00\u5929\u662f 86400 \u79d2 3600*24 # \u9762\u8bd5\u9898\uff1a f = time.localtime(time.time()-3600*24*3) #3\u5929\u4ee5\u524d\uff0c\u53ef\u4ee5\u7528\u65f6\u95f4\u6233\u6309\u7167\u79d2\u8ba1\u7b97 print(f) str_time = time.strftime('%Y-%m-%d %H:%M:%S',f) print(str_time) # \u9762\u8bd5\uff1a\uff1a\uff1a\u5b57\u7b26\u4e32\u65f6\u95f4\u8f6c\u65f6\u95f4\u6233 # # \u5148\u8f6c\u7ed3\u6784\u5316\u65f6\u95f4\uff0c\u518d\u8f6c\u65f6\u95f4\u6233 s = '2018-zz-30 12:30' #\u6ca1\u6709\u7ed9\u79d2\uff0c\u540e\u9762\u683c\u5f0f\u5316\u7684\u65f6\u95f4\u5199\u5230\u5206\uff01 f1 = time.strptime(s,'%Y-%m-%d %H:%M') print(f1) #\u5f97\u51fa\u6765\u5143\u7ec4 print(f1.tm_yday) # 334 \u8fd9\u4e00\u5e74\u7684\u7b2c\u51e0\u5929 print(f1.tm_mday) # 30 \u8fd9\u4e2a\u6708\u7684\u7b2c\u51e0\u5929 # #\u8f6c\u65f6\u95f4\u6233 \u2014\u2014\u2014\u2014\u63a8\u540e\u4e24\u5c0f\u65f6\u2014\u2014\u6ce8\u610f\u5355\u4f4d\u662f\u79d2 c_new = time.mktime(f1) + 2 * 3600 print(c_new) # #\u518d\u8f6c\u56de\u53bb\uff01\uff01\uff01 f_new = time.localtime(c_new) str_time_new = time.strftime('%Y-%m-%d %H:%M:%S') print(str_time_new) ### 1\u3001\u8fd9\u4e2a\u65f6\u95f4\u5411\u540e\u63a8\u4e00\u4e2a\u6708\uff01 ### 2\u3001 \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u7136\u540e\u62ff\u8fd9\u4e2a\u65f6\u95f4\u6c42\u4e0a\u4e2a\u6708\u7684\u5f53\u524d\u65f6\u95f4 str_t = '2019-03-20 10:40:00' #\u5148\u8f6c\u683c\u5f0f\u5316\u65f6\u95f4\uff1a struct_t = time.strptime(str_t,'%Y-%m-%d %H:%M:%S') print(struct_t) #\u518d\u8f6c\u65f6\u95f4\u6233\u5e76\u8fdb\u884c\u8ba1\u7b97 c_t = time.mktime(struct_t) print(c_t) c_t_new = c_t + (30*24*3600) print(c_t_new) #\u6700\u540e\u518d\u8f6c\u65f6\u95f4\u6233\u518d\u8f6c\u6210\u5b57\u7b26\u4e32\u65f6\u95f4 struct_t_new = time.localtime(c_t_new) str_t_new = time.strftime('%Y-%m-%d %X',struct_t_new) print(str_t_new) #2\u3001 #\u5f53\u524d\u65f6\u95f4\u6233 time_now = time.time() time_before = time_now - 30*24*3600 #\u4e4b\u524d\u7ed3\u6784\u5316\u65f6\u95f4 struct_before = time.localtime(time_before) # \u4e4b\u524d\u5b57\u7b26\u4e32\u65f6\u95f4 str_before = time.strftime('%Y-%m-%d %X',struct_before) print(str_before) ###\u603b\u7ed3\uff1a # \u6700\u4e3b\u8981\u7684\u662f\uff1a\u76f8\u4e92\u8f6c\u6362\uff1a4\u4e2a\uff1b****** # \u518d\u52a0\u4e00\u4e2a\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u6233\uff1atime.time() # \u8ba1\u7b97\u7684\u65f6\u5019\u53ea\u80fd\u5148\u8f6c\u6210\u65f6\u95f4\u6233\u518d\u8fdb\u884c\u8ba1\u7b97\uff01 ''' \u5b57\u7b26\u4e32\u65f6\u95f4\u2014\u2014\u2014\u2014>\u7ed3\u6784\u5316\u65f6\u95f4 strptime() \u7ed3\u6784\u5316\u65f6\u95f4\u2014\u2014\u2014\u2014>\u65f6\u95f4\u6233 mktime() \u65f6\u95f4\u6233 \u2014\u2014\u2014\u2014>\u7ed3\u6784\u5316\u65f6\u95f4 localtime() \u7ed3\u6784\u5316\u65f6\u95f4\u2014\u2014\u2014\u2014>\u5b57\u7b26\u4e32\u65f6\u95f4 strftime() ''' ''' ### \u6ce8\u610f\uff1a # strftime('\u683c\u5f0f','\u7ed3\u6784\u5316\u65f6\u95f4') \u683c\u5f0f\u53ef\u4ee5\u5c11\u5199 # strptime('\u5b57\u7b26\u4e32\u65f6\u95f4','\u683c\u5f0f') \u683c\u5f0f\u5fc5\u987b\u8ddf\u5b57\u7b26\u4e32\u65f6\u95f4\u4e00\u4e00\u5bf9\u5e94\uff01 '''","title":"\u64cd\u4f5c\u7b14\u8bb0"},{"location":"python\u57fa\u7840/tuple/","text":"\u5143\u7ec4\u53ef\u4ee5\u505a\u5b57\u5178\u7684key\u4f7f\u7528 \u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff1a\u5b9e\u9645\u4e2d\u6211\u4eec\u53ef\u4ee5\u5c06\u5143\u7ec4\u5f53\u4f5c\u662f\u5b57\u5178\u7684key\u53bb\u4f7f\u7528\uff0c\u4ee5\u65b9\u4fbf\u6211\u4eec\u53bb\u6784\u5efa\u6570\u636e\u3002\u6211\u5728\u5199\u4e1a\u52a1\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u7528\u5230\u8fc7\u51e0\u6b21\uff0c\u8fd9\u91cc\u5199\u4e00\u4e2a\u5c0fdemo\u8bb0\u5f55\u4e00\u4e0b\uff0c\u5f53\u7136\u5b9e\u9645\u7684\u4e1a\u52a1\u4ee3\u7801\u8981\u590d\u6742\u7684\u591a\uff0c \u5143\u7ec4\u53ef\u4ee5\u505a\u5b57\u5178\u7684key\u4f7f\u7528 \u8fd9\u4e2a\u601d\u60f3\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u8bb0\u4f4f\uff1a dic1 = dict() name_lst = [\"wanghw\",\"naruto\",\"sasuke\",\"sakrua\"] age_lst = [18,19,20,21,22] hobby_lst = [\"coding\",\"\u87ba\u65cb\u4e38\",\"\u5343\u9e1f\u6d41\",\"\u602a\u529b\"] for i in range(len(name_lst)): key = (name_lst[i],age_lst[i]) value = hobby_lst[i] dic1[key] = value print(dic1) \"\"\" { ('wanghw', 18): 'coding', ('naruto', 19): '\u87ba\u65cb\u4e38', ('sasuke', 20): '\u5343\u9e1f\u6d41', ('sakrua', 21): '\u602a\u529b' } \"\"\" Python\u5143\u7ec4\u7684\u4e00\u4e2abug\u4e0e\u683c\u5f0f\u5316\u5143\u7ec4\u6570\u636e\u7684\u4e00\u4e2a\u5751 Python\u4e2d\u7684\u5143\u7ec4\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u7684\u8bdd\u4f1a\u6709\u4e00\u4e2a\u5c0fbug\uff1a t1 = (123) t2 = (\"123\") t3 = (123,) print(t1,type(t1)) print(t2,type(t2)) print(t3,type(t3)) ''' 123 <class 'int'> 123 <class 'str'> (123,) <class 'tuple'> ''' \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\u5728\u683c\u5f0f\u5316\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2abug\uff0c\u8fd9\u91cc\u6211\u5199\u4e86\u4e00\u7bc7\u535a\u5ba2\u8bb0\u5f55\u4e86\u4e00\u4e0b\uff1a \u5173\u4e8e\u683c\u5f0f\u5316\u5143\u7ec4\u6570\u636e\u7684\u4e00\u4e2a\u5751","title":"03 \u5143\u7ec4tuple"},{"location":"python\u57fa\u7840/tuple/#key","text":"\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff1a\u5b9e\u9645\u4e2d\u6211\u4eec\u53ef\u4ee5\u5c06\u5143\u7ec4\u5f53\u4f5c\u662f\u5b57\u5178\u7684key\u53bb\u4f7f\u7528\uff0c\u4ee5\u65b9\u4fbf\u6211\u4eec\u53bb\u6784\u5efa\u6570\u636e\u3002\u6211\u5728\u5199\u4e1a\u52a1\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u7528\u5230\u8fc7\u51e0\u6b21\uff0c\u8fd9\u91cc\u5199\u4e00\u4e2a\u5c0fdemo\u8bb0\u5f55\u4e00\u4e0b\uff0c\u5f53\u7136\u5b9e\u9645\u7684\u4e1a\u52a1\u4ee3\u7801\u8981\u590d\u6742\u7684\u591a\uff0c \u5143\u7ec4\u53ef\u4ee5\u505a\u5b57\u5178\u7684key\u4f7f\u7528 \u8fd9\u4e2a\u601d\u60f3\u5e0c\u671b\u5927\u5bb6\u80fd\u591f\u8bb0\u4f4f\uff1a dic1 = dict() name_lst = [\"wanghw\",\"naruto\",\"sasuke\",\"sakrua\"] age_lst = [18,19,20,21,22] hobby_lst = [\"coding\",\"\u87ba\u65cb\u4e38\",\"\u5343\u9e1f\u6d41\",\"\u602a\u529b\"] for i in range(len(name_lst)): key = (name_lst[i],age_lst[i]) value = hobby_lst[i] dic1[key] = value print(dic1) \"\"\" { ('wanghw', 18): 'coding', ('naruto', 19): '\u87ba\u65cb\u4e38', ('sasuke', 20): '\u5343\u9e1f\u6d41', ('sakrua', 21): '\u602a\u529b' } \"\"\"","title":"\u5143\u7ec4\u53ef\u4ee5\u505a\u5b57\u5178\u7684key\u4f7f\u7528"},{"location":"python\u57fa\u7840/tuple/#pythonbug","text":"Python\u4e2d\u7684\u5143\u7ec4\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u7684\u8bdd\u4f1a\u6709\u4e00\u4e2a\u5c0fbug\uff1a t1 = (123) t2 = (\"123\") t3 = (123,) print(t1,type(t1)) print(t2,type(t2)) print(t3,type(t3)) ''' 123 <class 'int'> 123 <class 'str'> (123,) <class 'tuple'> ''' \u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\u5728\u683c\u5f0f\u5316\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2abug\uff0c\u8fd9\u91cc\u6211\u5199\u4e86\u4e00\u7bc7\u535a\u5ba2\u8bb0\u5f55\u4e86\u4e00\u4e0b\uff1a \u5173\u4e8e\u683c\u5f0f\u5316\u5143\u7ec4\u6570\u636e\u7684\u4e00\u4e2a\u5751","title":"Python\u5143\u7ec4\u7684\u4e00\u4e2abug\u4e0e\u683c\u5f0f\u5316\u5143\u7ec4\u6570\u636e\u7684\u4e00\u4e2a\u5751"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/","text":"dir dir\u65b9\u6cd5\u53ef\u4ee5\u67e5\u770b\u5bf9\u8c61\u7684\u5c5e\u6027\u4e0e\u65b9\u6cd5\uff1a class People(object): country = \"China\" def eating(self): pass whw = People() print(dir(whw)) \"\"\" ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'country', 'eating'] \"\"\" repr \u8fd9\u4e2a\u65b9\u6cd5\u7528\u7684\u6bd4\u8f83\u5c11\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u663e\u793a\u51fa\u5bf9\u8c61\u7684 \u539f\u8c8c \u3002\u4f46\u662f\u5728\u5b9e\u9645\u6392\u9519\u7684\u65f6\u5019\u6211\u8fd8\u771f\u7528\u5230\u8fc7\u4e00\u56de\uff0c\u5bf9\u5206\u6790\u95ee\u9898\u5341\u5206\u6709\u5e2e\u52a9\uff1a json\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u5b57\u7b26\u4e32\u4e3a\u5355\u5f15\u53f7\u7684\u4e00\u4e2a\u5751 eval \u5c06\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u4ee3\u7801\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\uff1a print(eval('1+2+3+4')) \"\"\" 10 \"\"\" sorted \u4e3b\u8981\u7528\u6765\u5bf9list\u3001dict\u6392\u5e8f\u3002 Python\u63d0\u4f9b\u4e86\u4e24\u4e2a\u65b9\u6cd5 \u5bf9\u7ed9\u5b9a\u7684List L\u8fdb\u884c\u6392\u5e8f\uff0c \u65b9\u6cd51:\u7528List\u7684\u6210\u5458\u51fd\u6570sort\u8fdb\u884c\u6392\u5e8f\uff0c \u5728\u672c\u5730\u8fdb\u884c\u6392\u5e8f\uff0c\u4e0d\u8fd4\u56de\u526f\u672c \u65b9\u6cd52:\u7528built-in\u51fd\u6570sorted\u8fdb\u884c\u6392\u5e8f\uff08\u4ece2.4\u5f00\u59cb\uff09\uff0c \u8fd4\u56de\u526f\u672c\uff0c\u539f\u59cb\u8f93\u5165\u4e0d\u53d8 sorted(iterable, key=None, reverse=False) \u53c2\u6570\u8bf4\u660e\uff1a iterable\uff1a \u662f\u53ef\u8fed\u4ee3\u7c7b\u578b; key\uff1a \u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u540d\uff0c\u51fd\u6570\u7684\u53c2\u6570\u662f\u53ef\u8fed\u4ee3\u7c7b\u578b\u4e2d\u7684\u6bcf\u4e00\u9879\uff0c\u6839\u636e\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5927\u5c0f\u6392\u5e8f; reverse \uff1a\u6392\u5e8f\u89c4\u5219. reverse = True \u964d\u5e8f \u6216\u8005 reverse = False \u5347\u5e8f\uff0c\u6709\u9ed8\u8ba4\u503c\u3002 \u8fd4\u56de\u503c\uff1a \u6709\u5e8f\u5217\u8868 \u5217\u8868\u6309\u7167\u5176\u4e2d\u6bcf\u4e00\u4e2a\u503c\u7684\u7edd\u5bf9\u503c\u6392\u5e8f l1 = [1,3,5,-2,-4,-6] l2 = sorted(l1,key=abs) print(l1) print(l2) \"\"\" [1, 3, 5, -2, -4, -6] [1, -2, 3, -4, 5, -6] \"\"\" \u5217\u8868\u6309\u7167\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684len\u6392\u5e8f l = [[1,2],[3,4,5,6],(7,),'123'] print(sorted(l,key=len)) # [(7,), [1, 2], '123', [3, 4, 5, 6]] \u6ce8\u610f\uff1a\u548csort\u7684\u533a\u522b l = [1,-4,6,5,-10] l.sort(key = abs) # \u5728\u539f\u5217\u8868\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6392\u5e8f print(l) print(sorted(l,key=abs,reverse=True)) # \u751f\u6210\u4e86\u4e00\u4e2a\u65b0\u5217\u8868 \u4e0d\u6539\u53d8\u539f\u5217\u8868 \u5360\u5185\u5b58 print(l) l = [' ',[1,2],'hello world'] new_l = sorted(l,key=len) print(new_l) \u7ed3\u679c\uff1a [1, -4, 5, 6, -10] [-10, 6, 5, -4, 1] [1, -4, 5, 6, -10] [[1, 2], ' ', 'hello world'] attr\u7cfb\u5217 attr\u7cfb\u5217\u8bf4\u767d\u4e86\u5c31\u662f\u6839\u636e\u5b57\u7b26\u4e32\u53bb\u627ePython\u5bf9\u8c61\uff08\u53ef\u4ee5\u662f\u7c7b\u3001\u5bf9\u8c61\u3001\u6a21\u5757\u7b49\uff09\u4e2d\u6709\u6ca1\u6709\u65b9\u6cd5\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u627e\u5230\u5bf9\u5e94\u65b9\u6cd5\u7684\u5185\u5b58\u5730\u5740\u7136\u540e\u8fdb\u884c\u64cd\u4f5c\u3002 getattr\u3001setattr\u3001hasattr\u8fd9\u4e09\u4e2a\u7528\u7684\u9891\u7387\u5f88\u9ad8\u3002 \u6211\u8fd9\u91cc\u603b\u7ed3\u4e86\u4e24\u7bc7\u76f8\u5173\u7684\u535a\u5ba2\uff1a \u4f7f\u7528setattr\u63a7\u5236\u811a\u672c\u4e2d\u6253\u5370\u662f\u5426\u6267\u884c [sys.modules name ]\u4e0egetattr\u4e00\u8d77\u4f7f\u7528\u7684\u4e00\u4e2a\u5b9e\u4f8b type\u4e0eisinstance \u4e8c\u8005\u90fd\u662f\u5224\u65ad\u6570\u636e\u7684\u7c7b\u578b\u7684\uff0c\u4f46\u662f\u6709\u533a\u522b\u3002\u5173\u4e8etype\u4e0eisinstance\u7684\u4f7f\u7528\u4e0e\u533a\u522b\u8bf7\u770b\u6211\u4e0b\u9762\u8fd9\u4e24\u7bc7\u535a\u5ba2\uff1a \u804a\u4e00\u804aisinstance\u4e0etype \u4f7f\u7528type\u5728\u5bf9\u8c61\u65b9\u6cd5\u4e2d\u8c03\u7528\u7c7b\u65b9\u6cd5 map\u3001zip\u3001filter\u4e0ereduce \u867d\u7136\u73b0\u5728 reduce \u4e0d\u662f\u5185\u7f6e\u51fd\u6570\u800c\u662f\u653e\u5728\u4e86functools\u6a21\u5757\u4e0b\uff0c\u4f46\u662f\u7531\u4e8e\u60c5\u6000\u5427\uff5e\u81ea\u5df1\u8fd8\u662f\u628a\u5b83\u8ddf\u4e0a\u9762\u90a3\u51e0\u4e2a\u5e38\u7528\u7684\u5185\u7f6e\u51fd\u6570\u653e\u5728\u4e00\u8d77\u8bb2\uff0c\u5927\u5bb6\u76f4\u63a5\u770b\u6211\u7684demo\u5c31\u597d\u4e86\uff1a # -*- coding:utf-8 -*- '''### functools.reduce''' from functools import reduce r1 = reduce(lambda x,y:x+y,[1,2,3,4,5]) print(r1) # 15 r2 = reduce(lambda x,y:x*y,[1,2,3,4,5]) print(r2) # 120 '''### map''' r3 = map(lambda x:x**2,[1,2,3]) print(r3,list(r3)) # <map object at 0x00000155BC0EBC50> [1, 4, 9] print(list(r3)) # [] \u2014\u2014 \u53d6\u5b8c\u4e00\u6b21\u5c31\u6ca1\u5f97\u4e86! '''### zip''' r4 = zip((1,2,3),(\"wanghw\",\"naruto\",\"sasuke\")) print(r4,dict(r4)) # <zip object at 0x00000155BC0FAC88> {1: 'wanghw', 2: 'naruto', 3: 'sasuke'} print(dict(r4)) # {} \u2014\u2014 \u53d6\u5b8c\u4e00\u6b21\u5c31\u6709\u6ca1\u5f97\u4e86\uff01 r5 = zip((4,5,6),(\"whw\",\"naroo\",\"sausu\")) print(r4,list(r5)) # <zip object at 0x00000155BC0FAC88> [(4, 'whw'), (5, 'naroo'), (6, 'sausu')] print(list(r5)) # [] \u2014\u2014 \u53d6\u5b8c\u4e00\u6b21\u5c31\u6ca1\u5f97\u4e86\uff01 '''### filter''' r6 = filter(lambda x:x>2,[1,2,3,4,5]) print(r6,list(r6)) # <filter object at 0x0000022E538E1B38> [3, 4, 5] print(list(r6)) # [] \u2014\u2014 \u53d6\u5b8c\u4e00\u6b21\u5c31\u6ca1\u5f97\u4e86\uff01 map\u3001zip\u3001filter\u3001sorted\u7684\u51e0\u4e2a\u8fdb\u9636\u5b9e\u4f8b \u5217\u8868\u3001\u5b57\u5178\u4e0e\u5185\u7f6e\u51fd\u6570\u7ed3\u5408\u7684\u51e0\u4e2a\u8fdb\u9636\u64cd\u4f5c \u4f7f\u7528map\u5b9e\u73b0\u4e0edatetime\u6a21\u5757\u5b9e\u73b0\u65e5\u671f\u9012\u63a8 from datetime import datetime,timedelta # date_end_time\u5bf9\u5e94\u7684\u662fy_lst\u6700\u540e\u4e00\u4e2a\u6570\u5bf9\u5e94\u7684\u65e5\u671f # \u9700\u8981\u5f97\u5230\u4e00\u4e2a\u65e5\u671f\u5217\u8868date_lst\u4e2d\u7684\u6bcf\u4e2a\u65e5\u671f\u503c\u4e0ey_lst\u4e2d\u5bf9\u5e94\u4e0a date_end_time = \"2020-05-03\" y_lst = [1,2,43,44,55,66] date_lst = list(map(lambda x:datetime.strftime(datetime.strptime(date_end_time,\"%Y-%m-%d\")-timedelta(days=x),\"%Y-%m-%d\"),range(len(y_lst)-1,-1,-1))) print(date_lst) # ['2020-04-28', '2020-04-29', '2020-04-30', '2020-05-01', '2020-05-02', '2020-05-03']","title":"01 \u5e38\u7528\u5185\u7f6e\u51fd\u6570"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#dir","text":"dir\u65b9\u6cd5\u53ef\u4ee5\u67e5\u770b\u5bf9\u8c61\u7684\u5c5e\u6027\u4e0e\u65b9\u6cd5\uff1a class People(object): country = \"China\" def eating(self): pass whw = People() print(dir(whw)) \"\"\" ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'country', 'eating'] \"\"\"","title":"dir"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#repr","text":"\u8fd9\u4e2a\u65b9\u6cd5\u7528\u7684\u6bd4\u8f83\u5c11\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u663e\u793a\u51fa\u5bf9\u8c61\u7684 \u539f\u8c8c \u3002\u4f46\u662f\u5728\u5b9e\u9645\u6392\u9519\u7684\u65f6\u5019\u6211\u8fd8\u771f\u7528\u5230\u8fc7\u4e00\u56de\uff0c\u5bf9\u5206\u6790\u95ee\u9898\u5341\u5206\u6709\u5e2e\u52a9\uff1a json\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u5b57\u7b26\u4e32\u4e3a\u5355\u5f15\u53f7\u7684\u4e00\u4e2a\u5751","title":"repr"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#eval","text":"\u5c06\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u4ee3\u7801\u6267\u884c\u5e76\u8fd4\u56de\u7ed3\u679c\uff1a print(eval('1+2+3+4')) \"\"\" 10 \"\"\"","title":"eval"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#sorted","text":"\u4e3b\u8981\u7528\u6765\u5bf9list\u3001dict\u6392\u5e8f\u3002 Python\u63d0\u4f9b\u4e86\u4e24\u4e2a\u65b9\u6cd5 \u5bf9\u7ed9\u5b9a\u7684List L\u8fdb\u884c\u6392\u5e8f\uff0c \u65b9\u6cd51:\u7528List\u7684\u6210\u5458\u51fd\u6570sort\u8fdb\u884c\u6392\u5e8f\uff0c \u5728\u672c\u5730\u8fdb\u884c\u6392\u5e8f\uff0c\u4e0d\u8fd4\u56de\u526f\u672c \u65b9\u6cd52:\u7528built-in\u51fd\u6570sorted\u8fdb\u884c\u6392\u5e8f\uff08\u4ece2.4\u5f00\u59cb\uff09\uff0c \u8fd4\u56de\u526f\u672c\uff0c\u539f\u59cb\u8f93\u5165\u4e0d\u53d8 sorted(iterable, key=None, reverse=False) \u53c2\u6570\u8bf4\u660e\uff1a iterable\uff1a \u662f\u53ef\u8fed\u4ee3\u7c7b\u578b; key\uff1a \u4f20\u5165\u4e00\u4e2a\u51fd\u6570\u540d\uff0c\u51fd\u6570\u7684\u53c2\u6570\u662f\u53ef\u8fed\u4ee3\u7c7b\u578b\u4e2d\u7684\u6bcf\u4e00\u9879\uff0c\u6839\u636e\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5927\u5c0f\u6392\u5e8f; reverse \uff1a\u6392\u5e8f\u89c4\u5219. reverse = True \u964d\u5e8f \u6216\u8005 reverse = False \u5347\u5e8f\uff0c\u6709\u9ed8\u8ba4\u503c\u3002 \u8fd4\u56de\u503c\uff1a \u6709\u5e8f\u5217\u8868 \u5217\u8868\u6309\u7167\u5176\u4e2d\u6bcf\u4e00\u4e2a\u503c\u7684\u7edd\u5bf9\u503c\u6392\u5e8f l1 = [1,3,5,-2,-4,-6] l2 = sorted(l1,key=abs) print(l1) print(l2) \"\"\" [1, 3, 5, -2, -4, -6] [1, -2, 3, -4, 5, -6] \"\"\" \u5217\u8868\u6309\u7167\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684len\u6392\u5e8f l = [[1,2],[3,4,5,6],(7,),'123'] print(sorted(l,key=len)) # [(7,), [1, 2], '123', [3, 4, 5, 6]] \u6ce8\u610f\uff1a\u548csort\u7684\u533a\u522b l = [1,-4,6,5,-10] l.sort(key = abs) # \u5728\u539f\u5217\u8868\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6392\u5e8f print(l) print(sorted(l,key=abs,reverse=True)) # \u751f\u6210\u4e86\u4e00\u4e2a\u65b0\u5217\u8868 \u4e0d\u6539\u53d8\u539f\u5217\u8868 \u5360\u5185\u5b58 print(l) l = [' ',[1,2],'hello world'] new_l = sorted(l,key=len) print(new_l) \u7ed3\u679c\uff1a [1, -4, 5, 6, -10] [-10, 6, 5, -4, 1] [1, -4, 5, 6, -10] [[1, 2], ' ', 'hello world']","title":"sorted"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#attr","text":"attr\u7cfb\u5217\u8bf4\u767d\u4e86\u5c31\u662f\u6839\u636e\u5b57\u7b26\u4e32\u53bb\u627ePython\u5bf9\u8c61\uff08\u53ef\u4ee5\u662f\u7c7b\u3001\u5bf9\u8c61\u3001\u6a21\u5757\u7b49\uff09\u4e2d\u6709\u6ca1\u6709\u65b9\u6cd5\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u627e\u5230\u5bf9\u5e94\u65b9\u6cd5\u7684\u5185\u5b58\u5730\u5740\u7136\u540e\u8fdb\u884c\u64cd\u4f5c\u3002 getattr\u3001setattr\u3001hasattr\u8fd9\u4e09\u4e2a\u7528\u7684\u9891\u7387\u5f88\u9ad8\u3002 \u6211\u8fd9\u91cc\u603b\u7ed3\u4e86\u4e24\u7bc7\u76f8\u5173\u7684\u535a\u5ba2\uff1a \u4f7f\u7528setattr\u63a7\u5236\u811a\u672c\u4e2d\u6253\u5370\u662f\u5426\u6267\u884c [sys.modules name ]\u4e0egetattr\u4e00\u8d77\u4f7f\u7528\u7684\u4e00\u4e2a\u5b9e\u4f8b","title":"attr\u7cfb\u5217"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#typeisinstance","text":"\u4e8c\u8005\u90fd\u662f\u5224\u65ad\u6570\u636e\u7684\u7c7b\u578b\u7684\uff0c\u4f46\u662f\u6709\u533a\u522b\u3002\u5173\u4e8etype\u4e0eisinstance\u7684\u4f7f\u7528\u4e0e\u533a\u522b\u8bf7\u770b\u6211\u4e0b\u9762\u8fd9\u4e24\u7bc7\u535a\u5ba2\uff1a \u804a\u4e00\u804aisinstance\u4e0etype \u4f7f\u7528type\u5728\u5bf9\u8c61\u65b9\u6cd5\u4e2d\u8c03\u7528\u7c7b\u65b9\u6cd5","title":"type\u4e0eisinstance"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#mapzipfilterreduce","text":"\u867d\u7136\u73b0\u5728 reduce \u4e0d\u662f\u5185\u7f6e\u51fd\u6570\u800c\u662f\u653e\u5728\u4e86functools\u6a21\u5757\u4e0b\uff0c\u4f46\u662f\u7531\u4e8e\u60c5\u6000\u5427\uff5e\u81ea\u5df1\u8fd8\u662f\u628a\u5b83\u8ddf\u4e0a\u9762\u90a3\u51e0\u4e2a\u5e38\u7528\u7684\u5185\u7f6e\u51fd\u6570\u653e\u5728\u4e00\u8d77\u8bb2\uff0c\u5927\u5bb6\u76f4\u63a5\u770b\u6211\u7684demo\u5c31\u597d\u4e86\uff1a # -*- coding:utf-8 -*- '''### functools.reduce''' from functools import reduce r1 = reduce(lambda x,y:x+y,[1,2,3,4,5]) print(r1) # 15 r2 = reduce(lambda x,y:x*y,[1,2,3,4,5]) print(r2) # 120 '''### map''' r3 = map(lambda x:x**2,[1,2,3]) print(r3,list(r3)) # <map object at 0x00000155BC0EBC50> [1, 4, 9] print(list(r3)) # [] \u2014\u2014 \u53d6\u5b8c\u4e00\u6b21\u5c31\u6ca1\u5f97\u4e86! '''### zip''' r4 = zip((1,2,3),(\"wanghw\",\"naruto\",\"sasuke\")) print(r4,dict(r4)) # <zip object at 0x00000155BC0FAC88> {1: 'wanghw', 2: 'naruto', 3: 'sasuke'} print(dict(r4)) # {} \u2014\u2014 \u53d6\u5b8c\u4e00\u6b21\u5c31\u6709\u6ca1\u5f97\u4e86\uff01 r5 = zip((4,5,6),(\"whw\",\"naroo\",\"sausu\")) print(r4,list(r5)) # <zip object at 0x00000155BC0FAC88> [(4, 'whw'), (5, 'naroo'), (6, 'sausu')] print(list(r5)) # [] \u2014\u2014 \u53d6\u5b8c\u4e00\u6b21\u5c31\u6ca1\u5f97\u4e86\uff01 '''### filter''' r6 = filter(lambda x:x>2,[1,2,3,4,5]) print(r6,list(r6)) # <filter object at 0x0000022E538E1B38> [3, 4, 5] print(list(r6)) # [] \u2014\u2014 \u53d6\u5b8c\u4e00\u6b21\u5c31\u6ca1\u5f97\u4e86\uff01","title":"map\u3001zip\u3001filter\u4e0ereduce"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#mapzipfiltersorted","text":"\u5217\u8868\u3001\u5b57\u5178\u4e0e\u5185\u7f6e\u51fd\u6570\u7ed3\u5408\u7684\u51e0\u4e2a\u8fdb\u9636\u64cd\u4f5c","title":"map\u3001zip\u3001filter\u3001sorted\u7684\u51e0\u4e2a\u8fdb\u9636\u5b9e\u4f8b"},{"location":"python\u57fa\u7840/\u5185\u7f6e\u51fd\u6570/#mapdatetime","text":"from datetime import datetime,timedelta # date_end_time\u5bf9\u5e94\u7684\u662fy_lst\u6700\u540e\u4e00\u4e2a\u6570\u5bf9\u5e94\u7684\u65e5\u671f # \u9700\u8981\u5f97\u5230\u4e00\u4e2a\u65e5\u671f\u5217\u8868date_lst\u4e2d\u7684\u6bcf\u4e2a\u65e5\u671f\u503c\u4e0ey_lst\u4e2d\u5bf9\u5e94\u4e0a date_end_time = \"2020-05-03\" y_lst = [1,2,43,44,55,66] date_lst = list(map(lambda x:datetime.strftime(datetime.strptime(date_end_time,\"%Y-%m-%d\")-timedelta(days=x),\"%Y-%m-%d\"),range(len(y_lst)-1,-1,-1))) print(date_lst) # ['2020-04-28', '2020-04-29', '2020-04-30', '2020-05-01', '2020-05-02', '2020-05-03']","title":"\u4f7f\u7528map\u5b9e\u73b0\u4e0edatetime\u6a21\u5757\u5b9e\u73b0\u65e5\u671f\u9012\u63a8"},{"location":"python\u57fa\u7840/\u52a0\u5bc6\u89e3\u5bc6/","text":"hashlib\u6a21\u5757 ### \u505a\u52a0\u5bc6\u7b97\u6cd5 \u6821\u9a8c\u6587\u4ef6\u7684\u4e00\u81f4\u6027 ### \u4f5c\u7528\uff1a(1)\u505a\u5bc6\u7801\uff1b(2)\u5224\u65ad\u4e00\u81f4\u6027 ### \u6ce8\u610f\uff1a\u52a0\u5bc6\u540e\uff0c\u4e0d\u53ef\u9006(\u4f46\u662f\u53ef\u4ee5\u88ab\u66b4\u529b\u7834\u89e3--\u649e\u5e93)\u2014\u2014\u2014\u2014\u73b0\u5728MD5\u88ab\u201c\u53cd\u63a8\u201d\u4e86\uff0c\u4e0d\u600e\u4e48\u5b89\u5168\u4e86 ### \u8fd8\u652f\u6301\uff1aSHA1,\u3001SHA256\u3001SHA512 import hashlib # \u9009\u62e9\u52a0\u5bc6\u65b9\u5f0f\uff0c\u53ef\u4ee5\u201c\u52a0\u76d0\u201d\u2014\u2014\u53ef\u4ee5\u628a\u201c\u7528\u6237\u540d\u201d\u5f53\u505a\u76d0\uff0c\u751f\u6210\u5bc6\u6587\u7684\u5bc6\u7801 md5 = hashlib.md5('whw'.encode('utf-8')) # \u5c06\u660e\u6587\u8f6c\u6210\u5b57\u8282\u7136\u540e\u8fdb\u884c\u52a0\u5bc6 md5.update('wanghw1991'.encode('utf-8')) # \u751f\u6210\u5bc6\u6587 print(md5.hexdigest()) # f7e1292843471c0f3e0e600e01809606 # adf492d09ec4b8c31860d687d22167d0 \u52a0\u76d0\u540e sha1 = hashlib.sha1() sha1.update('wanghw1991'.encode('utf-8')) print(sha1.hexdigest()) #32c40ff94bc151601e038365724d1b76fe814202 ###SHA512 \u66f4\u957f # SHA512\uff1a\u5b89\u5168\uff0c\u4f46\u662f\u6162 # MD5\uff1a\u5feb\uff0c\u4f46\u662f\u73b0\u5728\u88ab\u53cd\u63a8\u4e86 \u4e2a\u4eba\u535a\u5ba2 hashlib\u6a21\u5757\u6709\u5173\u7684\u51e0\u4e2a\u64cd\u4f5c","title":"13 \u52a0\u5bc6\u4e0e\u89e3\u5bc6\u6a21\u5757"},{"location":"python\u57fa\u7840/\u52a0\u5bc6\u89e3\u5bc6/#hashlib","text":"### \u505a\u52a0\u5bc6\u7b97\u6cd5 \u6821\u9a8c\u6587\u4ef6\u7684\u4e00\u81f4\u6027 ### \u4f5c\u7528\uff1a(1)\u505a\u5bc6\u7801\uff1b(2)\u5224\u65ad\u4e00\u81f4\u6027 ### \u6ce8\u610f\uff1a\u52a0\u5bc6\u540e\uff0c\u4e0d\u53ef\u9006(\u4f46\u662f\u53ef\u4ee5\u88ab\u66b4\u529b\u7834\u89e3--\u649e\u5e93)\u2014\u2014\u2014\u2014\u73b0\u5728MD5\u88ab\u201c\u53cd\u63a8\u201d\u4e86\uff0c\u4e0d\u600e\u4e48\u5b89\u5168\u4e86 ### \u8fd8\u652f\u6301\uff1aSHA1,\u3001SHA256\u3001SHA512 import hashlib # \u9009\u62e9\u52a0\u5bc6\u65b9\u5f0f\uff0c\u53ef\u4ee5\u201c\u52a0\u76d0\u201d\u2014\u2014\u53ef\u4ee5\u628a\u201c\u7528\u6237\u540d\u201d\u5f53\u505a\u76d0\uff0c\u751f\u6210\u5bc6\u6587\u7684\u5bc6\u7801 md5 = hashlib.md5('whw'.encode('utf-8')) # \u5c06\u660e\u6587\u8f6c\u6210\u5b57\u8282\u7136\u540e\u8fdb\u884c\u52a0\u5bc6 md5.update('wanghw1991'.encode('utf-8')) # \u751f\u6210\u5bc6\u6587 print(md5.hexdigest()) # f7e1292843471c0f3e0e600e01809606 # adf492d09ec4b8c31860d687d22167d0 \u52a0\u76d0\u540e sha1 = hashlib.sha1() sha1.update('wanghw1991'.encode('utf-8')) print(sha1.hexdigest()) #32c40ff94bc151601e038365724d1b76fe814202 ###SHA512 \u66f4\u957f # SHA512\uff1a\u5b89\u5168\uff0c\u4f46\u662f\u6162 # MD5\uff1a\u5feb\uff0c\u4f46\u662f\u73b0\u5728\u88ab\u53cd\u63a8\u4e86","title":"hashlib\u6a21\u5757"},{"location":"python\u57fa\u7840/\u52a0\u5bc6\u89e3\u5bc6/#_1","text":"hashlib\u6a21\u5757\u6709\u5173\u7684\u51e0\u4e2a\u64cd\u4f5c","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u57fa\u7840/\u5b57\u7b26\u4e32/","text":"\u5b57\u7b26\u4e32\u7684\u5e38\u7528\u64cd\u4f5c ## \u6ce8\u610f\uff1a\u5b57\u7b26\u4e32\u7684\u5404\u79cd\u65b9\u6cd5\u5747\u4e0d\u5f71\u54cd\u539f\u6709\u5b57\u7b26\u4e32\u7684\u503c '''# \u5206\u5272\u2014\u2014split()\u2014\u2014\u5f97\u51fa\u4e00\u4e2a\u5217\u8868\uff0c\u4e0d\u5305\u542b\u5206\u5272\u7684\u5143\u7d20''' #str.split(str=\"\", num=string.count(str)) #str -- \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u7684\u7a7a\u5b57\u7b26\uff0c\u5305\u62ec\u7a7a\u683c\u3001\u6362\u884c(\\n)\u3001\u5236\u8868\u7b26(\\y)\u7b49\u3002 #num -- \u5206\u5272\u6b21\u6570\u3002\u9ed8\u8ba4\u4e3a -1, \u5373\u5206\u9694\u6240\u6709\uff0c\u5982\u679c\u53c2\u6570 num \u6709\u6307\u5b9a\u503c\uff0c\u5219\u5206\u9694 num+1 \u4e2a\u5b50\u5b57\u7b26\u4e32 1 = 'Line1-abcdef\\nLine2-abc \\nLine4-abcd' print(1.split()) # \u4ee5\u7a7a\u683c\u4e3a\u5206\u9694\u7b26\uff0c\u5305\u542b\\n ['Line1-abcdef', 'Line2-abc', 'Line4-abcd'] print(1.split(' ',1)) # \u4ee5\u7a7a\u683c\u4e3a\u5206\u9694\u7b26\uff0c\u5206\u9694\u6210\u4e24\u4e2a ['Line1-abcdef\\nLine2-abc', '\\nLine4-abcd'] ''' \u7279\u522b\u6ce8\u610f\uff1a\u5b57\u7b26\u4e32\u6ca1\u6709remove\u65b9\u6cd5\uff01\uff01\u53ea\u6709\u5217\u8868\u6709remove\u65b9\u6cd5\uff01 ''' '''# replace()\u2014\u2014str.replace(old, new[, max])''' # old -- \u5c06\u88ab\u66ff\u6362\u7684\u5b50\u5b57\u7b26\u4e32\u3002 # new -- \u65b0\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u66ff\u6362old\u5b50\u5b57\u7b26\u4e32\u3002 # max -- \u53ef\u9009\u5b57\u7b26\u4e32, \u66ff\u6362\u4e0d\u8d85\u8fc7 max \u6b21\u3002 str1 = 'this is is' print(str1.replace('is','was')) #thwas was was print(str1.replace('is','was',2)) #thwas was is '''# is\u7cfb\u5217\u2014\u2014\u8fd4\u56debool\u7c7b\u578b''' name = 'taitaile123' print(name.isdigit())#\u662f\u5426\u5168\u662f\u6570\u5b57 False print(name.isalpha())#\u662f\u5426\u5168\u662f\u5b57\u6bcd False print(name.isalnum())#\u662f\u5426\u662f\u5b57\u6bcd\u4e0e\u6570\u5b57 True '''\u9996\u5b57\u6bcd\u5927\u5199\u3001\u5927\u5c0f\u5199\u53cd\u8f6c''' s = 'wangHW is A good boy' print(s.capitalize())#\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5269\u4e0b\u7684\u5747\u6539\u6210\u5c0f\u5199\uff1acapitalize() print(s.swapcase())#\u5927\u5c0f\u5199\u53cd\u8f6c\uff1aswapcase() print(s.title())#\u6240\u6709\u7684\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5269\u4e0b\u7684\u5747\u6539\u6210\u5c0f\u5199\u2014\u2014\u2014\u2014\u975e\u5b57\u6bcd\u5206\u9694\u7b26\u5206\u9694\u7684\u9996\u5b57\u6bcd\u5927\u5199 #\u4e5f\u53ef\u4ee5\u7528string\u7684capwords()\u65b9\u6cd5 import string print(string.capwords(s)) #\u2014\u2014\u2014\u2014\u2014\u2014 \u53ea\u6709\u7a7a\u683c\u9694\u5f00\u7684\u9996\u5b57\u6bcd\u624d\u5927\u5199 '''#\u5185\u5411\u5c45\u4e2d\uff0c\u7ed9\u51fa\u603b\u957f\u5ea6\uff0c\u4e0d\u591f\u8865\u9f50\uff1acenter()\u65b9\u6cd5''' print(s.title().center(50,'*')) '''#\u5b57\u7b26\u4e32\u4e2d\u5143\u7d20\u51fa\u73b0\u7684\u4e2a\u6570\uff1acount()\u65b9\u6cd5''' #\u53ef\u9009\u53c2\u6570\u4e3a\u5728\u5b57\u7b26\u4e32\u641c\u7d22\u7684\u5f00\u59cb\u4e0e\u7ed3\u675f\u4f4d\u7f6e\u2014\u2014\u6ce8\u610f\u4e5f\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4(\u987e\u5934\u4e0d\u987e\u5c3e) #\u8981\u60f3\u8fde\u6700\u540e\u4e00\u4e2a\u4e5f\u627e\uff0c\u90a3\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7a7a\u4e0b\u4e0d\u5199 ret1 = s.count('y',2) print(ret1) '''#\u4ee5...\u5f00\u5934/\u7ed3\u5c3e\u2014\u2014startswith()\u3001endswith()''' #\u8fd4\u56de\u7684\u662fbool\u7c7b\u578b\u7684\u503c w = 'asdaqwe91230akljd' print(w.startswith('asd'))#True print(w.startswith('asd',2,-1))#False #\u8fd9\u4e2a\u201c\u641c\u7d22\u533a\u95f4\u201d\u4e0ecount()\u65b9\u6cd5\u4e00\u6837 print(w.endswith('jd'))#True print(w.endswith('jd',0,-1))#False '''#\u5bfb\u627e\u5b57\u7b26\u4e32\u7684\u5143\u7d20\u662f\u5426\u5b58\u5728\u2014\u2014\u627e\u5230\u7684\u8bdd\u8fd4\u56de\u8fd9\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u6ca1\u6709\u5219\u8fd4\u56de-1''' ##(1)find()\u65b9\u6cd5 print(w.find('a1'))#0 print(w.find('a1',-6,-1))#12\u2014\u2014\u8fd9\u91cc\u7684\u201c\u641c\u7d22\u533a\u95f4\u201d\u4e0e\u4e0a\u9762\u7684\u4e00\u6837 print(w.find('a1',-3,-1))#-1 ##(2)index()\u65b9\u6cd5\u2014\u2014\u627e\u5230\u5219\u8fd4\u56de\u5143\u7d20\u7684\u989d\u7d22\u5f15\uff0c\u627e\u4e0d\u5230\u5219\u62a5\u9519 print(w.index('a1')) # 0 # print(w.index('a1',-3,-1)) ValueError: substring not found '''#format\u2014\u2014\u683c\u5f0f\u5316\u8f93\u51fa''' dic1 = {'name':'whw','age':22,'sex':'male'} r1 = '{} {} {}'.format('whw',22,'male') print(r1) r2 = '{1} {0} {1}'.format('whw',12,'male') print(r2) #12 whw 12 r3 = '{name} {age} {sex}'.format(name='whw',age=22,sex='male') print(r3) r4 = '{name}-{age}-{sex}'.format(**dic1) print(r4) '''#strip()\u2014\u2014\u6ce8\u610f\u53ea\u80fd\u6d88\u9664\u5de6\u53f3\u4e24\u8fb9\u7684\u5b57\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\u4e0e\u6362\u884c''' ss = '*SAsad#*' print(ss.strip('*'))#SAsad# print(ss.lstrip('*'))#SAsad#* print(ss.rstrip('*'))#*SAsad# '''f\u683c\u5f0f\u5316''' name = \"whw\" age = 18 print(f\"\u6211\u7684\u540d\u5b57\u662f{name},\u5e74\u9f84\u662f{age}\")","title":"04 \u5b57\u7b26\u4e32str"},{"location":"python\u57fa\u7840/\u5b57\u7b26\u4e32/#_1","text":"## \u6ce8\u610f\uff1a\u5b57\u7b26\u4e32\u7684\u5404\u79cd\u65b9\u6cd5\u5747\u4e0d\u5f71\u54cd\u539f\u6709\u5b57\u7b26\u4e32\u7684\u503c '''# \u5206\u5272\u2014\u2014split()\u2014\u2014\u5f97\u51fa\u4e00\u4e2a\u5217\u8868\uff0c\u4e0d\u5305\u542b\u5206\u5272\u7684\u5143\u7d20''' #str.split(str=\"\", num=string.count(str)) #str -- \u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u7684\u7a7a\u5b57\u7b26\uff0c\u5305\u62ec\u7a7a\u683c\u3001\u6362\u884c(\\n)\u3001\u5236\u8868\u7b26(\\y)\u7b49\u3002 #num -- \u5206\u5272\u6b21\u6570\u3002\u9ed8\u8ba4\u4e3a -1, \u5373\u5206\u9694\u6240\u6709\uff0c\u5982\u679c\u53c2\u6570 num \u6709\u6307\u5b9a\u503c\uff0c\u5219\u5206\u9694 num+1 \u4e2a\u5b50\u5b57\u7b26\u4e32 1 = 'Line1-abcdef\\nLine2-abc \\nLine4-abcd' print(1.split()) # \u4ee5\u7a7a\u683c\u4e3a\u5206\u9694\u7b26\uff0c\u5305\u542b\\n ['Line1-abcdef', 'Line2-abc', 'Line4-abcd'] print(1.split(' ',1)) # \u4ee5\u7a7a\u683c\u4e3a\u5206\u9694\u7b26\uff0c\u5206\u9694\u6210\u4e24\u4e2a ['Line1-abcdef\\nLine2-abc', '\\nLine4-abcd'] ''' \u7279\u522b\u6ce8\u610f\uff1a\u5b57\u7b26\u4e32\u6ca1\u6709remove\u65b9\u6cd5\uff01\uff01\u53ea\u6709\u5217\u8868\u6709remove\u65b9\u6cd5\uff01 ''' '''# replace()\u2014\u2014str.replace(old, new[, max])''' # old -- \u5c06\u88ab\u66ff\u6362\u7684\u5b50\u5b57\u7b26\u4e32\u3002 # new -- \u65b0\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u66ff\u6362old\u5b50\u5b57\u7b26\u4e32\u3002 # max -- \u53ef\u9009\u5b57\u7b26\u4e32, \u66ff\u6362\u4e0d\u8d85\u8fc7 max \u6b21\u3002 str1 = 'this is is' print(str1.replace('is','was')) #thwas was was print(str1.replace('is','was',2)) #thwas was is '''# is\u7cfb\u5217\u2014\u2014\u8fd4\u56debool\u7c7b\u578b''' name = 'taitaile123' print(name.isdigit())#\u662f\u5426\u5168\u662f\u6570\u5b57 False print(name.isalpha())#\u662f\u5426\u5168\u662f\u5b57\u6bcd False print(name.isalnum())#\u662f\u5426\u662f\u5b57\u6bcd\u4e0e\u6570\u5b57 True '''\u9996\u5b57\u6bcd\u5927\u5199\u3001\u5927\u5c0f\u5199\u53cd\u8f6c''' s = 'wangHW is A good boy' print(s.capitalize())#\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5269\u4e0b\u7684\u5747\u6539\u6210\u5c0f\u5199\uff1acapitalize() print(s.swapcase())#\u5927\u5c0f\u5199\u53cd\u8f6c\uff1aswapcase() print(s.title())#\u6240\u6709\u7684\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5269\u4e0b\u7684\u5747\u6539\u6210\u5c0f\u5199\u2014\u2014\u2014\u2014\u975e\u5b57\u6bcd\u5206\u9694\u7b26\u5206\u9694\u7684\u9996\u5b57\u6bcd\u5927\u5199 #\u4e5f\u53ef\u4ee5\u7528string\u7684capwords()\u65b9\u6cd5 import string print(string.capwords(s)) #\u2014\u2014\u2014\u2014\u2014\u2014 \u53ea\u6709\u7a7a\u683c\u9694\u5f00\u7684\u9996\u5b57\u6bcd\u624d\u5927\u5199 '''#\u5185\u5411\u5c45\u4e2d\uff0c\u7ed9\u51fa\u603b\u957f\u5ea6\uff0c\u4e0d\u591f\u8865\u9f50\uff1acenter()\u65b9\u6cd5''' print(s.title().center(50,'*')) '''#\u5b57\u7b26\u4e32\u4e2d\u5143\u7d20\u51fa\u73b0\u7684\u4e2a\u6570\uff1acount()\u65b9\u6cd5''' #\u53ef\u9009\u53c2\u6570\u4e3a\u5728\u5b57\u7b26\u4e32\u641c\u7d22\u7684\u5f00\u59cb\u4e0e\u7ed3\u675f\u4f4d\u7f6e\u2014\u2014\u6ce8\u610f\u4e5f\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4(\u987e\u5934\u4e0d\u987e\u5c3e) #\u8981\u60f3\u8fde\u6700\u540e\u4e00\u4e2a\u4e5f\u627e\uff0c\u90a3\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7a7a\u4e0b\u4e0d\u5199 ret1 = s.count('y',2) print(ret1) '''#\u4ee5...\u5f00\u5934/\u7ed3\u5c3e\u2014\u2014startswith()\u3001endswith()''' #\u8fd4\u56de\u7684\u662fbool\u7c7b\u578b\u7684\u503c w = 'asdaqwe91230akljd' print(w.startswith('asd'))#True print(w.startswith('asd',2,-1))#False #\u8fd9\u4e2a\u201c\u641c\u7d22\u533a\u95f4\u201d\u4e0ecount()\u65b9\u6cd5\u4e00\u6837 print(w.endswith('jd'))#True print(w.endswith('jd',0,-1))#False '''#\u5bfb\u627e\u5b57\u7b26\u4e32\u7684\u5143\u7d20\u662f\u5426\u5b58\u5728\u2014\u2014\u627e\u5230\u7684\u8bdd\u8fd4\u56de\u8fd9\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u6ca1\u6709\u5219\u8fd4\u56de-1''' ##(1)find()\u65b9\u6cd5 print(w.find('a1'))#0 print(w.find('a1',-6,-1))#12\u2014\u2014\u8fd9\u91cc\u7684\u201c\u641c\u7d22\u533a\u95f4\u201d\u4e0e\u4e0a\u9762\u7684\u4e00\u6837 print(w.find('a1',-3,-1))#-1 ##(2)index()\u65b9\u6cd5\u2014\u2014\u627e\u5230\u5219\u8fd4\u56de\u5143\u7d20\u7684\u989d\u7d22\u5f15\uff0c\u627e\u4e0d\u5230\u5219\u62a5\u9519 print(w.index('a1')) # 0 # print(w.index('a1',-3,-1)) ValueError: substring not found '''#format\u2014\u2014\u683c\u5f0f\u5316\u8f93\u51fa''' dic1 = {'name':'whw','age':22,'sex':'male'} r1 = '{} {} {}'.format('whw',22,'male') print(r1) r2 = '{1} {0} {1}'.format('whw',12,'male') print(r2) #12 whw 12 r3 = '{name} {age} {sex}'.format(name='whw',age=22,sex='male') print(r3) r4 = '{name}-{age}-{sex}'.format(**dic1) print(r4) '''#strip()\u2014\u2014\u6ce8\u610f\u53ea\u80fd\u6d88\u9664\u5de6\u53f3\u4e24\u8fb9\u7684\u5b57\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\u4e0e\u6362\u884c''' ss = '*SAsad#*' print(ss.strip('*'))#SAsad# print(ss.lstrip('*'))#SAsad#* print(ss.rstrip('*'))#*SAsad# '''f\u683c\u5f0f\u5316''' name = \"whw\" age = 18 print(f\"\u6211\u7684\u540d\u5b57\u662f{name},\u5e74\u9f84\u662f{age}\")","title":"\u5b57\u7b26\u4e32\u7684\u5e38\u7528\u64cd\u4f5c"},{"location":"python\u57fa\u7840/\u5e8f\u5217\u5316\u6a21\u5757/","text":"Python\u4e2d\u7684\u5e8f\u5217\u5316\u6a21\u5757 Python\u4e2d\u7684\u5e8f\u5217\u5316\u6a21\u5757\u5305\u62ec\uff1ajson\u3001pickle\u3001shelve\u3002 json \u5e38\u7528\u64cd\u4f5c\uff1adumps\u3001loads\u3001dump\u3001load\u65b9\u6cd5\u3002 dump \u4e0e load \u6709\u201c\u6301\u4e45\u5316\u201d\u529f\u80fd\uff01 dumps\u4e0eloads import json # dumps\u65b9\u6cd5\u2014\u2014\u5c06\u5b57\u5178(\u4e3b\u8981)\u5bf9\u8c61\u8f6c\u6362\u6210\u5b57\u7b26\u4e32 dic = {'a1':1,'b':2} s1 = json.dumps(dic) print(s1,type(s1)) #{\"a1\": 1, \"b\": 2} <class 'str'> # loads\u65b9\u6cd5\u2014\u2014\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u5178 d1 = json.loads(s1) print(d1,type(d1))#{'a1': 1, 'b': 2} <class 'dict'> di = '{\"a1\":1}' dl = '[1,2,3,4,5]' dii = json.loads(di) dll = json.loads(dl) print(dii,type(dii))#{'a1': 1} <class 'dict'> print(dll,type(dll))#[1, 2, 3, 4, 5] <class 'list'> dump\u4e0eload \u6ce8\u610f\uff0c\u624b\u52a8\u5728\u6587\u4ef6\u91cc\u5199\u7684\u8bdd\uff0c \u6587\u4ef6\u91cc\u7684\u952e\u503c \u5982\u679c\u662f\u5b57\u7b26\u4e32\u7684\u8bdd\u5fc5\u987b\u7528\u53cc\u5f15\u53f7\uff01\uff01\uff01 dic1 = {'a1':1,'b':2} # #dump\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\uff0c\u76f4\u63a5\u5c06\u5b57\u5178\u8f6c\u6362\u6210json\u5b57\u7b26\u4e32\u5199\u5165\u6587\u4ef6 json.dump(dic1,open('a1','w',encoding='utf8')) #load\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\uff0c\u76f4\u63a5\u5c06\u6587\u4ef6\u4e2d\u7684json\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u636e\u7ed3\u6784\u8fd4\u56de d = json.load(open('a1','r',encoding='utf8')) d['a1'] = 11 print(d)#{'a1': zz, 'b': 2} json\u7684\u51e0\u4e2a\u535a\u5ba2\u7b14\u8bb0 json\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u5b57\u7b26\u4e32\u4e3a\u5355\u5f15\u53f7\u7684\u4e00\u4e2a\u5751 \u5b57\u5178\u7684key\u4e3aint\u65f6\u7ecf\u8fc7\u5e8f\u5217\u5316\u3001\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\u540e\u4f1a\u53d8\u6210str Python\u7684datetime\u4e0eDecimal\u6570\u636e\u8fdb\u884cjson\u5e8f\u5217\u5316\u7684\u7b80\u5355\u8bf4\u660e \u5bf9\u542b\u6709date/datetime\u4ee5\u53caDecimal\u683c\u5f0f\u6570\u636e\u7684json\u6570\u636e\u8fdb\u884c\u8f6c\u6362 tornado\u7684self.write\u8f93\u5165\u5b57\u5178\u6570\u636e\u4e0ejson\u7684dumps\u65b9\u6cd5\u7684ensure_ascii\u53c2\u6570\u7684\u8bf4\u660e pickle \u57fa\u672c\u64cd\u4f5c ''' # pickle\u2014\u2014pickle\u53ea\u652f\u6301Python\u8bed\u8a00\uff01\uff01\uff01 # \u7528\u4e8e\u5b57\u7b26\u4e32 \u548c python\u6570\u636e\u7c7b\u578b\u95f4\u8fdb\u884c\u8f6c\u6362 pickle\uff0c\u7528\u4e8epython\u7279\u6709\u7684\u7c7b\u578b \u548c python\u7684\u6570\u636e\u7c7b\u578b\u95f4\u8fdb\u884c\u8f6c\u6362 # pickle\u6a21\u5757\u63d0\u4f9b\u4e86\u56db\u4e2a\u529f\u80fd\uff1adumps\u3001dump(\u5e8f\u5217\u5316\uff0c\u5b58\uff09\u3001loads\uff08\u53cd\u5e8f\u5217\u5316\uff0c\u8bfb\uff09\u3001load \uff08\u4e0d\u4ec5\u53ef\u4ee5\u5e8f\u5217\u5316\u5b57\u5178\uff0c\u5217\u8868... # \u53ef\u4ee5\u628apython\u4e2d\u4efb\u610f\u7684\u6570\u636e\u7c7b\u578b\u5e8f\u5217\u5316\uff09pickle\u662fpython\u7279\u6709\u7684\u6a21\u5757. ''' # dumps\u3001loads\u3001dump\u3001load # dump\u3001load\u652f\u6301\u6301\u4e45\u5316 import pickle #\u5c06\u5bf9\u8c61\u8f6c\u6362\u4e3a\u7c7b\u4f3c\u4e8c\u8fdb\u5236 print(pickle.dumps({'a1':1}))#b'\\x80\\x03}q\\x00X\\x01\\x00\\x00\\x00aq\\x01K\\x01s.' #\u5c06\u4e00\u5806\u7c7b\u4f3c\u4e8e\u4e8c\u8fdb\u5236\u7684\u4e1c\u897f\u8f6c\u6362\u4e3a\u5b57\u5178 print(pickle.loads(b'\\x80\\x03}q\\x00X\\x01\\x00\\x00\\x00aq\\x01K\\x01s.'))#{'a1': socketserver\u6a21\u5757-\u5faa\u73af\u63a5\u65360} #\u6ce8\u610f\u662fwb\u5f62\u5f0f\uff0c\u4e0d\u80fd\u6307\u5b9a\u7f16\u7801\uff01 pickle.dump({'b':2},open('p','wb')) d = pickle.load(open('p','rb')) print(d) #{'b': 2} ''' ###pickle\u4e0ejson\u7684\u5bf9\u6bd4### # loads\u2014\u2014 json\u91cc\u662f:\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u5b57\u5178\uff1bpickle\u91cc\uff1a\u5c06\u5b57\u8282\u8f6c\u6362\u4e3a\u5b57\u5178 # dumps\u2014\u2014json\u91cc\u662f\uff1a\u5c06\u5b57\u5178\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1bpickle\u91cc\u662f\uff1a\u5c06\u5b57\u5178\u8f6c\u6362\u4e3a\u5b57\u8282 # load\u2014\u2014json\u91cc\u662f\uff1a\u5c06\u6587\u4ef6\u4e2d\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u5178\uff1bpickle\u91cc\u662f\uff1a\u5c06\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u8f6c\u6362\u4e3a\u5b57\u5178 # dump\u2014\u2014json\u91cc\u662f\uff1a\u5c06\u5b57\u5178\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5199\u5165\u5230\u6587\u4ef6\u4e2d\uff1bpickle\u91cc\u662f\uff1a\u5c06\u5b57\u5178\u8f6c\u6362\u4e3a\u5b57\u8282\u5199\u5165\u5230\u6587\u4ef6\u4e2d ''' \u4e2a\u4eba\u535a\u5ba2\u53ca\u76f8\u5173\u7ec3\u4e60 \u5229\u7528pickle\u5904\u7406python\u5bf9\u8c61 import pickle def func1(): print(1) def func2(): print(2) if __name__ == '__main__': f1 = func1 f2 = func2 with open('p1','ab')as f: pickle.dump(f1,f) pickle.dump(f2,f) with open('p1','rb')as f: func1 = pickle.load(f) func2 = pickle.load(f) fff = pickle.load(f) fff2 = pickle.load(f) print(func1) print(func2) print(fff) print(fff2) func1() func2() fff() fff2() # for em in f: # print(em) # func = pickle.load(em) # func() shelve ###\u6587\u4ef6+\u5b57\u5178\u64cd\u4f5c import shelve #\u6ca1\u6709encoding f = shelve.open('sh',writeback=True) #\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 f['name'] = 'wanghw' f['age'] = 18 print(f['name']) print(f['age']) f['name'] = ['wanghw','whw'] print(f['name']) #\u67e5\u770b\u8fd9\u4e2a\u5b57\u5178\uff01 for i in f: print(i) #\u83b7\u53d6\u5230\u6240\u6709\u7684\u952e\uff0c\u5fc5\u987b\u7528for print(f[i])# \u83b7\u53d6\u6240\u6709\u7684\u503c l = f.items() print(list(l))#[('name', ['wanghw', 'whw']), ('age', 18)] # shelve\u6a21\u5757\u81ea\u52a8\u5e2e\u6211\u4eec dump\u4e0eload\u4e86\uff01 # \u6ce8\u610f\uff0c\u201c\u952e\u201d\u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\uff01\uff01\uff01 # \u6ce8\u610f\uff0c\u4ee5\u540e\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u5bf9\u5b57\u5178\u7684\u64cd\u4f5c\u5185\u5bb9\uff0c\u6709\u65f6\u5019\u5199\u4e0d\u8fdb\u53bb\uff0c # \u89e3\u51b3\uff1a\u5728open\u7684\u65f6\u5019\u52a0\u4e00\u4e2a\u53c2\u6570\uff1awriteback=True f = shelve.open('sh',writeback=True)","title":"06 \u5e8f\u5217\u5316\u6a21\u5757"},{"location":"python\u57fa\u7840/\u5e8f\u5217\u5316\u6a21\u5757/#python","text":"Python\u4e2d\u7684\u5e8f\u5217\u5316\u6a21\u5757\u5305\u62ec\uff1ajson\u3001pickle\u3001shelve\u3002","title":"Python\u4e2d\u7684\u5e8f\u5217\u5316\u6a21\u5757"},{"location":"python\u57fa\u7840/\u5e8f\u5217\u5316\u6a21\u5757/#json","text":"\u5e38\u7528\u64cd\u4f5c\uff1adumps\u3001loads\u3001dump\u3001load\u65b9\u6cd5\u3002 dump \u4e0e load \u6709\u201c\u6301\u4e45\u5316\u201d\u529f\u80fd\uff01 dumps\u4e0eloads import json # dumps\u65b9\u6cd5\u2014\u2014\u5c06\u5b57\u5178(\u4e3b\u8981)\u5bf9\u8c61\u8f6c\u6362\u6210\u5b57\u7b26\u4e32 dic = {'a1':1,'b':2} s1 = json.dumps(dic) print(s1,type(s1)) #{\"a1\": 1, \"b\": 2} <class 'str'> # loads\u65b9\u6cd5\u2014\u2014\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5b57\u5178 d1 = json.loads(s1) print(d1,type(d1))#{'a1': 1, 'b': 2} <class 'dict'> di = '{\"a1\":1}' dl = '[1,2,3,4,5]' dii = json.loads(di) dll = json.loads(dl) print(dii,type(dii))#{'a1': 1} <class 'dict'> print(dll,type(dll))#[1, 2, 3, 4, 5] <class 'list'> dump\u4e0eload \u6ce8\u610f\uff0c\u624b\u52a8\u5728\u6587\u4ef6\u91cc\u5199\u7684\u8bdd\uff0c \u6587\u4ef6\u91cc\u7684\u952e\u503c \u5982\u679c\u662f\u5b57\u7b26\u4e32\u7684\u8bdd\u5fc5\u987b\u7528\u53cc\u5f15\u53f7\uff01\uff01\uff01 dic1 = {'a1':1,'b':2} # #dump\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\uff0c\u76f4\u63a5\u5c06\u5b57\u5178\u8f6c\u6362\u6210json\u5b57\u7b26\u4e32\u5199\u5165\u6587\u4ef6 json.dump(dic1,open('a1','w',encoding='utf8')) #load\u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\uff0c\u76f4\u63a5\u5c06\u6587\u4ef6\u4e2d\u7684json\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u636e\u7ed3\u6784\u8fd4\u56de d = json.load(open('a1','r',encoding='utf8')) d['a1'] = 11 print(d)#{'a1': zz, 'b': 2}","title":"json"},{"location":"python\u57fa\u7840/\u5e8f\u5217\u5316\u6a21\u5757/#json_1","text":"json\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u5b57\u7b26\u4e32\u4e3a\u5355\u5f15\u53f7\u7684\u4e00\u4e2a\u5751 \u5b57\u5178\u7684key\u4e3aint\u65f6\u7ecf\u8fc7\u5e8f\u5217\u5316\u3001\u53cd\u5e8f\u5217\u5316\u64cd\u4f5c\u540e\u4f1a\u53d8\u6210str Python\u7684datetime\u4e0eDecimal\u6570\u636e\u8fdb\u884cjson\u5e8f\u5217\u5316\u7684\u7b80\u5355\u8bf4\u660e \u5bf9\u542b\u6709date/datetime\u4ee5\u53caDecimal\u683c\u5f0f\u6570\u636e\u7684json\u6570\u636e\u8fdb\u884c\u8f6c\u6362 tornado\u7684self.write\u8f93\u5165\u5b57\u5178\u6570\u636e\u4e0ejson\u7684dumps\u65b9\u6cd5\u7684ensure_ascii\u53c2\u6570\u7684\u8bf4\u660e","title":"json\u7684\u51e0\u4e2a\u535a\u5ba2\u7b14\u8bb0"},{"location":"python\u57fa\u7840/\u5e8f\u5217\u5316\u6a21\u5757/#pickle","text":"\u57fa\u672c\u64cd\u4f5c ''' # pickle\u2014\u2014pickle\u53ea\u652f\u6301Python\u8bed\u8a00\uff01\uff01\uff01 # \u7528\u4e8e\u5b57\u7b26\u4e32 \u548c python\u6570\u636e\u7c7b\u578b\u95f4\u8fdb\u884c\u8f6c\u6362 pickle\uff0c\u7528\u4e8epython\u7279\u6709\u7684\u7c7b\u578b \u548c python\u7684\u6570\u636e\u7c7b\u578b\u95f4\u8fdb\u884c\u8f6c\u6362 # pickle\u6a21\u5757\u63d0\u4f9b\u4e86\u56db\u4e2a\u529f\u80fd\uff1adumps\u3001dump(\u5e8f\u5217\u5316\uff0c\u5b58\uff09\u3001loads\uff08\u53cd\u5e8f\u5217\u5316\uff0c\u8bfb\uff09\u3001load \uff08\u4e0d\u4ec5\u53ef\u4ee5\u5e8f\u5217\u5316\u5b57\u5178\uff0c\u5217\u8868... # \u53ef\u4ee5\u628apython\u4e2d\u4efb\u610f\u7684\u6570\u636e\u7c7b\u578b\u5e8f\u5217\u5316\uff09pickle\u662fpython\u7279\u6709\u7684\u6a21\u5757. ''' # dumps\u3001loads\u3001dump\u3001load # dump\u3001load\u652f\u6301\u6301\u4e45\u5316 import pickle #\u5c06\u5bf9\u8c61\u8f6c\u6362\u4e3a\u7c7b\u4f3c\u4e8c\u8fdb\u5236 print(pickle.dumps({'a1':1}))#b'\\x80\\x03}q\\x00X\\x01\\x00\\x00\\x00aq\\x01K\\x01s.' #\u5c06\u4e00\u5806\u7c7b\u4f3c\u4e8e\u4e8c\u8fdb\u5236\u7684\u4e1c\u897f\u8f6c\u6362\u4e3a\u5b57\u5178 print(pickle.loads(b'\\x80\\x03}q\\x00X\\x01\\x00\\x00\\x00aq\\x01K\\x01s.'))#{'a1': socketserver\u6a21\u5757-\u5faa\u73af\u63a5\u65360} #\u6ce8\u610f\u662fwb\u5f62\u5f0f\uff0c\u4e0d\u80fd\u6307\u5b9a\u7f16\u7801\uff01 pickle.dump({'b':2},open('p','wb')) d = pickle.load(open('p','rb')) print(d) #{'b': 2} ''' ###pickle\u4e0ejson\u7684\u5bf9\u6bd4### # loads\u2014\u2014 json\u91cc\u662f:\u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3a\u5b57\u5178\uff1bpickle\u91cc\uff1a\u5c06\u5b57\u8282\u8f6c\u6362\u4e3a\u5b57\u5178 # dumps\u2014\u2014json\u91cc\u662f\uff1a\u5c06\u5b57\u5178\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1bpickle\u91cc\u662f\uff1a\u5c06\u5b57\u5178\u8f6c\u6362\u4e3a\u5b57\u8282 # load\u2014\u2014json\u91cc\u662f\uff1a\u5c06\u6587\u4ef6\u4e2d\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u5178\uff1bpickle\u91cc\u662f\uff1a\u5c06\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u8f6c\u6362\u4e3a\u5b57\u5178 # dump\u2014\u2014json\u91cc\u662f\uff1a\u5c06\u5b57\u5178\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5199\u5165\u5230\u6587\u4ef6\u4e2d\uff1bpickle\u91cc\u662f\uff1a\u5c06\u5b57\u5178\u8f6c\u6362\u4e3a\u5b57\u8282\u5199\u5165\u5230\u6587\u4ef6\u4e2d ''' \u4e2a\u4eba\u535a\u5ba2\u53ca\u76f8\u5173\u7ec3\u4e60 \u5229\u7528pickle\u5904\u7406python\u5bf9\u8c61 import pickle def func1(): print(1) def func2(): print(2) if __name__ == '__main__': f1 = func1 f2 = func2 with open('p1','ab')as f: pickle.dump(f1,f) pickle.dump(f2,f) with open('p1','rb')as f: func1 = pickle.load(f) func2 = pickle.load(f) fff = pickle.load(f) fff2 = pickle.load(f) print(func1) print(func2) print(fff) print(fff2) func1() func2() fff() fff2() # for em in f: # print(em) # func = pickle.load(em) # func()","title":"pickle"},{"location":"python\u57fa\u7840/\u5e8f\u5217\u5316\u6a21\u5757/#shelve","text":"###\u6587\u4ef6+\u5b57\u5178\u64cd\u4f5c import shelve #\u6ca1\u6709encoding f = shelve.open('sh',writeback=True) #\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 f['name'] = 'wanghw' f['age'] = 18 print(f['name']) print(f['age']) f['name'] = ['wanghw','whw'] print(f['name']) #\u67e5\u770b\u8fd9\u4e2a\u5b57\u5178\uff01 for i in f: print(i) #\u83b7\u53d6\u5230\u6240\u6709\u7684\u952e\uff0c\u5fc5\u987b\u7528for print(f[i])# \u83b7\u53d6\u6240\u6709\u7684\u503c l = f.items() print(list(l))#[('name', ['wanghw', 'whw']), ('age', 18)] # shelve\u6a21\u5757\u81ea\u52a8\u5e2e\u6211\u4eec dump\u4e0eload\u4e86\uff01 # \u6ce8\u610f\uff0c\u201c\u952e\u201d\u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\uff01\uff01\uff01 # \u6ce8\u610f\uff0c\u4ee5\u540e\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u5bf9\u5b57\u5178\u7684\u64cd\u4f5c\u5185\u5bb9\uff0c\u6709\u65f6\u5019\u5199\u4e0d\u8fdb\u53bb\uff0c # \u89e3\u51b3\uff1a\u5728open\u7684\u65f6\u5019\u52a0\u4e00\u4e2a\u53c2\u6570\uff1awriteback=True f = shelve.open('sh',writeback=True)","title":"shelve"},{"location":"python\u57fa\u7840/\u5f02\u5e38/","text":"\u4e2a\u4eba\u535a\u5ba2 Python\u5f02\u5e38\u5904\u7406 \u5f02\u5e38\u5d4c\u5957\u65f6\u6ce8\u610f\u7684\u95ee\u9898 Python\u4e2d\u7c7b\u7684\u5f52\u4e00\u5316\u8bbe\u8ba1 \u5229\u7528Python\u7684traceback\u6a21\u5757\u663e\u793a\u4e0e\u8bb0\u5f55\u5f02\u5e38 \u81ea\u5b9a\u4e49\u5f02\u5e38 class MY(BaseException): def __init__(self,msg): super().__init__() self.msg = msg def __str__(self): return f\"{self.msg}\" try: print(555555) raise MY(\"666\") except MY as e: # \u81ea\u5b9a\u4e49\u5f02\u5e38\u9700\u8981\u81ea\u5df1\u6355\u83b7\uff01\uff01\uff01 print(e) import traceback print(traceback.format_exc()) except Exception as e: print(e) # else: # print(\"------------\")","title":"02 \u5f02\u5e38\u5904\u7406"},{"location":"python\u57fa\u7840/\u5f02\u5e38/#_1","text":"Python\u5f02\u5e38\u5904\u7406 \u5f02\u5e38\u5d4c\u5957\u65f6\u6ce8\u610f\u7684\u95ee\u9898 Python\u4e2d\u7c7b\u7684\u5f52\u4e00\u5316\u8bbe\u8ba1 \u5229\u7528Python\u7684traceback\u6a21\u5757\u663e\u793a\u4e0e\u8bb0\u5f55\u5f02\u5e38","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u57fa\u7840/\u5f02\u5e38/#_2","text":"class MY(BaseException): def __init__(self,msg): super().__init__() self.msg = msg def __str__(self): return f\"{self.msg}\" try: print(555555) raise MY(\"666\") except MY as e: # \u81ea\u5b9a\u4e49\u5f02\u5e38\u9700\u8981\u81ea\u5df1\u6355\u83b7\uff01\uff01\uff01 print(e) import traceback print(traceback.format_exc()) except Exception as e: print(e) # else: # print(\"------------\")","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38"},{"location":"python\u57fa\u7840/\u64cd\u4f5cexcel/","text":"\u4e2a\u4eba\u535a\u5ba2 Python3\u64cd\u4f5cExcel python\u64cd\u4f5cexcel\u2014\u2014 openpyxl","title":"16 Python3\u64cd\u4f5cExcel"},{"location":"python\u57fa\u7840/\u64cd\u4f5cexcel/#_1","text":"Python3\u64cd\u4f5cExcel python\u64cd\u4f5cexcel\u2014\u2014 openpyxl","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u57fa\u7840/\u6570\u5b57/","text":"round\u51fd\u6570 \u5173\u4e8ePython\u6570\u5b57\u7684\u8ba1\u7b97\u8fd9\u91cc\u5e73\u65f6\u4f1a\u4f7f\u7528round\u51fd\u6570\u3002 Python\u4e2dround\u51fd\u6570\u7684\u4f7f\u7528 \u4f46\u662fround\u51fd\u6570\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u8fdb\u884c\u56db\u820d\u4e94\u5165\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\uff1a Python \u4e2d\u5173\u4e8e round \u51fd\u6570\u7684\u5c0f\u5751","title":"06 \u6570\u5b57\u7c7b\u578b"},{"location":"python\u57fa\u7840/\u6570\u5b57/#round","text":"\u5173\u4e8ePython\u6570\u5b57\u7684\u8ba1\u7b97\u8fd9\u91cc\u5e73\u65f6\u4f1a\u4f7f\u7528round\u51fd\u6570\u3002 Python\u4e2dround\u51fd\u6570\u7684\u4f7f\u7528 \u4f46\u662fround\u51fd\u6570\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u8fdb\u884c\u56db\u820d\u4e94\u5165\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\uff1a Python \u4e2d\u5173\u4e8e round \u51fd\u6570\u7684\u5c0f\u5751","title":"round\u51fd\u6570"},{"location":"python\u8fdb\u9636/Github\u4e0e\u865a\u62df\u73af\u5883/","text":"\u4e2a\u4eba\u535a\u5ba2 windows\u4e0bGitHub\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u4ee5\u53ca\u9879\u76ee\u7684\u4e0a\u4f20\u8fc7\u7a0b\u8be6\u7ec6\u4ecb\u7ecd linux\u4e0b\u865a\u62df\u73af\u5883\u6a21\u5757virtualenv\u53ca\u7ba1\u7406\u5de5\u5177virtualenvwrapper\u7684\u4f7f\u7528 windows\u4e0emac\u4e0bvirtualenv\u4e0ePycharm\u7684\u7ed3\u5408\u4f7f\u7528 pipenv\uff1apython\u865a\u62df\u73af\u5883\u4e0e\u5305\u7ba1\u7406\u5de5\u5177\u4ecb\u7ecd requirements\u6587\u4ef6\u7684\u4f7f\u7528","title":"02 Github\u4e0e\u865a\u62df\u73af\u5883\u7684\u4f7f\u7528"},{"location":"python\u8fdb\u9636/Github\u4e0e\u865a\u62df\u73af\u5883/#_1","text":"windows\u4e0bGitHub\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u4ee5\u53ca\u9879\u76ee\u7684\u4e0a\u4f20\u8fc7\u7a0b\u8be6\u7ec6\u4ecb\u7ecd linux\u4e0b\u865a\u62df\u73af\u5883\u6a21\u5757virtualenv\u53ca\u7ba1\u7406\u5de5\u5177virtualenvwrapper\u7684\u4f7f\u7528 windows\u4e0emac\u4e0bvirtualenv\u4e0ePycharm\u7684\u7ed3\u5408\u4f7f\u7528 pipenv\uff1apython\u865a\u62df\u73af\u5883\u4e0e\u5305\u7ba1\u7406\u5de5\u5177\u4ecb\u7ecd requirements\u6587\u4ef6\u7684\u4f7f\u7528","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u8fdb\u9636/asyncio/","text":"1.\u534f\u7a0b \u534f\u7a0b\u662fasyncio\u7684\u57fa\u7840\u3002 \u534f\u7a0b\uff08Coroutine\uff09\uff0c\u4e5f\u53ef\u4ee5\u88ab\u79f0\u4e3a\u5fae\u7ebf\u7a0b\uff0c\u662f\u4e00\u79cd\u7528\u6237\u6001\u5185\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u6280\u672f\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5176\u5b9e\u5c31\u662f\u901a\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u5b9e\u73b0\u4ee3\u7801\u5757\u76f8\u4e92\u5207\u6362\u6267\u884c\u3002\u4f8b\u5982\uff1a def func1(): print(1) ... print(2) def func2(): print(3) ... print(4) func1() func2() \u4e0a\u8ff0\u4ee3\u7801\u662f\u666e\u901a\u7684\u51fd\u6570\u5b9a\u4e49\u548c\u6267\u884c\uff0c\u6309\u6d41\u7a0b\u5206\u522b\u6267\u884c\u4e24\u4e2a\u51fd\u6570\u4e2d\u7684\u4ee3\u7801\uff0c\u5e76\u5148\u540e\u4f1a\u8f93\u51fa\uff1a 1\u30012\u30013\u30014 \u3002\u4f46\u5982\u679c\u4ecb\u5165\u534f\u7a0b\u6280\u672f\u90a3\u4e48\u5c31\u53ef\u4ee5\u5b9e\u73b0\u51fd\u6570\u89c1\u4ee3\u7801\u5207\u6362\u6267\u884c\uff0c\u6700\u7ec8\u8f93\u5165\uff1a 1\u30013\u30012\u30014 \u3002 \u5728Python\u4e2d\u6709\u591a\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u534f\u7a0b\uff0c\u4f8b\u5982\uff1a greenlet\uff0c\u662f\u4e00\u4e2a\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u7528\u4e8e\u5b9e\u73b0\u534f\u7a0b\u4ee3\u7801\uff08Gevent\u534f\u7a0b\u5c31\u662f\u57fa\u4e8egreenlet\u5b9e\u73b0\uff09 yield\uff0c\u751f\u6210\u5668\uff0c\u501f\u52a9\u751f\u6210\u5668\u7684\u7279\u70b9\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u534f\u7a0b\u4ee3\u7801\u3002 asyncio\uff0c\u5728Python3.4\u4e2d\u5f15\u5165\u7684\u6a21\u5757\u7528\u4e8e\u7f16\u5199\u534f\u7a0b\u4ee3\u7801\u3002 async & awiat\uff0c\u5728Python3.5\u4e2d\u5f15\u5165\u7684\u4e24\u4e2a\u5173\u952e\u5b57\uff0c\u7ed3\u5408asyncio\u6a21\u5757\u53ef\u4ee5\u66f4\u65b9\u4fbf\u7684\u7f16\u5199\u534f\u7a0b\u4ee3\u7801\u3002 1.1 greenlet greentlet\u662f\u4e00\u4e2a\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u9700\u8981\u63d0\u524d\u5b89\u88c5 pip3 install greenlet \u624d\u80fd\u4f7f\u7528\u3002 from greenlet import greenlet def func1(): print(1) # \u7b2c1\u6b65\uff1a\u8f93\u51fa 1 gr2.switch() # \u7b2c3\u6b65\uff1a\u5207\u6362\u5230 func2 \u51fd\u6570 print(2) # \u7b2c6\u6b65\uff1a\u8f93\u51fa 2 gr2.switch() # \u7b2c7\u6b65\uff1a\u5207\u6362\u5230 func2 \u51fd\u6570\uff0c\u4ece\u4e0a\u4e00\u6b21\u6267\u884c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5411\u540e\u6267\u884c def func2(): print(3) # \u7b2c4\u6b65\uff1a\u8f93\u51fa 3 gr1.switch() # \u7b2c5\u6b65\uff1a\u5207\u6362\u5230 func1 \u51fd\u6570\uff0c\u4ece\u4e0a\u4e00\u6b21\u6267\u884c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5411\u540e\u6267\u884c print(4) # \u7b2c8\u6b65\uff1a\u8f93\u51fa 4 gr1 = greenlet(func1) gr2 = greenlet(func2) gr1.switch() # \u7b2c1\u6b65\uff1a\u53bb\u6267\u884c func1 \u51fd\u6570 \u6ce8\u610f\uff1aswitch\u4e2d\u4e5f\u53ef\u4ee5\u4f20\u9012\u53c2\u6570\u7528\u4e8e\u5728\u5207\u6362\u6267\u884c\u65f6\u76f8\u4e92\u4f20\u9012\u503c\u3002 1.2 yield \u57fa\u4e8ePython\u7684\u751f\u6210\u5668\u7684yield\u548cyield form\u5173\u952e\u5b57\u5b9e\u73b0\u534f\u7a0b\u4ee3\u7801\u3002 def func1(): yield 1 yield from func2() yield 2 def func2(): yield 3 yield 4 f1 = func1() for item in f1: print(item) \u6ce8\u610f\uff1ayield form\u5173\u952e\u5b57\u662f\u5728Python3.3\u4e2d\u5f15\u5165\u7684\u3002 1.3 asyncio \u5728Python3.4\u4e4b\u524d\u5b98\u65b9\u672a\u63d0\u4f9b\u534f\u7a0b\u7684\u7c7b\u5e93\uff0c\u4e00\u822c\u5927\u5bb6\u90fd\u662f\u4f7f\u7528greenlet\u7b49\u5176\u4ed6\u6765\u5b9e\u73b0\u3002\u5728Python3.4\u53d1\u5e03\u540e\u5b98\u65b9\u6b63\u5f0f\u652f\u6301\u534f\u7a0b\uff0c\u5373\uff1aasyncio\u6a21\u5757\u3002 import asyncio @asyncio.coroutine def func1(): print(1) yield from asyncio.sleep(2) # \u9047\u5230IO\u8017\u65f6\u64cd\u4f5c\uff0c\u81ea\u52a8\u5316\u5207\u6362\u5230tasks\u4e2d\u7684\u5176\u4ed6\u4efb\u52a1 print(2) @asyncio.coroutine def func2(): print(3) yield from asyncio.sleep(2) # \u9047\u5230IO\u8017\u65f6\u64cd\u4f5c\uff0c\u81ea\u52a8\u5316\u5207\u6362\u5230tasks\u4e2d\u7684\u5176\u4ed6\u4efb\u52a1 print(4) tasks = [ asyncio.ensure_future( func1() ), asyncio.ensure_future( func2() ) ] loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(tasks)) \u6ce8\u610f\uff1a\u57fa\u4e8easyncio\u6a21\u5757\u5b9e\u73b0\u7684\u534f\u7a0b\u6bd4\u4e4b\u524d\u7684\u8981\u66f4\u5389\u5bb3\uff0c\u56e0\u4e3a\u4ed6\u7684\u5185\u90e8\u8fd8\u96c6\u6210\u4e86\u9047\u5230IO\u8017\u65f6\u64cd\u4f5c\u81ea\u52a8\u5207\u82b1\u7684\u529f\u80fd\u3002 1.4 async & awit async & awit \u5173\u952e\u5b57\u5728Python3.5\u7248\u672c\u4e2d\u6b63\u5f0f\u5f15\u5165\uff0c\u57fa\u4e8e\u4ed6\u7f16\u5199\u7684\u534f\u7a0b\u4ee3\u7801\u5176\u5b9e\u5c31\u662f \u4e0a\u4e00\u793a\u4f8b \u7684\u52a0\u5f3a\u7248\uff0c\u8ba9\u4ee3\u7801\u53ef\u4ee5\u66f4\u52a0\u7b80\u4fbf\u3002 Python3.8\u4e4b\u540e @asyncio.coroutine \u88c5\u9970\u5668\u5c31\u4f1a\u88ab\u79fb\u9664\uff0c\u63a8\u8350\u4f7f\u7528async & awit \u5173\u952e\u5b57\u5b9e\u73b0\u534f\u7a0b\u4ee3\u7801\u3002 import asyncio async def func1(): print(1) await asyncio.sleep(2) print(2) async def func2(): print(3) await asyncio.sleep(2) print(4) tasks = [ asyncio.ensure_future(func1()), asyncio.ensure_future(func2()) ] loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(tasks)) 1.5 \u5c0f\u7ed3 \u5173\u4e8e\u534f\u7a0b\u6709\u591a\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u76ee\u524d\u4e3b\u6d41\u4f7f\u7528\u662fPython\u5b98\u65b9\u63a8\u8350\u7684asyncio\u6a21\u5757\u548casync&await\u5173\u952e\u5b57\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a\u5728tonado\u3001sanic\u3001fastapi\u3001django3 \u4e2d\u5747\u5df2\u652f\u6301\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4e5f\u4f1a\u9488\u5bf9 asyncio\u6a21\u5757 + async & await \u5173\u952e\u5b57\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u8bb2\u89e3\u3002 2.\u534f\u7a0b\u7684\u610f\u4e49 \u901a\u8fc7\u5b66\u4e60\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u5230\u534f\u7a0b\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u5728\u591a\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u8fdb\u884c\u6765\u56de\u5207\u6362\u6267\u884c\u3002 \u4f46\u662f\uff0c\u534f\u7a0b\u6765\u56de\u5207\u6362\u6267\u884c\u7684\u610f\u4e49\u4f55\u5728\u5462\uff1f \u8ba1\u7b97\u578b\u7684\u64cd\u4f5c\uff0c\u5229\u7528\u534f\u7a0b\u6765\u56de\u5207\u6362\u6267\u884c\uff0c\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u6765\u56de\u5207\u6362\u5e76\u4fdd\u5b58\u72b6\u6001 \u53cd\u5012\u4f1a\u964d\u4f4e\u6027\u80fd\u3002 IO\u578b\u7684\u64cd\u4f5c\uff0c\u5229\u7528\u534f\u7a0b\u5728IO\u7b49\u5f85\u65f6\u95f4\u5c31\u53bb\u5207\u6362\u6267\u884c\u5176\u4ed6\u4efb\u52a1\uff0c\u5f53IO\u64cd\u4f5c\u7ed3\u675f\u540e\u518d\u81ea\u52a8\u56de\u8c03\uff0c\u90a3\u4e48\u5c31\u4f1a\u5927\u5927\u8282\u7701\u8d44\u6e90\u5e76\u63d0\u4f9b\u6027\u80fd\uff0c\u4ece\u800c\u5b9e\u73b0\u5f02\u6b65\u7f16\u7a0b\uff08\u4e0d\u7b49\u5f85\u4efb\u52a1\u7ed3\u675f\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u4ee3\u7801\uff09\u3002 2.1 \u722c\u866b\u6848\u4f8b \u4f8b\u5982\uff1a\u7528\u4ee3\u7801\u5b9e\u73b0\u4e0b\u8f7d url_list \u4e2d\u7684\u56fe\u7247\u3002 \u65b9\u5f0f\u4e00\uff1a \u540c\u6b65\u7f16\u7a0b\u5b9e\u73b0 \"\"\" \u4e0b\u8f7d\u56fe\u7247\u4f7f\u7528\u7b2c\u4e09\u65b9\u6a21\u5757requests\uff0c\u8bf7\u63d0\u524d\u5b89\u88c5\uff1apip3 install requests \"\"\" import requests def download_image(url): print(\"\u5f00\u59cb\u4e0b\u8f7d:\",url) # \u53d1\u9001\u7f51\u7edc\u8bf7\u6c42\uff0c\u4e0b\u8f7d\u56fe\u7247 response = requests.get(url) print(\"\u4e0b\u8f7d\u5b8c\u6210\") # \u56fe\u7247\u4fdd\u5b58\u5230\u672c\u5730\u6587\u4ef6 file_name = url.rsplit('_')[-1] with open(file_name, mode='wb') as file_object: file_object.write(response.content) if __name__ == '__main__': url_list = [ 'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg', 'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg', 'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg' ] for item in url_list: download_image(item) \u65b9\u5f0f\u4e8c\uff1a \u57fa\u4e8e\u534f\u7a0b\u7684\u5f02\u6b65\u7f16\u7a0b\u5b9e\u73b0 \"\"\" \u4e0b\u8f7d\u56fe\u7247\u4f7f\u7528\u7b2c\u4e09\u65b9\u6a21\u5757aiohttp\uff0c\u8bf7\u63d0\u524d\u5b89\u88c5\uff1apip3 install aiohttp \"\"\" #!/usr/bin/env python # -*- coding:utf-8 -*- import aiohttp import asyncio async def fetch(session, url): print(\"\u53d1\u9001\u8bf7\u6c42\uff1a\", url) async with session.get(url, verify_ssl=False) as response: content = await response.content.read() file_name = url.rsplit('_')[-1] with open(file_name, mode='wb') as file_object: file_object.write(content) async def main(): async with aiohttp.ClientSession() as session: url_list = [ 'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg', 'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg', 'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg' ] tasks = [asyncio.create_task(fetch(session, url)) for url in url_list] await asyncio.wait(tasks) if __name__ == '__main__': asyncio.run(main()) \u4e0a\u8ff0\u4e24\u79cd\u7684\u6267\u884c\u5bf9\u6bd4\u4e4b\u540e\u4f1a\u53d1\u73b0\uff0c \u57fa\u4e8e\u534f\u7a0b\u7684\u5f02\u6b65\u7f16\u7a0b \u8981\u6bd4 \u540c\u6b65\u7f16\u7a0b \u7684\u6548\u7387\u9ad8\u4e86\u5f88\u591a\u3002\u56e0\u4e3a\uff1a \u540c\u6b65\u7f16\u7a0b\uff0c\u6309\u7167\u987a\u5e8f\u9010\u4e00\u6392\u961f\u6267\u884c\uff0c\u5982\u679c\u56fe\u7247\u4e0b\u8f7d\u65f6\u95f4\u4e3a2\u5206\u949f\uff0c\u90a3\u4e48\u5168\u90e8\u6267\u884c\u5b8c\u5219\u9700\u89816\u5206\u949f\u3002 \u5f02\u6b65\u7f16\u7a0b\uff0c\u51e0\u4e4e\u540c\u65f6\u53d1\u51fa\u4e863\u4e2a\u4e0b\u8f7d\u4efb\u52a1\u7684\u8bf7\u6c42\uff08\u9047\u5230IO\u8bf7\u6c42\u81ea\u52a8\u5207\u6362\u53bb\u53d1\u9001\u5176\u4ed6\u4efb\u52a1\u8bf7\u6c42\uff09\uff0c\u5982\u679c\u56fe\u7247\u4e0b\u8f7d\u65f6\u95f4\u4e3a2\u5206\u949f\uff0c\u90a3\u4e48\u5168\u90e8\u6267\u884c\u5b8c\u6bd5\u4e5f\u5927\u6982\u9700\u89812\u5206\u949f\u5de6\u53f3\u5c31\u53ef\u4ee5\u4e86\u3002 2.2 \u5c0f\u7ed3 \u534f\u7a0b\u4e00\u822c\u5e94\u7528\u5728\u6709IO\u64cd\u4f5c\u7684\u7a0b\u5e8f\u4e2d\uff0c\u56e0\u4e3a\u534f\u7a0b\u53ef\u4ee5\u5229\u7528IO\u7b49\u5f85\u7684\u65f6\u95f4\u53bb\u6267\u884c\u4e00\u4e9b\u5176\u4ed6\u7684\u4ee3\u7801\uff0c\u4ece\u800c\u63d0\u5347\u4ee3\u7801\u6267\u884c\u6548\u7387\u3002 \u751f\u6d3b\u4e2d\u4e0d\u4e5f\u662f\u8fd9\u6837\u7684\u4e48\uff0c\u5047\u8bbe \u4f60\u662f\u4e00\u5bb6\u5236\u9020\u6c7d\u8f66\u7684\u8001\u677f\uff0c\u5458\u5de5\u70b9\u51fb\u8bbe\u5907\u7684\u3010\u5f00\u59cb\u3011\u6309\u94ae\u4e4b\u540e\uff0c\u5728\u8bbe\u5907\u524d\u9700\u7b49\u5f8530\u5206\u949f\uff0c\u7136\u540e\u70b9\u51fb\u3010\u7ed3\u675f\u3011\u6309\u94ae\uff0c\u6b64\u65f6\u4f5c\u4e3a\u8001\u677f\u7684\u4f60\u4e00\u5b9a\u5e0c\u671b\u8fd9\u4e2a\u5458\u5de5\u5728\u7b49\u5f85\u7684\u90a330\u5206\u949f\u7684\u65f6\u95f4\u53bb\u505a\u70b9\u5176\u4ed6\u7684\u5de5\u4f5c\u3002 3.\u5f02\u6b65\u7f16\u7a0b \u57fa\u4e8e async & await \u5173\u952e\u5b57\u7684\u534f\u7a0b\u53ef\u4ee5\u5b9e\u73b0\u5f02\u6b65\u7f16\u7a0b\uff0c\u8fd9\u4e5f\u662f\u76ee\u524dpython\u5f02\u6b65\u76f8\u5173\u7684\u4e3b\u6d41\u6280\u672f\u3002 \u60f3\u8981\u771f\u6b63\u7684\u4e86\u89e3Python\u4e2d\u5185\u7f6e\u7684\u5f02\u6b65\u7f16\u7a0b\uff0c\u6839\u636e\u4e0b\u6587\u7684\u987a\u5e8f\u4e00\u70b9\u70b9\u6765\u770b\u3002 3.1 \u4e8b\u4ef6\u5faa\u73af \u4e8b\u4ef6\u5faa\u73af\uff0c\u53ef\u4ee5\u628a\u4ed6\u5f53\u505a\u662f\u4e00\u4e2awhile\u5faa\u73af\uff0c\u8fd9\u4e2awhile\u5faa\u73af\u5728\u5468\u671f\u6027\u7684\u8fd0\u884c\u5e76\u6267\u884c\u4e00\u4e9b \u4efb\u52a1 \uff0c\u5728\u7279\u5b9a\u6761\u4ef6\u4e0b\u7ec8\u6b62\u5faa\u73af\u3002 # \u4f2a\u4ee3\u7801 \u4efb\u52a1\u5217\u8868 = [ \u4efb\u52a11, \u4efb\u52a12, \u4efb\u52a13,... ] while True: \u53ef\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\uff0c\u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u5217\u8868 = \u53bb\u4efb\u52a1\u5217\u8868\u4e2d\u68c0\u67e5\u6240\u6709\u7684\u4efb\u52a1\uff0c\u5c06'\u53ef\u6267\u884c'\u548c'\u5df2\u5b8c\u6210'\u7684\u4efb\u52a1\u8fd4\u56de for \u5c31\u7eea\u4efb\u52a1 in \u5df2\u51c6\u5907\u5c31\u7eea\u7684\u4efb\u52a1\u5217\u8868: \u6267\u884c\u5df2\u5c31\u7eea\u7684\u4efb\u52a1 for \u5df2\u5b8c\u6210\u7684\u4efb\u52a1 in \u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u5217\u8868: \u5728\u4efb\u52a1\u5217\u8868\u4e2d\u79fb\u9664 \u5df2\u5b8c\u6210\u7684\u4efb\u52a1 \u5982\u679c \u4efb\u52a1\u5217\u8868 \u4e2d\u7684\u4efb\u52a1\u90fd\u5df2\u5b8c\u6210\uff0c\u5219\u7ec8\u6b62\u5faa\u73af \u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u6765\u83b7\u53d6\u548c\u521b\u5efa\u4e8b\u4ef6\u5faa\u73af\u3002 import asyncio loop = asyncio.get_event_loop() 3.2 \u534f\u7a0b\u548c\u5f02\u6b65\u7f16\u7a0b \u534f\u7a0b\u51fd\u6570\uff0c\u5b9a\u4e49\u5f62\u5f0f\u4e3a async def \u7684\u51fd\u6570\u3002 \u534f\u7a0b\u5bf9\u8c61\uff0c\u8c03\u7528 \u534f\u7a0b\u51fd\u6570 \u6240\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 # \u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\u51fd\u6570 async def func(): pass # \u8c03\u7528\u534f\u7a0b\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61 result = func() \u6ce8\u610f\uff1a\u8c03\u7528\u534f\u7a0b\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u5185\u90e8\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\uff0c\u53ea\u662f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002 3.2.1 \u57fa\u672c\u5e94\u7528 \u7a0b\u5e8f\u4e2d\uff0c\u5982\u679c\u60f3\u8981\u6267\u884c\u534f\u7a0b\u51fd\u6570\u7684\u5185\u90e8\u4ee3\u7801\uff0c\u9700\u8981 \u4e8b\u4ef6\u5faa\u73af \u548c \u534f\u7a0b\u5bf9\u8c61 \u914d\u5408\u624d\u80fd\u5b9e\u73b0\uff0c\u5982\uff1a import asyncio async def func(): print(\"\u534f\u7a0b\u5185\u90e8\u4ee3\u7801\") # \u8c03\u7528\u534f\u7a0b\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002 result = func() # \u65b9\u5f0f\u4e00 # loop = asyncio.get_event_loop() # \u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af # loop.run_until_complete(result) # \u5c06\u534f\u7a0b\u5f53\u505a\u4efb\u52a1\u63d0\u4ea4\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\uff0c\u534f\u7a0b\u6267\u884c\u5b8c\u6210\u4e4b\u540e\u7ec8\u6b62\u3002 # \u65b9\u5f0f\u4e8c # \u672c\u8d28\u4e0a\u65b9\u5f0f\u4e00\u662f\u4e00\u6837\u7684\uff0c\u5185\u90e8\u5148 \u521b\u5efa\u4e8b\u4ef6\u5faa\u73af \u7136\u540e\u6267\u884c run_until_complete\uff0c\u4e00\u4e2a\u7b80\u4fbf\u7684\u5199\u6cd5\u3002 # asyncio.run \u51fd\u6570\u5728 Python 3.7 \u4e2d\u52a0\u5165 asyncio \u6a21\u5757\uff0c asyncio.run(result) \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\uff1a\u5c06 \u534f\u7a0b \u5f53\u505a\u4efb\u52a1\u6dfb\u52a0\u5230 \u4e8b\u4ef6\u5faa\u73af \u7684\u4efb\u52a1\u5217\u8868\uff0c\u7136\u540e\u4e8b\u4ef6\u5faa\u73af\u68c0\u6d4b\u5217\u8868\u4e2d\u7684 \u534f\u7a0b \u662f\u5426 \u5df2\u51c6\u5907\u5c31\u7eea\uff08\u9ed8\u8ba4\u53ef\u7406\u89e3\u4e3a\u5c31\u7eea\u72b6\u6001\uff09\uff0c\u5982\u679c\u51c6\u5907\u5c31\u7eea\u5219\u6267\u884c\u5176\u5185\u90e8\u4ee3\u7801\u3002 3.2.2 await await\u662f\u4e00\u4e2a\u53ea\u80fd\u5728\u534f\u7a0b\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u9047\u5230IO\u64cd\u4f5c\u65f6\u6302\u8d77 \u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u6302\u8d77\u8fc7\u7a0b\u4e2d \u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u7684\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u5f53\u524d\u534f\u7a0bIO\u5904\u7406\u5b8c\u6210\u65f6\uff0c\u53ef\u4ee5\u518d\u6b21\u5207\u6362\u56de\u6765\u6267\u884cawait\u4e4b\u540e\u7684\u4ee3\u7801\u3002\u4ee3\u7801\u5982\u4e0b\uff1a \u793a\u4f8b1\uff1a import asyncio async def func(): print(\"\u6267\u884c\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u4ee3\u7801\") # \u9047\u5230IO\u64cd\u4f5c\u6302\u8d77\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u7b49IO\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002 # \u5f53\u524d\u534f\u7a0b\u6302\u8d77\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u3002 response = await asyncio.sleep(2) print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response) result = func() asyncio.run(result) \u793a\u4f8b2\uff1a import asyncio async def others(): print(\"start\") await asyncio.sleep(2) print('end') return '\u8fd4\u56de\u503c' async def func(): print(\"\u6267\u884c\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u4ee3\u7801\") # \u9047\u5230IO\u64cd\u4f5c\u6302\u8d77\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u7b49IO\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002 # \u5f53\u524d\u534f\u7a0b\u6302\u8d77\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u3002 response = await others() print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response) asyncio.run( func() ) \u793a\u4f8b3\uff1a import asyncio async def others(): print(\"start\") await asyncio.sleep(2) print('end') return '\u8fd4\u56de\u503c' async def func(): print(\"\u6267\u884c\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u4ee3\u7801\") # \u9047\u5230IO\u64cd\u4f5c\u6302\u8d77\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u7b49IO\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002 # \u5f53\u524d\u534f\u7a0b\u6302\u8d77\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u3002 response1 = await others() print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response1) response2 = await others() print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response2) asyncio.run( func() ) \u4e0a\u8ff0\u7684\u6240\u6709\u793a\u4f8b\u90fd\u53ea\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u4efb\u52a1\uff0c\u5373\uff1a\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\uff0c\u6240\u4ee5\u5728IO\u7b49\u5f85\u65f6\u65e0\u6cd5\u6f14\u793a\u5207\u6362\u5230\u5176\u4ed6\u4efb\u52a1\u6548\u679c\u3002 \u5728\u7a0b\u5e8f\u60f3\u8981\u521b\u5efa\u591a\u4e2a\u4efb\u52a1\u5bf9\u8c61\uff0c\u9700\u8981\u4f7f\u7528Task\u5bf9\u8c61\u6765\u5b9e\u73b0\u3002 3.2.3 Task\u5bf9\u8c61 Tasks are used to schedule coroutines concurrently. When a coroutine is wrapped into a Task with functions like asyncio. create_task() the coroutine is automatically scheduled to run soon\u3002 Tasks\u7528\u4e8e\u5e76\u53d1\u8c03\u5ea6\u534f\u7a0b\uff0c\u901a\u8fc7 asyncio.create_task(\u534f\u7a0b\u5bf9\u8c61) \u7684\u65b9\u5f0f\u521b\u5efaTask\u5bf9\u8c61\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u534f\u7a0b\u52a0\u5165\u4e8b\u4ef6\u5faa\u73af\u4e2d\u7b49\u5f85\u88ab\u8c03\u5ea6\u6267\u884c\u3002\u9664\u4e86\u4f7f\u7528 asyncio.create_task() \u51fd\u6570\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528\u4f4e\u5c42\u7ea7\u7684 loop.create_task() \u6216 ensure_future() \u51fd\u6570\u3002\u4e0d\u5efa\u8bae\u624b\u52a8\u5b9e\u4f8b\u5316 Task \u5bf9\u8c61\u3002 \u672c\u8d28\u4e0a\u662f\u5c06\u534f\u7a0b\u5bf9\u8c61\u5c01\u88c5\u6210task\u5bf9\u8c61\uff0c\u5e76\u5c06\u534f\u7a0b\u7acb\u5373\u52a0\u5165\u4e8b\u4ef6\u5faa\u73af\uff0c\u540c\u65f6\u8ffd\u8e2a\u534f\u7a0b\u7684\u72b6\u6001\u3002 \u6ce8\u610f\uff1a asyncio.create_task() \u51fd\u6570\u5728 Python 3.7 \u4e2d\u88ab\u52a0\u5165\u3002\u5728 Python 3.7 \u4e4b\u524d\uff0c\u53ef\u4ee5\u6539\u7528\u4f4e\u5c42\u7ea7\u7684 asyncio.ensure_future() \u51fd\u6570\u3002 \u793a\u4f8b1\uff1a import asyncio async def func(): print(1) await asyncio.sleep(2) print(2) return \"\u8fd4\u56de\u503c\" async def main(): print(\"main\u5f00\u59cb\") # \u521b\u5efa\u534f\u7a0b\uff0c\u5c06\u534f\u7a0b\u5c01\u88c5\u5230\u4e00\u4e2aTask\u5bf9\u8c61\u4e2d\u5e76\u7acb\u5373\u6dfb\u52a0\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\uff0c # \u7b49\u5f85\u4e8b\u4ef6\u5faa\u73af\u53bb\u6267\u884c\uff08\u9ed8\u8ba4\u662f\u5c31\u7eea\u72b6\u6001\uff09\u3002 task1 = asyncio.create_task(func()) # \u521b\u5efa\u534f\u7a0b\uff0c\u5c06\u534f\u7a0b\u5c01\u88c5\u5230\u4e00\u4e2aTask\u5bf9\u8c61\u4e2d\u5e76\u7acb\u5373\u6dfb\u52a0\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\uff0c # \u7b49\u5f85\u4e8b\u4ef6\u5faa\u73af\u53bb\u6267\u884c\uff08\u9ed8\u8ba4\u662f\u5c31\u7eea\u72b6\u6001\uff09\u3002 task2 = asyncio.create_task(func()) print(\"main\u7ed3\u675f\") # \u5f53\u6267\u884c\u67d0\u534f\u7a0b\u9047\u5230IO\u64cd\u4f5c\u65f6\uff0c\u4f1a\u81ea\u52a8\u5316\u5207\u6362\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u3002 # \u6b64\u5904\u7684await\u662f\u7b49\u5f85\u76f8\u5bf9\u5e94\u7684\u534f\u7a0b\u5168\u90fd\u6267\u884c\u5b8c\u6bd5\u5e76\u83b7\u53d6\u7ed3\u679c ret1 = await task1 ret2 = await task2 print(ret1, ret2) asyncio.run(main()) \u793a\u4f8b2\uff1a import asyncio async def func(): print(1) await asyncio.sleep(2) print(2) return \"\u8fd4\u56de\u503c\" async def main(): print(\"main\u5f00\u59cb\") # \u521b\u5efa\u534f\u7a0b\uff0c\u5c06\u534f\u7a0b\u5c01\u88c5\u5230Task\u5bf9\u8c61\u4e2d\u5e76\u6dfb\u52a0\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\uff0c # \u7b49\u5f85\u4e8b\u4ef6\u5faa\u73af\u53bb\u6267\u884c\uff08\u9ed8\u8ba4\u662f\u5c31\u7eea\u72b6\u6001\uff09\u3002\u5728\u8c03\u7528 task_list = [ asyncio.create_task(func(), name=\"n1\"), asyncio.create_task(func(), name=\"n2\") ] print(\"main\u7ed3\u675f\") # \u5f53\u6267\u884c\u67d0\u534f\u7a0b\u9047\u5230IO\u64cd\u4f5c\u65f6\uff0c\u4f1a\u81ea\u52a8\u5316\u5207\u6362\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u3002 # \u6b64\u5904\u7684await\u662f\u7b49\u5f85\u6240\u6709\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0c\u5e76\u5c06\u6240\u6709\u534f\u7a0b\u7684\u8fd4\u56de\u503c\u4fdd\u5b58\u5230done # \u5982\u679c\u8bbe\u7f6e\u4e86timeout\u503c\uff0c\u5219\u610f\u5473\u7740\u6b64\u5904\u6700\u591a\u7b49\u5f85\u7684\u79d2\uff0c\u5b8c\u6210\u7684\u534f\u7a0b\u8fd4\u56de\u503c\u5199\u5165\u5230done\u4e2d\uff0c\u672a\u5b8c\u6210\u5219\u5199\u5230pending\u4e2d\u3002 done, pending = await asyncio.wait(task_list, timeout=None) print(done, pending) asyncio.run(main()) \u6ce8\u610f\uff1a asyncio.wait \u6e90\u7801\u5185\u90e8\u4f1a\u5bf9\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u534f\u7a0b\u6267\u884censure_future\u4ece\u800c\u5c01\u88c5\u4e3aTask\u5bf9\u8c61\uff0c\u6240\u4ee5\u5728\u548cwait\u914d\u5408\u4f7f\u7528\u65f6task_list\u7684\u503c\u4e3a [func(),func()] \u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u793a\u4f8b3\uff1a import asyncio async def func(): print(\"\u6267\u884c\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u4ee3\u7801\") # \u9047\u5230IO\u64cd\u4f5c\u6302\u8d77\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u7b49IO\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002 # \u5f53\u524d\u534f\u7a0b\u6302\u8d77\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u3002 response = await asyncio.sleep(2) print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response) coroutine_list = [func(), func()] # \u9519\u8bef\uff1acoroutine_list = [ asyncio.create_task(func()), asyncio.create_task(func()) ] # \u6b64\u5904\u4e0d\u80fd\u76f4\u63a5 asyncio.create_task\uff0c\u56e0\u4e3a\u5c06Task\u7acb\u5373\u52a0\u5165\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\uff0c # \u4f46\u6b64\u65f6\u4e8b\u4ef6\u5faa\u73af\u8fd8\u672a\u521b\u5efa\uff0c\u6240\u4ee5\u4f1a\u62a5\u9519\u3002 # \u4f7f\u7528asyncio.wait\u5c06\u5217\u8868\u5c01\u88c5\u4e3a\u4e00\u4e2a\u534f\u7a0b\uff0c\u5e76\u8c03\u7528asyncio.run\u5b9e\u73b0\u6267\u884c\u4e24\u4e2a\u534f\u7a0b # asyncio.wait\u5185\u90e8\u4f1a\u5bf9\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u534f\u7a0b\u6267\u884censure_future\uff0c\u5c01\u88c5\u4e3aTask\u5bf9\u8c61\u3002 done,pending = asyncio.run( asyncio.wait(coroutine_list) ) 3.2.4 asyncio.Future\u5bf9\u8c61 A Futureis a special low-level awaitable object that represents an eventual result of an asynchronous operation. asyncio\u4e2d\u7684Future\u5bf9\u8c61\u662f\u4e00\u4e2a\u76f8\u5bf9\u66f4\u504f\u5411\u5e95\u5c42\u7684\u53ef\u5bf9\u8c61\uff0c\u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u7528\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528Task\u5bf9\u8c61\u6765\u5b8c\u6210\u4efb\u52a1\u7684\u5e76\u548c\u72b6\u6001\u7684\u8ffd\u8e2a\u3002\uff08 Task \u662f Futrue\u7684\u5b50\u7c7b \uff09 Future\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5f02\u6b65\u7f16\u7a0b\u4e2d\u7684 \u6700\u7ec8\u7ed3\u679c \u7684\u5904\u7406\uff08Task\u7c7b\u4e5f\u5177\u5907\u72b6\u6001\u5904\u7406\u7684\u529f\u80fd\uff09\u3002 \u793a\u4f8b1\uff1a async def main(): # \u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af loop = asyncio.get_running_loop() # # \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff08Future\u5bf9\u8c61\uff09\uff0c\u8fd9\u4e2a\u4efb\u52a1\u4ec0\u4e48\u90fd\u4e0d\u5e72\u3002 fut = loop.create_future() # \u7b49\u5f85\u4efb\u52a1\u6700\u7ec8\u7ed3\u679c\uff08Future\u5bf9\u8c61\uff09\uff0c\u6ca1\u6709\u7ed3\u679c\u5219\u4f1a\u4e00\u76f4\u7b49\u4e0b\u53bb\u3002 await fut asyncio.run(main()) \u793a\u4f8b2\uff1a import asyncio async def set_after(fut): await asyncio.sleep(2) fut.set_result(\"666\") async def main(): # \u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af loop = asyncio.get_running_loop() # \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff08Future\u5bf9\u8c61\uff09\uff0c\u6ca1\u7ed1\u5b9a\u4efb\u4f55\u884c\u4e3a\uff0c\u5219\u8fd9\u4e2a\u4efb\u52a1\u6c38\u8fdc\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f\u3002 fut = loop.create_future() # \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff08Task\u5bf9\u8c61\uff09\uff0c\u7ed1\u5b9a\u4e86set_after\u51fd\u6570\uff0c\u51fd\u6570\u5185\u90e8\u57282s\u4e4b\u540e\uff0c\u4f1a\u7ed9fut\u8d4b\u503c\u3002 # \u5373\u624b\u52a8\u8bbe\u7f6efuture\u4efb\u52a1\u7684\u6700\u7ec8\u7ed3\u679c\uff0c\u90a3\u4e48fut\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\u3002 await loop.create_task(set_after(fut)) # \u7b49\u5f85 Future\u5bf9\u8c61\u83b7\u53d6 \u6700\u7ec8\u7ed3\u679c\uff0c\u5426\u5219\u4e00\u76f4\u7b49\u4e0b\u53bb data = await fut print(data) asyncio.run(main()) Future\u5bf9\u8c61\u672c\u8eab\u51fd\u6570\u8fdb\u884c\u7ed1\u5b9a\uff0c\u6240\u4ee5\u60f3\u8981\u8ba9\u4e8b\u4ef6\u5faa\u73af\u83b7\u53d6Future\u7684\u7ed3\u679c\uff0c\u5219\u9700\u8981\u624b\u52a8\u8bbe\u7f6e\u3002\u800cTask\u5bf9\u8c61\u7ee7\u627f\u4e86Future\u5bf9\u8c61\uff0c\u5176\u5b9e\u5c31\u5bf9Future\u8fdb\u884c\u6269\u5c55\uff0c\u4ed6\u53ef\u4ee5\u5b9e\u73b0\u5728\u5bf9\u5e94\u7ed1\u5b9a\u7684\u51fd\u6570\u6267\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u81ea\u52a8\u6267\u884c set_result \uff0c\u4ece\u800c\u5b9e\u73b0\u81ea\u52a8\u7ed3\u675f\u3002 \u867d\u7136\uff0c\u5e73\u65f6\u4f7f\u7528\u7684\u662fTask\u5bf9\u8c61\uff0c\u4f46\u5bf9\u4e8e\u7ed3\u679c\u7684\u5904\u7406\u672c\u8d28\u662f\u57fa\u4e8eFuture\u5bf9\u8c61\u6765\u5b9e\u73b0\u7684\u3002 \u6269\u5c55\uff1a\u652f\u6301 await \u5bf9\u8c61 \u8bed \u6cd5\u7684\u5bf9\u8c61\u8bfe\u6210\u4e3a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u6240\u4ee5 \u534f\u7a0b\u5bf9\u8c61 \u3001 Task\u5bf9\u8c61 \u3001 Future\u5bf9\u8c61 \u90fd\u53ef\u4ee5\u88ab\u6210\u4e3a\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002 3.2.5 futures.Future\u5bf9\u8c61 \u5728Python\u7684 concurrent.futures \u6a21\u5757\u4e2d\u4e5f\u6709\u4e00\u4e2aFuture\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u57fa\u4e8e\u7ebf\u7a0b\u6c60\u548c\u8fdb\u7a0b\u6c60\u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684\u5bf9\u8c61\u3002 import time from concurrent.futures import Future from concurrent.futures.thread import ThreadPoolExecutor from concurrent.futures.process import ProcessPoolExecutor def func(value): time.sleep(1) print(value) pool = ThreadPoolExecutor(max_workers=5) # \u6216 pool = ProcessPoolExecutor(max_workers=5) for i in range(10): fut = pool.submit(func, i) print(fut) \u4e24\u4e2aFuture\u5bf9\u8c61\u662f\u4e0d\u540c\u7684\uff0c\u4ed6\u4eec\u662f\u4e3a\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u800c\u8bbe\u8ba1\uff0c\u4f8b\u5982\uff1a concurrent.futures.Future \u4e0d\u652f\u6301await\u8bed\u6cd5 \u7b49\u3002 \u5b98\u65b9\u63d0\u793a\u4e24\u5bf9\u8c61\u4e4b\u95f4\u4e0d\u540c\uff1a unlike asyncio Futures, concurrent.futures.Future instances cannot be awaited. asyncio.Future.result() and asyncio.Future.exception() do not accept the timeout argument. asyncio.Future.result() and asyncio.Future.exception() raise an InvalidStateError exception when the Future is not done . Callbacks registered with asyncio.Future.add_done_callback() are not called immediately. They are scheduled with loop.call_soon() instead. asyncio Future is not compatible with the concurrent.futures.wait() and concurrent.futures.as_completed() functions. \u5728Python\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c06 futures.Future \u5bf9\u8c61\u5305\u88c5\u6210 asyncio.Future \u5bf9\u8c61\u7684\u51fd\u6570 asynic.wrap_future \u3002 \u63a5\u4e0b\u91cc\u4f60\u80af\u5b9a\u95ee\uff1a\u4e3a\u4ec0\u4e48python\u4f1a\u63d0\u4f9b\u8fd9\u79cd\u529f\u80fd\uff1f \u5176\u5b9e\uff0c\u4e00\u822c\u5728\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u6211\u4eec\u8981\u4e48\u7edf\u4e00\u4f7f\u7528 asycio \u7684\u534f\u7a0b\u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c\u3001\u8981\u4e48\u90fd\u4f7f\u7528\u8fdb\u7a0b\u6c60\u548c\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c\u3002\u4f46\u5982\u679c \u534f\u7a0b\u7684\u5f02\u6b65 \u548c \u8fdb\u7a0b\u6c60/\u7ebf\u7a0b\u6c60\u7684\u5f02\u6b65 \u6df7\u642d\u65f6\uff0c\u90a3\u4e48\u5c31\u4f1a\u7528\u5230\u6b64\u529f\u80fd\u4e86\u3002 import time import asyncio import concurrent.futures def func1(): # \u67d0\u4e2a\u8017\u65f6\u64cd\u4f5c time.sleep(2) return \"XXX\" async def main(): loop = asyncio.get_running_loop() # 1. Run in the default loop's executor ( \u9ed8\u8ba4ThreadPoolExecutor ) # \u7b2c\u4e00\u6b65\uff1a\u5185\u90e8\u4f1a\u5148\u8c03\u7528 ThreadPoolExecutor \u7684 submit \u65b9\u6cd5\u53bb\u7ebf\u7a0b\u6c60\u4e2d\u7533\u8bf7\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884cfunc1\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aconcurrent.futures.Future\u5bf9\u8c61 # \u7b2c\u4e8c\u6b65\uff1a\u8c03\u7528asyncio.wrap_future\u5c06concurrent.futures.Future\u5bf9\u8c61\u5305\u88c5\u4e3aasycio.Future\u5bf9\u8c61\u3002 # \u56e0\u4e3aconcurrent.futures.Future\u5bf9\u8c61\u4e0d\u652f\u6301await\u8bed\u6cd5\uff0c\u6240\u4ee5\u9700\u8981\u5305\u88c5\u4e3a asycio.Future\u5bf9\u8c61 \u624d\u80fd\u4f7f\u7528\u3002 fut = loop.run_in_executor(None, func1) result = await fut print('default thread pool', result) # 2. Run in a custom thread pool: # with concurrent.futures.ThreadPoolExecutor() as pool: # result = await loop.run_in_executor( # pool, func1) # print('custom thread pool', result) # 3. Run in a custom process pool: # with concurrent.futures.ProcessPoolExecutor() as pool: # result = await loop.run_in_executor( # pool, func1) # print('custom process pool', result) asyncio.run(main()) \u5e94\u7528\u573a\u666f\uff1a \u5f53\u9879\u76ee\u4ee5\u534f\u7a0b\u5f0f\u7684\u5f02\u6b65\u7f16\u7a0b\u5f00\u53d1\u65f6\uff0c\u5982\u679c\u8981\u4f7f\u7528\u4e00\u4e2a\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u800c\u7b2c\u4e09\u65b9\u6a21\u5757\u4e0d\u652f\u6301\u534f\u7a0b\u65b9\u5f0f\u5f02\u6b65\u7f16\u7a0b\u65f6\uff0c\u5c31\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u529f\u80fd\uff0c \u4f8b\u5982\uff1a import asyncio import requests async def download_image(url): # \u53d1\u9001\u7f51\u7edc\u8bf7\u6c42\uff0c\u4e0b\u8f7d\u56fe\u7247\uff08\u9047\u5230\u7f51\u7edc\u4e0b\u8f7d\u56fe\u7247\u7684IO\u8bf7\u6c42\uff0c\u81ea\u52a8\u5316\u5207\u6362\u5230\u5176\u4ed6\u4efb\u52a1\uff09 print(\"\u5f00\u59cb\u4e0b\u8f7d:\", url) loop = asyncio.get_event_loop() # requests\u6a21\u5757\u9ed8\u8ba4\u4e0d\u652f\u6301\u5f02\u6b65\u64cd\u4f5c\uff0c\u6240\u4ee5\u5c31\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6765\u914d\u5408\u5b9e\u73b0\u4e86\u3002 future = loop.run_in_executor(None, requests.get, url) response = await future print('\u4e0b\u8f7d\u5b8c\u6210') # \u56fe\u7247\u4fdd\u5b58\u5230\u672c\u5730\u6587\u4ef6 file_name = url.rsplit('_')[-1] with open(file_name, mode='wb') as file_object: file_object.write(response.content) if __name__ == '__main__': url_list = [ 'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg', 'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg', 'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg' ] tasks = [download_image(url) for url in url_list] loop = asyncio.get_event_loop() loop.run_until_complete( asyncio.wait(tasks) ) 3.2.6 \u5f02\u6b65\u8fed\u4ee3\u5668 \u4ec0\u4e48\u662f\u5f02\u6b65\u8fed\u4ee3\u5668 \u5b9e\u73b0\u4e86 __aiter__() \u548c __anext__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 __anext__ \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a awaitable \u5bf9\u8c61\u3002 async for \u4f1a\u5904\u7406\u5f02\u6b65\u8fed\u4ee3\u5668\u7684 __anext__() \u65b9\u6cd5\u6240\u8fd4\u56de\u7684\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u76f4\u5230\u5176\u5f15\u53d1\u4e00\u4e2a StopAsyncIteration \u5f02\u5e38\u3002\u7531 PEP 492 \u5f15\u5165\u3002 \u4ec0\u4e48\u662f\u5f02\u6b65\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1f \u53ef\u5728 async for \u8bed\u53e5\u4e2d\u88ab\u4f7f\u7528\u7684\u5bf9\u8c61\u3002\u5fc5\u987b\u901a\u8fc7\u5b83\u7684 __aiter__() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a asynchronous iterator \u3002\u7531 PEP 492 \u5f15\u5165\u3002 import asyncio class Reader(object): \"\"\" \u81ea\u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668\uff08\u540c\u65f6\u4e5f\u662f\u5f02\u6b65\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09 \"\"\" def __init__(self): self.count = 0 async def readline(self): # await asyncio.sleep(1) self.count += 1 if self.count == 100: return None return self.count def __aiter__(self): return self async def __anext__(self): val = await self.readline() if val == None: raise StopAsyncIteration return val async def func(): # \u521b\u5efa\u5f02\u6b65\u53ef\u8fed\u4ee3\u5bf9\u8c61 async_iter = Reader() # async for \u5fc5\u987b\u8981\u653e\u5728async def\u51fd\u6570\u5185\uff0c\u5426\u5219\u8bed\u6cd5\u9519\u8bef\u3002 async for item in async_iter: print(item) asyncio.run(func()) \u5f02\u6b65\u8fed\u4ee3\u5668\u5176\u5b9e\u6ca1\u4ec0\u4e48\u592a\u5927\u7684\u4f5c\u7528\uff0c\u53ea\u662f\u652f\u6301\u4e86async for\u8bed\u6cd5\u800c\u5df2\u3002 3.2.6 \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u6b64\u79cd\u5bf9\u8c61\u901a\u8fc7\u5b9a\u4e49 __aenter__() \u548c __aexit__() \u65b9\u6cd5\u6765\u5bf9 async with \u8bed\u53e5\u4e2d\u7684\u73af\u5883\u8fdb\u884c\u63a7\u5236\u3002\u7531 PEP 492 \u5f15\u5165\u3002 import asyncio class AsyncContextManager: def __init__(self): self.conn = conn async def do_something(self): # \u5f02\u6b65\u64cd\u4f5c\u6570\u636e\u5e93 return 666 async def __aenter__(self): # \u5f02\u6b65\u94fe\u63a5\u6570\u636e\u5e93 self.conn = await asyncio.sleep(1) return self async def __aexit__(self, exc_type, exc, tb): # \u5f02\u6b65\u5173\u95ed\u6570\u636e\u5e93\u94fe\u63a5 await asyncio.sleep(1) async def func(): async with AsyncContextManager() as f: result = await f.do_something() print(result) asyncio.run(func()) \u8fd9\u4e2a\u5f02\u6b65\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u8fd8\u662f\u6bd4\u8f83\u6709\u7528\u7684\uff0c\u5e73\u65f6\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d \u6253\u5f00\u3001\u5904\u7406\u3001\u5173\u95ed \u64cd\u4f5c\u65f6\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5904\u7406\u3002 3.3 \u5c0f\u7ed3 \u5728\u7a0b\u5e8f\u4e2d\u53ea\u8981\u770b\u5230 async \u548c await \u5173\u952e\u5b57\uff0c\u5176\u5185\u90e8\u5c31\u662f\u57fa\u4e8e\u534f\u7a0b\u5b9e\u73b0\u7684\u5f02\u6b65\u7f16\u7a0b\uff0c\u8fd9\u79cd\u5f02\u6b65\u7f16\u7a0b\u662f\u901a\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u5728IO\u7b49\u5f85\u65f6\u95f4\u53bb\u6267\u884c\u5176\u4ed6\u4efb\u52a1\uff0c\u4ece\u800c\u5b9e\u73b0\u5e76\u53d1\u3002 \u4ee5\u4e0a\u5c31\u662f\u5f02\u6b65\u7f16\u7a0b\u7684\u5e38\u89c1\u64cd\u4f5c\uff0c\u5185\u5bb9\u53c2\u8003\u5b98\u65b9\u6587\u6863\u3002 \u4e2d\u6587\u7248\uff1a https://docs.python.org/zh-cn/3.8/library/asyncio.html \u82f1\u6587\u7248\uff1a https://docs.python.org/3.8/library/asyncio.html 4. uvloop Python\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4e86 asyncio \u6a21\u5757\uff0c\u7528\u4e8e\u652f\u6301\u57fa\u4e8e\u534f\u7a0b\u7684\u5f02\u6b65\u7f16\u7a0b\u3002 uvloop\u662f asyncio \u4e2d\u7684\u4e8b\u4ef6\u5faa\u73af\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u66ff\u6362\u540e\u53ef\u4ee5\u4f7f\u5f97asyncio\u6027\u80fd\u63d0\u9ad8\u3002\u4e8b\u5b9e\u4e0a\uff0cuvloop\u8981\u6bd4nodejs\u3001gevent\u7b49\u5176\u4ed6python\u5f02\u6b65\u6846\u67b6\u81f3\u5c11\u8981\u5feb2\u500d\uff0c\u6027\u80fd\u53ef\u4ee5\u6bd4\u80a9Go\u8bed\u8a00\u3002 \u5b89\u88c5uvloop pip3 install uvloop \u5728\u9879\u76ee\u4e2d\u60f3\u8981\u4f7f\u7528uvloop\u66ff\u6362asyncio\u7684\u4e8b\u4ef6\u5faa\u73af\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u8981\u5728\u4ee3\u7801\u4e2d\u8fd9\u4e48\u505a\u5c31\u884c\u3002 import asyncio import uvloop asyncio.set_event_loop_policy(uvloop.EventLoopPolicy()) # \u7f16\u5199asyncio\u7684\u4ee3\u7801\uff0c\u4e0e\u4e4b\u524d\u5199\u7684\u4ee3\u7801\u4e00\u81f4\u3002 # \u5185\u90e8\u7684\u4e8b\u4ef6\u5faa\u73af\u81ea\u52a8\u5316\u4f1a\u53d8\u4e3auvloop asyncio.run(...) \u6ce8\u610f\uff1a\u77e5\u540d\u7684asgi uvicorn\u5185\u90e8\u5c31\u662f\u4f7f\u7528\u7684uvloop\u7684\u4e8b\u4ef6\u5faa\u73af\u3002 5.\u5b9e\u6218\u6848\u4f8b \u4e3a\u4e86\u66f4\u597d\u7406\u89e3\uff0c\u4e0a\u8ff0\u6240\u6709\u793a\u4f8b\u7684IO\u60c5\u51b5\u90fd\u662f\u4ee5 asyncio.sleep \u4e3a\u4f8b\uff0c\u800c\u771f\u5b9e\u7684\u9879\u76ee\u5f00\u53d1\u4e2d\u4f1a\u7528\u5230\u5f88\u591aIO\u7684\u60c5\u51b5\u3002 5.1 \u5f02\u6b65Redis \u5f53\u901a\u8fc7python\u53bb\u64cd\u4f5credis\u65f6\uff0c\u94fe\u63a5\u3001\u8bbe\u7f6e\u503c\u3001\u83b7\u53d6\u503c \u8fd9\u4e9b\u90fd\u6d89\u53ca\u7f51\u7edcIO\u8bf7\u6c42\uff0c\u4f7f\u7528asycio\u5f02\u6b65\u7684\u65b9\u5f0f\u53ef\u4ee5\u5728IO\u7b49\u5f85\u65f6\u53bb\u505a\u4e00\u4e9b\u5176\u4ed6\u4efb\u52a1\uff0c\u4ece\u800c\u63d0\u5347\u6027\u80fd\u3002 \u5b89\u88c5Python\u5f02\u6b65\u64cd\u4f5credis\u6a21\u5757 pip3 install aioredis \u793a\u4f8b1\uff1a\u5f02\u6b65\u64cd\u4f5credis # -*- coding:utf-8 -*- import asyncio import aioredis async def execute(address, password): print(\"\u5f00\u59cb\u6267\u884c\", address) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u521b\u5efaredis\u8fde\u63a5 redis = await aioredis.create_redis(address, password=password) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5728redis\u4e2d\u8bbe\u7f6e\u54c8\u5e0c\u503ccar\uff0c\u5185\u90e8\u5728\u8bbe\u4e09\u4e2a\u952e\u503c\u5bf9\uff0c # \u5373\uff1a redis = { car:{key1:1,key2:2,key3:3}} await redis.hmset_dict('car', key1=1, key2=2, key3=3) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u53bbredis\u4e2d\u83b7\u53d6\u503c result = await redis.hgetall('car', encoding='utf-8') print(result) redis.close() # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5173\u95edredis\u8fde\u63a5 await redis.wait_closed() print(\"\u7ed3\u675f\", address) asyncio.run(execute('redis://47.93.4.198:6379', \"root!2345\")) \u793a\u4f8b2\uff1a\u8fde\u63a5\u591a\u4e2aredis\u505a\u64cd\u4f5c\uff08\u9047\u5230IO\u4f1a\u5207\u6362\u5176\u4ed6\u4efb\u52a1\uff0c\u63d0\u4f9b\u4e86\u6027\u80fd\uff09 import asyncio import aioredis async def execute(address, password): print(\"\u5f00\u59cb\u6267\u884c\", address) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5148\u53bb\u8fde\u63a5 47.93.4.197:6379\uff0c\u9047\u5230IO\u5219\u81ea\u52a8\u5207\u6362\u4efb\u52a1\uff0c\u53bb\u8fde\u63a547.93.4.198:6379 redis = await aioredis.create_redis_pool(address, password=password) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 await redis.hmset_dict('car', key1=1, key2=2, key3=3) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 result = await redis.hgetall('car', encoding='utf-8') print(result) redis.close() # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 await redis.wait_closed() print(\"\u7ed3\u675f\", address) task_list = [ execute('redis://47.93.4.197:6379', \"root!2345\"), execute('redis://47.93.4.198:6379', \"root!2345\") ] asyncio.run(asyncio.wait(task_list)) \u66f4\u591aredis\u64cd\u4f5c\u53c2\u8003aioredis\u5b98\u7f51\uff1a https://aioredis.readthedocs.io/en/v1.3.0/start.html 5.2 \u5f02\u6b65MySQL \u5f53\u901a\u8fc7python\u53bb\u64cd\u4f5cMySQL\u65f6\uff0c\u8fde\u63a5\u3001\u6267\u884cSQL\u3001\u5173\u95ed\u90fd\u6d89\u53ca\u7f51\u7edcIO\u8bf7\u6c42\uff0c\u4f7f\u7528asycio\u5f02\u6b65\u7684\u65b9\u5f0f\u53ef\u4ee5\u5728IO\u7b49\u5f85\u65f6\u53bb\u505a\u4e00\u4e9b\u5176\u4ed6\u4efb\u52a1\uff0c\u4ece\u800c\u63d0\u5347\u6027\u80fd\u3002 \u5b89\u88c5Python\u5f02\u6b65\u64cd\u4f5credis\u6a21\u5757 pip3 install aiomysql \u793a\u4f8b1\uff1a import asyncio import aiomysql async def execute(): # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u8fde\u63a5MySQL conn = await aiomysql.connect(host='127.0.0.1', port=3306, user='root', password='123', db='mysql', ) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u521b\u5efaCURSOR cur = await conn.cursor() # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u6267\u884cSQL await cur.execute(\"SELECT Host,User FROM user\") # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u83b7\u53d6SQL\u7ed3\u679c result = await cur.fetchall() print(result) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5173\u95ed\u94fe\u63a5 await cur.close() conn.close() asyncio.run(execute()) \u793a\u4f8b2\uff1a # -*- coding:utf-8 -*- import asyncio import aiomysql async def execute(host, password): print(\"\u5f00\u59cb\", host) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5148\u53bb\u8fde\u63a5 47.93.40.197\uff0c\u9047\u5230IO\u5219\u81ea\u52a8\u5207\u6362\u4efb\u52a1\uff0c\u53bb\u8fde\u63a547.93.40.198:6379 conn = await aiomysql.connect(host=host, port=3306, user='root', password=password, db='mysql') # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 cur = await conn.cursor() # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 await cur.execute(\"SELECT Host,User FROM user\") # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 result = await cur.fetchall() print(result) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 await cur.close() conn.close() print(\"\u7ed3\u675f\", host) task_list = [ execute('47.93.40.197', \"root!2345\"), execute('47.93.40.197', \"root!2345\") ] asyncio.run(asyncio.wait(task_list)) 5.3 FastAPI\u6846\u67b6 FastAPI\u662f\u4e00\u6b3e\u7528\u4e8e\u6784\u5efaAPI\u7684\u9ad8\u6027\u80fdweb\u6846\u67b6\uff0c\u6846\u67b6\u57fa\u4e8ePython3.6+\u7684 type hints \u642d\u5efa\u3002 \u63a5\u4e0b\u91cc\u7684\u5f02\u6b65\u793a\u4f8b\u4ee5 FastAPI \u548c uvicorn \u6765\u8bb2\u89e3\uff08uvicorn\u662f\u4e00\u4e2a\u652f\u6301\u5f02\u6b65\u7684asgi\uff09\u3002 \u5b89\u88c5FastAPI web \u6846\u67b6 pip3 install fastapi \u5b89\u88c5uvicorn\uff0c\u672c\u8d28\u4e0a\u4e3aweb\u63d0\u4f9bsocket server\u7684\u652f\u6301\u7684asgi\uff08\u4e00\u822c\u652f\u6301\u5f02\u6b65\u79f0asgi\u3001\u4e0d\u652f\u6301\u5f02\u6b65\u79f0wsgi\uff09 pip3 install uvicorn \u793a\u4f8b\uff1a # -*- coding:utf-8 -*- import asyncio import uvicorn import aioredis from aioredis import Redis from fastapi import FastAPI app = FastAPI() REDIS_POOL = aioredis.ConnectionsPool('redis://47.193.14.198:6379', password=\"root123\", minsize=1, maxsize=10) @app.get(\"/\") def index(): \"\"\" \u666e\u901a\u64cd\u4f5c\u63a5\u53e3 \"\"\" return {\"message\": \"Hello World\"} @app.get(\"/red\") async def red(): \"\"\" \u5f02\u6b65\u64cd\u4f5c\u63a5\u53e3 \"\"\" print(\"\u8bf7\u6c42\u6765\u4e86\") await asyncio.sleep(3) # \u8fde\u63a5\u6c60\u83b7\u53d6\u4e00\u4e2a\u8fde\u63a5 conn = await REDIS_POOL.acquire() redis = Redis(conn) # \u8bbe\u7f6e\u503c await redis.hmset_dict('car', key1=1, key2=2, key3=3) # \u8bfb\u53d6\u503c result = await redis.hgetall('car', encoding='utf-8') print(result) # \u8fde\u63a5\u5f52\u8fd8\u8fde\u63a5\u6c60 REDIS_POOL.release(conn) return result if __name__ == '__main__': uvicorn.run(\"luffy:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\") \u5728\u6709\u591a\u4e2a\u7528\u6237\u5e76\u53d1\u8bf7\u6c42\u7684\u60c5\u51b5\u4e0b\uff0c\u5f02\u6b65\u65b9\u5f0f\u6765\u7f16\u5199\u7684\u63a5\u53e3\u53ef\u4ee5\u5728IO\u7b49\u5f85\u8fc7\u7a0b\u4e2d\u53bb\u5904\u7406\u5176\u4ed6\u7684\u8bf7\u6c42\uff0c\u63d0\u4f9b\u6027\u80fd\u3002 \u4f8b\u5982\uff1a\u540c\u65f6\u6709\u4e24\u4e2a\u7528\u6237\u5e76\u53d1\u6765\u5411\u63a5\u53e3 http://127.0.0.1:5000/red \u53d1\u9001\u8bf7\u6c42\uff0c\u670d\u52a1\u7aef\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u8bf7\u6c42\u88ab\u5904\u7406\u3002 \u5f02\u6b65\u5904\u7406\u53ef\u4ee5\u63d0\u4f9b\u5e76\u53d1\u662f\u56e0\u4e3a\uff1a\u5f53\u89c6\u56fe\u51fd\u6570\u5728\u5904\u7406\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u6b64\u65f6\u662f\u7b49\u5f85\u88ab\u5904\u7406\u7684\u72b6\u6001\uff0c\u5f53\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u9047\u5230IO\u7b49\u5f85\u65f6\uff0c\u4f1a\u81ea\u52a8\u5207\u6362\u53bb\u63a5\u6536\u5e76\u5904\u7406\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\uff0c\u5f53\u9047\u5230IO\u65f6\u81ea\u52a8\u5316\u5207\u6362\u81f3\u5176\u4ed6\u8bf7\u6c42\uff0c\u4e00\u65e6\u6709\u8bf7\u6c42IO\u6267\u884c\u5b8c\u6bd5\uff0c\u5219\u4f1a\u518d\u6b21\u56de\u5230\u6307\u5b9a\u8bf7\u6c42\u5411\u4e0b\u7ee7\u7eed\u6267\u884c\u5176\u529f\u80fd\u4ee3\u7801\u3002 5.4 \u722c\u866b \u5728\u7f16\u5199\u722c\u866b\u5e94\u7528\u65f6\uff0c\u9700\u8981\u901a\u8fc7\u7f51\u7edcIO\u53bb\u8bf7\u6c42\u76ee\u6807\u6570\u636e\uff0c\u8fd9\u79cd\u60c5\u51b5\u9002\u5408\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u6765\u63d0\u5347\u6027\u80fd\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528\u652f\u6301\u5f02\u6b65\u7f16\u7a0b\u7684aiohttp\u6a21\u5757\u6765\u5b9e\u73b0\u3002 \u5b89\u88c5aiohttp\u6a21\u5757 pip3 install aiohttp \u793a\u4f8b\uff1a import aiohttp import asyncio async def fetch(session, url): print(\"\u53d1\u9001\u8bf7\u6c42\uff1a\", url) async with session.get(url, verify_ssl=False) as response: text = await response.text() print(\"\u5f97\u5230\u7ed3\u679c\uff1a\", url, len(text)) async def main(): async with aiohttp.ClientSession() as session: url_list = [ 'https://python.org', 'https://www.baidu.com', 'https://www.pythonav.com' ] tasks = [asyncio.create_task(fetch(session, url)) for url in url_list] await asyncio.wait(tasks) if __name__ == '__main__': asyncio.run(main()) 6.\u603b\u7ed3 \u4e3a\u4e86\u63d0\u5347\u6027\u80fd\u8d8a\u6765\u8d8a\u591a\u7684\u6846\u67b6\u90fd\u5728\u5411\u5f02\u6b65\u7f16\u7a0b\u9760\u62e2\uff0c\u4f8b\u5982\uff1asanic\u3001tornado\u3001django3.0\u3001django channels\u7ec4\u4ef6 \u7b49\uff0c\u7528\u66f4\u5c11\u8d44\u6e90\u53ef\u4ee5\u505a\u5904\u7406\u66f4\u591a\u7684\u4e8b\uff0c\u4f55\u4e50\u800c\u4e0d\u4e3a\u5462\u3002","title":"11 Python\u534f\u7a0b\u57fa\u7840"},{"location":"python\u8fdb\u9636/asyncio/#1","text":"\u534f\u7a0b\u662fasyncio\u7684\u57fa\u7840\u3002 \u534f\u7a0b\uff08Coroutine\uff09\uff0c\u4e5f\u53ef\u4ee5\u88ab\u79f0\u4e3a\u5fae\u7ebf\u7a0b\uff0c\u662f\u4e00\u79cd\u7528\u6237\u6001\u5185\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u6280\u672f\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u5176\u5b9e\u5c31\u662f\u901a\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u5b9e\u73b0\u4ee3\u7801\u5757\u76f8\u4e92\u5207\u6362\u6267\u884c\u3002\u4f8b\u5982\uff1a def func1(): print(1) ... print(2) def func2(): print(3) ... print(4) func1() func2() \u4e0a\u8ff0\u4ee3\u7801\u662f\u666e\u901a\u7684\u51fd\u6570\u5b9a\u4e49\u548c\u6267\u884c\uff0c\u6309\u6d41\u7a0b\u5206\u522b\u6267\u884c\u4e24\u4e2a\u51fd\u6570\u4e2d\u7684\u4ee3\u7801\uff0c\u5e76\u5148\u540e\u4f1a\u8f93\u51fa\uff1a 1\u30012\u30013\u30014 \u3002\u4f46\u5982\u679c\u4ecb\u5165\u534f\u7a0b\u6280\u672f\u90a3\u4e48\u5c31\u53ef\u4ee5\u5b9e\u73b0\u51fd\u6570\u89c1\u4ee3\u7801\u5207\u6362\u6267\u884c\uff0c\u6700\u7ec8\u8f93\u5165\uff1a 1\u30013\u30012\u30014 \u3002 \u5728Python\u4e2d\u6709\u591a\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u534f\u7a0b\uff0c\u4f8b\u5982\uff1a greenlet\uff0c\u662f\u4e00\u4e2a\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u7528\u4e8e\u5b9e\u73b0\u534f\u7a0b\u4ee3\u7801\uff08Gevent\u534f\u7a0b\u5c31\u662f\u57fa\u4e8egreenlet\u5b9e\u73b0\uff09 yield\uff0c\u751f\u6210\u5668\uff0c\u501f\u52a9\u751f\u6210\u5668\u7684\u7279\u70b9\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u534f\u7a0b\u4ee3\u7801\u3002 asyncio\uff0c\u5728Python3.4\u4e2d\u5f15\u5165\u7684\u6a21\u5757\u7528\u4e8e\u7f16\u5199\u534f\u7a0b\u4ee3\u7801\u3002 async & awiat\uff0c\u5728Python3.5\u4e2d\u5f15\u5165\u7684\u4e24\u4e2a\u5173\u952e\u5b57\uff0c\u7ed3\u5408asyncio\u6a21\u5757\u53ef\u4ee5\u66f4\u65b9\u4fbf\u7684\u7f16\u5199\u534f\u7a0b\u4ee3\u7801\u3002 1.1 greenlet greentlet\u662f\u4e00\u4e2a\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u9700\u8981\u63d0\u524d\u5b89\u88c5 pip3 install greenlet \u624d\u80fd\u4f7f\u7528\u3002 from greenlet import greenlet def func1(): print(1) # \u7b2c1\u6b65\uff1a\u8f93\u51fa 1 gr2.switch() # \u7b2c3\u6b65\uff1a\u5207\u6362\u5230 func2 \u51fd\u6570 print(2) # \u7b2c6\u6b65\uff1a\u8f93\u51fa 2 gr2.switch() # \u7b2c7\u6b65\uff1a\u5207\u6362\u5230 func2 \u51fd\u6570\uff0c\u4ece\u4e0a\u4e00\u6b21\u6267\u884c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5411\u540e\u6267\u884c def func2(): print(3) # \u7b2c4\u6b65\uff1a\u8f93\u51fa 3 gr1.switch() # \u7b2c5\u6b65\uff1a\u5207\u6362\u5230 func1 \u51fd\u6570\uff0c\u4ece\u4e0a\u4e00\u6b21\u6267\u884c\u7684\u4f4d\u7f6e\u7ee7\u7eed\u5411\u540e\u6267\u884c print(4) # \u7b2c8\u6b65\uff1a\u8f93\u51fa 4 gr1 = greenlet(func1) gr2 = greenlet(func2) gr1.switch() # \u7b2c1\u6b65\uff1a\u53bb\u6267\u884c func1 \u51fd\u6570 \u6ce8\u610f\uff1aswitch\u4e2d\u4e5f\u53ef\u4ee5\u4f20\u9012\u53c2\u6570\u7528\u4e8e\u5728\u5207\u6362\u6267\u884c\u65f6\u76f8\u4e92\u4f20\u9012\u503c\u3002 1.2 yield \u57fa\u4e8ePython\u7684\u751f\u6210\u5668\u7684yield\u548cyield form\u5173\u952e\u5b57\u5b9e\u73b0\u534f\u7a0b\u4ee3\u7801\u3002 def func1(): yield 1 yield from func2() yield 2 def func2(): yield 3 yield 4 f1 = func1() for item in f1: print(item) \u6ce8\u610f\uff1ayield form\u5173\u952e\u5b57\u662f\u5728Python3.3\u4e2d\u5f15\u5165\u7684\u3002 1.3 asyncio \u5728Python3.4\u4e4b\u524d\u5b98\u65b9\u672a\u63d0\u4f9b\u534f\u7a0b\u7684\u7c7b\u5e93\uff0c\u4e00\u822c\u5927\u5bb6\u90fd\u662f\u4f7f\u7528greenlet\u7b49\u5176\u4ed6\u6765\u5b9e\u73b0\u3002\u5728Python3.4\u53d1\u5e03\u540e\u5b98\u65b9\u6b63\u5f0f\u652f\u6301\u534f\u7a0b\uff0c\u5373\uff1aasyncio\u6a21\u5757\u3002 import asyncio @asyncio.coroutine def func1(): print(1) yield from asyncio.sleep(2) # \u9047\u5230IO\u8017\u65f6\u64cd\u4f5c\uff0c\u81ea\u52a8\u5316\u5207\u6362\u5230tasks\u4e2d\u7684\u5176\u4ed6\u4efb\u52a1 print(2) @asyncio.coroutine def func2(): print(3) yield from asyncio.sleep(2) # \u9047\u5230IO\u8017\u65f6\u64cd\u4f5c\uff0c\u81ea\u52a8\u5316\u5207\u6362\u5230tasks\u4e2d\u7684\u5176\u4ed6\u4efb\u52a1 print(4) tasks = [ asyncio.ensure_future( func1() ), asyncio.ensure_future( func2() ) ] loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(tasks)) \u6ce8\u610f\uff1a\u57fa\u4e8easyncio\u6a21\u5757\u5b9e\u73b0\u7684\u534f\u7a0b\u6bd4\u4e4b\u524d\u7684\u8981\u66f4\u5389\u5bb3\uff0c\u56e0\u4e3a\u4ed6\u7684\u5185\u90e8\u8fd8\u96c6\u6210\u4e86\u9047\u5230IO\u8017\u65f6\u64cd\u4f5c\u81ea\u52a8\u5207\u82b1\u7684\u529f\u80fd\u3002 1.4 async & awit async & awit \u5173\u952e\u5b57\u5728Python3.5\u7248\u672c\u4e2d\u6b63\u5f0f\u5f15\u5165\uff0c\u57fa\u4e8e\u4ed6\u7f16\u5199\u7684\u534f\u7a0b\u4ee3\u7801\u5176\u5b9e\u5c31\u662f \u4e0a\u4e00\u793a\u4f8b \u7684\u52a0\u5f3a\u7248\uff0c\u8ba9\u4ee3\u7801\u53ef\u4ee5\u66f4\u52a0\u7b80\u4fbf\u3002 Python3.8\u4e4b\u540e @asyncio.coroutine \u88c5\u9970\u5668\u5c31\u4f1a\u88ab\u79fb\u9664\uff0c\u63a8\u8350\u4f7f\u7528async & awit \u5173\u952e\u5b57\u5b9e\u73b0\u534f\u7a0b\u4ee3\u7801\u3002 import asyncio async def func1(): print(1) await asyncio.sleep(2) print(2) async def func2(): print(3) await asyncio.sleep(2) print(4) tasks = [ asyncio.ensure_future(func1()), asyncio.ensure_future(func2()) ] loop = asyncio.get_event_loop() loop.run_until_complete(asyncio.wait(tasks)) 1.5 \u5c0f\u7ed3 \u5173\u4e8e\u534f\u7a0b\u6709\u591a\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u76ee\u524d\u4e3b\u6d41\u4f7f\u7528\u662fPython\u5b98\u65b9\u63a8\u8350\u7684asyncio\u6a21\u5757\u548casync&await\u5173\u952e\u5b57\u7684\u65b9\u5f0f\uff0c\u4f8b\u5982\uff1a\u5728tonado\u3001sanic\u3001fastapi\u3001django3 \u4e2d\u5747\u5df2\u652f\u6301\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4e5f\u4f1a\u9488\u5bf9 asyncio\u6a21\u5757 + async & await \u5173\u952e\u5b57\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u8bb2\u89e3\u3002","title":"1.\u534f\u7a0b"},{"location":"python\u8fdb\u9636/asyncio/#2","text":"\u901a\u8fc7\u5b66\u4e60\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u5230\u534f\u7a0b\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u5728\u591a\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u8fdb\u884c\u6765\u56de\u5207\u6362\u6267\u884c\u3002 \u4f46\u662f\uff0c\u534f\u7a0b\u6765\u56de\u5207\u6362\u6267\u884c\u7684\u610f\u4e49\u4f55\u5728\u5462\uff1f \u8ba1\u7b97\u578b\u7684\u64cd\u4f5c\uff0c\u5229\u7528\u534f\u7a0b\u6765\u56de\u5207\u6362\u6267\u884c\uff0c\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0c\u6765\u56de\u5207\u6362\u5e76\u4fdd\u5b58\u72b6\u6001 \u53cd\u5012\u4f1a\u964d\u4f4e\u6027\u80fd\u3002 IO\u578b\u7684\u64cd\u4f5c\uff0c\u5229\u7528\u534f\u7a0b\u5728IO\u7b49\u5f85\u65f6\u95f4\u5c31\u53bb\u5207\u6362\u6267\u884c\u5176\u4ed6\u4efb\u52a1\uff0c\u5f53IO\u64cd\u4f5c\u7ed3\u675f\u540e\u518d\u81ea\u52a8\u56de\u8c03\uff0c\u90a3\u4e48\u5c31\u4f1a\u5927\u5927\u8282\u7701\u8d44\u6e90\u5e76\u63d0\u4f9b\u6027\u80fd\uff0c\u4ece\u800c\u5b9e\u73b0\u5f02\u6b65\u7f16\u7a0b\uff08\u4e0d\u7b49\u5f85\u4efb\u52a1\u7ed3\u675f\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u4ee3\u7801\uff09\u3002 2.1 \u722c\u866b\u6848\u4f8b \u4f8b\u5982\uff1a\u7528\u4ee3\u7801\u5b9e\u73b0\u4e0b\u8f7d url_list \u4e2d\u7684\u56fe\u7247\u3002 \u65b9\u5f0f\u4e00\uff1a \u540c\u6b65\u7f16\u7a0b\u5b9e\u73b0 \"\"\" \u4e0b\u8f7d\u56fe\u7247\u4f7f\u7528\u7b2c\u4e09\u65b9\u6a21\u5757requests\uff0c\u8bf7\u63d0\u524d\u5b89\u88c5\uff1apip3 install requests \"\"\" import requests def download_image(url): print(\"\u5f00\u59cb\u4e0b\u8f7d:\",url) # \u53d1\u9001\u7f51\u7edc\u8bf7\u6c42\uff0c\u4e0b\u8f7d\u56fe\u7247 response = requests.get(url) print(\"\u4e0b\u8f7d\u5b8c\u6210\") # \u56fe\u7247\u4fdd\u5b58\u5230\u672c\u5730\u6587\u4ef6 file_name = url.rsplit('_')[-1] with open(file_name, mode='wb') as file_object: file_object.write(response.content) if __name__ == '__main__': url_list = [ 'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg', 'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg', 'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg' ] for item in url_list: download_image(item) \u65b9\u5f0f\u4e8c\uff1a \u57fa\u4e8e\u534f\u7a0b\u7684\u5f02\u6b65\u7f16\u7a0b\u5b9e\u73b0 \"\"\" \u4e0b\u8f7d\u56fe\u7247\u4f7f\u7528\u7b2c\u4e09\u65b9\u6a21\u5757aiohttp\uff0c\u8bf7\u63d0\u524d\u5b89\u88c5\uff1apip3 install aiohttp \"\"\" #!/usr/bin/env python # -*- coding:utf-8 -*- import aiohttp import asyncio async def fetch(session, url): print(\"\u53d1\u9001\u8bf7\u6c42\uff1a\", url) async with session.get(url, verify_ssl=False) as response: content = await response.content.read() file_name = url.rsplit('_')[-1] with open(file_name, mode='wb') as file_object: file_object.write(content) async def main(): async with aiohttp.ClientSession() as session: url_list = [ 'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg', 'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg', 'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg' ] tasks = [asyncio.create_task(fetch(session, url)) for url in url_list] await asyncio.wait(tasks) if __name__ == '__main__': asyncio.run(main()) \u4e0a\u8ff0\u4e24\u79cd\u7684\u6267\u884c\u5bf9\u6bd4\u4e4b\u540e\u4f1a\u53d1\u73b0\uff0c \u57fa\u4e8e\u534f\u7a0b\u7684\u5f02\u6b65\u7f16\u7a0b \u8981\u6bd4 \u540c\u6b65\u7f16\u7a0b \u7684\u6548\u7387\u9ad8\u4e86\u5f88\u591a\u3002\u56e0\u4e3a\uff1a \u540c\u6b65\u7f16\u7a0b\uff0c\u6309\u7167\u987a\u5e8f\u9010\u4e00\u6392\u961f\u6267\u884c\uff0c\u5982\u679c\u56fe\u7247\u4e0b\u8f7d\u65f6\u95f4\u4e3a2\u5206\u949f\uff0c\u90a3\u4e48\u5168\u90e8\u6267\u884c\u5b8c\u5219\u9700\u89816\u5206\u949f\u3002 \u5f02\u6b65\u7f16\u7a0b\uff0c\u51e0\u4e4e\u540c\u65f6\u53d1\u51fa\u4e863\u4e2a\u4e0b\u8f7d\u4efb\u52a1\u7684\u8bf7\u6c42\uff08\u9047\u5230IO\u8bf7\u6c42\u81ea\u52a8\u5207\u6362\u53bb\u53d1\u9001\u5176\u4ed6\u4efb\u52a1\u8bf7\u6c42\uff09\uff0c\u5982\u679c\u56fe\u7247\u4e0b\u8f7d\u65f6\u95f4\u4e3a2\u5206\u949f\uff0c\u90a3\u4e48\u5168\u90e8\u6267\u884c\u5b8c\u6bd5\u4e5f\u5927\u6982\u9700\u89812\u5206\u949f\u5de6\u53f3\u5c31\u53ef\u4ee5\u4e86\u3002 2.2 \u5c0f\u7ed3 \u534f\u7a0b\u4e00\u822c\u5e94\u7528\u5728\u6709IO\u64cd\u4f5c\u7684\u7a0b\u5e8f\u4e2d\uff0c\u56e0\u4e3a\u534f\u7a0b\u53ef\u4ee5\u5229\u7528IO\u7b49\u5f85\u7684\u65f6\u95f4\u53bb\u6267\u884c\u4e00\u4e9b\u5176\u4ed6\u7684\u4ee3\u7801\uff0c\u4ece\u800c\u63d0\u5347\u4ee3\u7801\u6267\u884c\u6548\u7387\u3002 \u751f\u6d3b\u4e2d\u4e0d\u4e5f\u662f\u8fd9\u6837\u7684\u4e48\uff0c\u5047\u8bbe \u4f60\u662f\u4e00\u5bb6\u5236\u9020\u6c7d\u8f66\u7684\u8001\u677f\uff0c\u5458\u5de5\u70b9\u51fb\u8bbe\u5907\u7684\u3010\u5f00\u59cb\u3011\u6309\u94ae\u4e4b\u540e\uff0c\u5728\u8bbe\u5907\u524d\u9700\u7b49\u5f8530\u5206\u949f\uff0c\u7136\u540e\u70b9\u51fb\u3010\u7ed3\u675f\u3011\u6309\u94ae\uff0c\u6b64\u65f6\u4f5c\u4e3a\u8001\u677f\u7684\u4f60\u4e00\u5b9a\u5e0c\u671b\u8fd9\u4e2a\u5458\u5de5\u5728\u7b49\u5f85\u7684\u90a330\u5206\u949f\u7684\u65f6\u95f4\u53bb\u505a\u70b9\u5176\u4ed6\u7684\u5de5\u4f5c\u3002","title":"2.\u534f\u7a0b\u7684\u610f\u4e49"},{"location":"python\u8fdb\u9636/asyncio/#3","text":"\u57fa\u4e8e async & await \u5173\u952e\u5b57\u7684\u534f\u7a0b\u53ef\u4ee5\u5b9e\u73b0\u5f02\u6b65\u7f16\u7a0b\uff0c\u8fd9\u4e5f\u662f\u76ee\u524dpython\u5f02\u6b65\u76f8\u5173\u7684\u4e3b\u6d41\u6280\u672f\u3002 \u60f3\u8981\u771f\u6b63\u7684\u4e86\u89e3Python\u4e2d\u5185\u7f6e\u7684\u5f02\u6b65\u7f16\u7a0b\uff0c\u6839\u636e\u4e0b\u6587\u7684\u987a\u5e8f\u4e00\u70b9\u70b9\u6765\u770b\u3002 3.1 \u4e8b\u4ef6\u5faa\u73af \u4e8b\u4ef6\u5faa\u73af\uff0c\u53ef\u4ee5\u628a\u4ed6\u5f53\u505a\u662f\u4e00\u4e2awhile\u5faa\u73af\uff0c\u8fd9\u4e2awhile\u5faa\u73af\u5728\u5468\u671f\u6027\u7684\u8fd0\u884c\u5e76\u6267\u884c\u4e00\u4e9b \u4efb\u52a1 \uff0c\u5728\u7279\u5b9a\u6761\u4ef6\u4e0b\u7ec8\u6b62\u5faa\u73af\u3002 # \u4f2a\u4ee3\u7801 \u4efb\u52a1\u5217\u8868 = [ \u4efb\u52a11, \u4efb\u52a12, \u4efb\u52a13,... ] while True: \u53ef\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\uff0c\u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u5217\u8868 = \u53bb\u4efb\u52a1\u5217\u8868\u4e2d\u68c0\u67e5\u6240\u6709\u7684\u4efb\u52a1\uff0c\u5c06'\u53ef\u6267\u884c'\u548c'\u5df2\u5b8c\u6210'\u7684\u4efb\u52a1\u8fd4\u56de for \u5c31\u7eea\u4efb\u52a1 in \u5df2\u51c6\u5907\u5c31\u7eea\u7684\u4efb\u52a1\u5217\u8868: \u6267\u884c\u5df2\u5c31\u7eea\u7684\u4efb\u52a1 for \u5df2\u5b8c\u6210\u7684\u4efb\u52a1 in \u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u5217\u8868: \u5728\u4efb\u52a1\u5217\u8868\u4e2d\u79fb\u9664 \u5df2\u5b8c\u6210\u7684\u4efb\u52a1 \u5982\u679c \u4efb\u52a1\u5217\u8868 \u4e2d\u7684\u4efb\u52a1\u90fd\u5df2\u5b8c\u6210\uff0c\u5219\u7ec8\u6b62\u5faa\u73af \u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u6765\u83b7\u53d6\u548c\u521b\u5efa\u4e8b\u4ef6\u5faa\u73af\u3002 import asyncio loop = asyncio.get_event_loop() 3.2 \u534f\u7a0b\u548c\u5f02\u6b65\u7f16\u7a0b \u534f\u7a0b\u51fd\u6570\uff0c\u5b9a\u4e49\u5f62\u5f0f\u4e3a async def \u7684\u51fd\u6570\u3002 \u534f\u7a0b\u5bf9\u8c61\uff0c\u8c03\u7528 \u534f\u7a0b\u51fd\u6570 \u6240\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 # \u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\u51fd\u6570 async def func(): pass # \u8c03\u7528\u534f\u7a0b\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61 result = func() \u6ce8\u610f\uff1a\u8c03\u7528\u534f\u7a0b\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u5185\u90e8\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\uff0c\u53ea\u662f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002 3.2.1 \u57fa\u672c\u5e94\u7528 \u7a0b\u5e8f\u4e2d\uff0c\u5982\u679c\u60f3\u8981\u6267\u884c\u534f\u7a0b\u51fd\u6570\u7684\u5185\u90e8\u4ee3\u7801\uff0c\u9700\u8981 \u4e8b\u4ef6\u5faa\u73af \u548c \u534f\u7a0b\u5bf9\u8c61 \u914d\u5408\u624d\u80fd\u5b9e\u73b0\uff0c\u5982\uff1a import asyncio async def func(): print(\"\u534f\u7a0b\u5185\u90e8\u4ee3\u7801\") # \u8c03\u7528\u534f\u7a0b\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002 result = func() # \u65b9\u5f0f\u4e00 # loop = asyncio.get_event_loop() # \u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af # loop.run_until_complete(result) # \u5c06\u534f\u7a0b\u5f53\u505a\u4efb\u52a1\u63d0\u4ea4\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\uff0c\u534f\u7a0b\u6267\u884c\u5b8c\u6210\u4e4b\u540e\u7ec8\u6b62\u3002 # \u65b9\u5f0f\u4e8c # \u672c\u8d28\u4e0a\u65b9\u5f0f\u4e00\u662f\u4e00\u6837\u7684\uff0c\u5185\u90e8\u5148 \u521b\u5efa\u4e8b\u4ef6\u5faa\u73af \u7136\u540e\u6267\u884c run_until_complete\uff0c\u4e00\u4e2a\u7b80\u4fbf\u7684\u5199\u6cd5\u3002 # asyncio.run \u51fd\u6570\u5728 Python 3.7 \u4e2d\u52a0\u5165 asyncio \u6a21\u5757\uff0c asyncio.run(result) \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\uff1a\u5c06 \u534f\u7a0b \u5f53\u505a\u4efb\u52a1\u6dfb\u52a0\u5230 \u4e8b\u4ef6\u5faa\u73af \u7684\u4efb\u52a1\u5217\u8868\uff0c\u7136\u540e\u4e8b\u4ef6\u5faa\u73af\u68c0\u6d4b\u5217\u8868\u4e2d\u7684 \u534f\u7a0b \u662f\u5426 \u5df2\u51c6\u5907\u5c31\u7eea\uff08\u9ed8\u8ba4\u53ef\u7406\u89e3\u4e3a\u5c31\u7eea\u72b6\u6001\uff09\uff0c\u5982\u679c\u51c6\u5907\u5c31\u7eea\u5219\u6267\u884c\u5176\u5185\u90e8\u4ee3\u7801\u3002 3.2.2 await await\u662f\u4e00\u4e2a\u53ea\u80fd\u5728\u534f\u7a0b\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u5173\u952e\u5b57\uff0c\u7528\u4e8e\u9047\u5230IO\u64cd\u4f5c\u65f6\u6302\u8d77 \u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u6302\u8d77\u8fc7\u7a0b\u4e2d \u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u7684\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u5f53\u524d\u534f\u7a0bIO\u5904\u7406\u5b8c\u6210\u65f6\uff0c\u53ef\u4ee5\u518d\u6b21\u5207\u6362\u56de\u6765\u6267\u884cawait\u4e4b\u540e\u7684\u4ee3\u7801\u3002\u4ee3\u7801\u5982\u4e0b\uff1a \u793a\u4f8b1\uff1a import asyncio async def func(): print(\"\u6267\u884c\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u4ee3\u7801\") # \u9047\u5230IO\u64cd\u4f5c\u6302\u8d77\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u7b49IO\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002 # \u5f53\u524d\u534f\u7a0b\u6302\u8d77\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u3002 response = await asyncio.sleep(2) print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response) result = func() asyncio.run(result) \u793a\u4f8b2\uff1a import asyncio async def others(): print(\"start\") await asyncio.sleep(2) print('end') return '\u8fd4\u56de\u503c' async def func(): print(\"\u6267\u884c\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u4ee3\u7801\") # \u9047\u5230IO\u64cd\u4f5c\u6302\u8d77\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u7b49IO\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002 # \u5f53\u524d\u534f\u7a0b\u6302\u8d77\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u3002 response = await others() print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response) asyncio.run( func() ) \u793a\u4f8b3\uff1a import asyncio async def others(): print(\"start\") await asyncio.sleep(2) print('end') return '\u8fd4\u56de\u503c' async def func(): print(\"\u6267\u884c\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u4ee3\u7801\") # \u9047\u5230IO\u64cd\u4f5c\u6302\u8d77\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u7b49IO\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002 # \u5f53\u524d\u534f\u7a0b\u6302\u8d77\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u3002 response1 = await others() print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response1) response2 = await others() print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response2) asyncio.run( func() ) \u4e0a\u8ff0\u7684\u6240\u6709\u793a\u4f8b\u90fd\u53ea\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u4efb\u52a1\uff0c\u5373\uff1a\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\u53ea\u6709\u4e00\u4e2a\u4efb\u52a1\uff0c\u6240\u4ee5\u5728IO\u7b49\u5f85\u65f6\u65e0\u6cd5\u6f14\u793a\u5207\u6362\u5230\u5176\u4ed6\u4efb\u52a1\u6548\u679c\u3002 \u5728\u7a0b\u5e8f\u60f3\u8981\u521b\u5efa\u591a\u4e2a\u4efb\u52a1\u5bf9\u8c61\uff0c\u9700\u8981\u4f7f\u7528Task\u5bf9\u8c61\u6765\u5b9e\u73b0\u3002 3.2.3 Task\u5bf9\u8c61 Tasks are used to schedule coroutines concurrently. When a coroutine is wrapped into a Task with functions like asyncio. create_task() the coroutine is automatically scheduled to run soon\u3002 Tasks\u7528\u4e8e\u5e76\u53d1\u8c03\u5ea6\u534f\u7a0b\uff0c\u901a\u8fc7 asyncio.create_task(\u534f\u7a0b\u5bf9\u8c61) \u7684\u65b9\u5f0f\u521b\u5efaTask\u5bf9\u8c61\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u534f\u7a0b\u52a0\u5165\u4e8b\u4ef6\u5faa\u73af\u4e2d\u7b49\u5f85\u88ab\u8c03\u5ea6\u6267\u884c\u3002\u9664\u4e86\u4f7f\u7528 asyncio.create_task() \u51fd\u6570\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u7528\u4f4e\u5c42\u7ea7\u7684 loop.create_task() \u6216 ensure_future() \u51fd\u6570\u3002\u4e0d\u5efa\u8bae\u624b\u52a8\u5b9e\u4f8b\u5316 Task \u5bf9\u8c61\u3002 \u672c\u8d28\u4e0a\u662f\u5c06\u534f\u7a0b\u5bf9\u8c61\u5c01\u88c5\u6210task\u5bf9\u8c61\uff0c\u5e76\u5c06\u534f\u7a0b\u7acb\u5373\u52a0\u5165\u4e8b\u4ef6\u5faa\u73af\uff0c\u540c\u65f6\u8ffd\u8e2a\u534f\u7a0b\u7684\u72b6\u6001\u3002 \u6ce8\u610f\uff1a asyncio.create_task() \u51fd\u6570\u5728 Python 3.7 \u4e2d\u88ab\u52a0\u5165\u3002\u5728 Python 3.7 \u4e4b\u524d\uff0c\u53ef\u4ee5\u6539\u7528\u4f4e\u5c42\u7ea7\u7684 asyncio.ensure_future() \u51fd\u6570\u3002 \u793a\u4f8b1\uff1a import asyncio async def func(): print(1) await asyncio.sleep(2) print(2) return \"\u8fd4\u56de\u503c\" async def main(): print(\"main\u5f00\u59cb\") # \u521b\u5efa\u534f\u7a0b\uff0c\u5c06\u534f\u7a0b\u5c01\u88c5\u5230\u4e00\u4e2aTask\u5bf9\u8c61\u4e2d\u5e76\u7acb\u5373\u6dfb\u52a0\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\uff0c # \u7b49\u5f85\u4e8b\u4ef6\u5faa\u73af\u53bb\u6267\u884c\uff08\u9ed8\u8ba4\u662f\u5c31\u7eea\u72b6\u6001\uff09\u3002 task1 = asyncio.create_task(func()) # \u521b\u5efa\u534f\u7a0b\uff0c\u5c06\u534f\u7a0b\u5c01\u88c5\u5230\u4e00\u4e2aTask\u5bf9\u8c61\u4e2d\u5e76\u7acb\u5373\u6dfb\u52a0\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\uff0c # \u7b49\u5f85\u4e8b\u4ef6\u5faa\u73af\u53bb\u6267\u884c\uff08\u9ed8\u8ba4\u662f\u5c31\u7eea\u72b6\u6001\uff09\u3002 task2 = asyncio.create_task(func()) print(\"main\u7ed3\u675f\") # \u5f53\u6267\u884c\u67d0\u534f\u7a0b\u9047\u5230IO\u64cd\u4f5c\u65f6\uff0c\u4f1a\u81ea\u52a8\u5316\u5207\u6362\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u3002 # \u6b64\u5904\u7684await\u662f\u7b49\u5f85\u76f8\u5bf9\u5e94\u7684\u534f\u7a0b\u5168\u90fd\u6267\u884c\u5b8c\u6bd5\u5e76\u83b7\u53d6\u7ed3\u679c ret1 = await task1 ret2 = await task2 print(ret1, ret2) asyncio.run(main()) \u793a\u4f8b2\uff1a import asyncio async def func(): print(1) await asyncio.sleep(2) print(2) return \"\u8fd4\u56de\u503c\" async def main(): print(\"main\u5f00\u59cb\") # \u521b\u5efa\u534f\u7a0b\uff0c\u5c06\u534f\u7a0b\u5c01\u88c5\u5230Task\u5bf9\u8c61\u4e2d\u5e76\u6dfb\u52a0\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\u4e2d\uff0c # \u7b49\u5f85\u4e8b\u4ef6\u5faa\u73af\u53bb\u6267\u884c\uff08\u9ed8\u8ba4\u662f\u5c31\u7eea\u72b6\u6001\uff09\u3002\u5728\u8c03\u7528 task_list = [ asyncio.create_task(func(), name=\"n1\"), asyncio.create_task(func(), name=\"n2\") ] print(\"main\u7ed3\u675f\") # \u5f53\u6267\u884c\u67d0\u534f\u7a0b\u9047\u5230IO\u64cd\u4f5c\u65f6\uff0c\u4f1a\u81ea\u52a8\u5316\u5207\u6362\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u3002 # \u6b64\u5904\u7684await\u662f\u7b49\u5f85\u6240\u6709\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0c\u5e76\u5c06\u6240\u6709\u534f\u7a0b\u7684\u8fd4\u56de\u503c\u4fdd\u5b58\u5230done # \u5982\u679c\u8bbe\u7f6e\u4e86timeout\u503c\uff0c\u5219\u610f\u5473\u7740\u6b64\u5904\u6700\u591a\u7b49\u5f85\u7684\u79d2\uff0c\u5b8c\u6210\u7684\u534f\u7a0b\u8fd4\u56de\u503c\u5199\u5165\u5230done\u4e2d\uff0c\u672a\u5b8c\u6210\u5219\u5199\u5230pending\u4e2d\u3002 done, pending = await asyncio.wait(task_list, timeout=None) print(done, pending) asyncio.run(main()) \u6ce8\u610f\uff1a asyncio.wait \u6e90\u7801\u5185\u90e8\u4f1a\u5bf9\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u534f\u7a0b\u6267\u884censure_future\u4ece\u800c\u5c01\u88c5\u4e3aTask\u5bf9\u8c61\uff0c\u6240\u4ee5\u5728\u548cwait\u914d\u5408\u4f7f\u7528\u65f6task_list\u7684\u503c\u4e3a [func(),func()] \u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u793a\u4f8b3\uff1a import asyncio async def func(): print(\"\u6267\u884c\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u4ee3\u7801\") # \u9047\u5230IO\u64cd\u4f5c\u6302\u8d77\u5f53\u524d\u534f\u7a0b\uff08\u4efb\u52a1\uff09\uff0c\u7b49IO\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u518d\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\u3002 # \u5f53\u524d\u534f\u7a0b\u6302\u8d77\u65f6\uff0c\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u534f\u7a0b\uff08\u4efb\u52a1\uff09\u3002 response = await asyncio.sleep(2) print(\"IO\u8bf7\u6c42\u7ed3\u675f\uff0c\u7ed3\u679c\u4e3a\uff1a\", response) coroutine_list = [func(), func()] # \u9519\u8bef\uff1acoroutine_list = [ asyncio.create_task(func()), asyncio.create_task(func()) ] # \u6b64\u5904\u4e0d\u80fd\u76f4\u63a5 asyncio.create_task\uff0c\u56e0\u4e3a\u5c06Task\u7acb\u5373\u52a0\u5165\u5230\u4e8b\u4ef6\u5faa\u73af\u7684\u4efb\u52a1\u5217\u8868\uff0c # \u4f46\u6b64\u65f6\u4e8b\u4ef6\u5faa\u73af\u8fd8\u672a\u521b\u5efa\uff0c\u6240\u4ee5\u4f1a\u62a5\u9519\u3002 # \u4f7f\u7528asyncio.wait\u5c06\u5217\u8868\u5c01\u88c5\u4e3a\u4e00\u4e2a\u534f\u7a0b\uff0c\u5e76\u8c03\u7528asyncio.run\u5b9e\u73b0\u6267\u884c\u4e24\u4e2a\u534f\u7a0b # asyncio.wait\u5185\u90e8\u4f1a\u5bf9\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u534f\u7a0b\u6267\u884censure_future\uff0c\u5c01\u88c5\u4e3aTask\u5bf9\u8c61\u3002 done,pending = asyncio.run( asyncio.wait(coroutine_list) ) 3.2.4 asyncio.Future\u5bf9\u8c61 A Futureis a special low-level awaitable object that represents an eventual result of an asynchronous operation. asyncio\u4e2d\u7684Future\u5bf9\u8c61\u662f\u4e00\u4e2a\u76f8\u5bf9\u66f4\u504f\u5411\u5e95\u5c42\u7684\u53ef\u5bf9\u8c61\uff0c\u901a\u5e38\u6211\u4eec\u4e0d\u4f1a\u76f4\u63a5\u7528\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528Task\u5bf9\u8c61\u6765\u5b8c\u6210\u4efb\u52a1\u7684\u5e76\u548c\u72b6\u6001\u7684\u8ffd\u8e2a\u3002\uff08 Task \u662f Futrue\u7684\u5b50\u7c7b \uff09 Future\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5f02\u6b65\u7f16\u7a0b\u4e2d\u7684 \u6700\u7ec8\u7ed3\u679c \u7684\u5904\u7406\uff08Task\u7c7b\u4e5f\u5177\u5907\u72b6\u6001\u5904\u7406\u7684\u529f\u80fd\uff09\u3002 \u793a\u4f8b1\uff1a async def main(): # \u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af loop = asyncio.get_running_loop() # # \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff08Future\u5bf9\u8c61\uff09\uff0c\u8fd9\u4e2a\u4efb\u52a1\u4ec0\u4e48\u90fd\u4e0d\u5e72\u3002 fut = loop.create_future() # \u7b49\u5f85\u4efb\u52a1\u6700\u7ec8\u7ed3\u679c\uff08Future\u5bf9\u8c61\uff09\uff0c\u6ca1\u6709\u7ed3\u679c\u5219\u4f1a\u4e00\u76f4\u7b49\u4e0b\u53bb\u3002 await fut asyncio.run(main()) \u793a\u4f8b2\uff1a import asyncio async def set_after(fut): await asyncio.sleep(2) fut.set_result(\"666\") async def main(): # \u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af loop = asyncio.get_running_loop() # \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff08Future\u5bf9\u8c61\uff09\uff0c\u6ca1\u7ed1\u5b9a\u4efb\u4f55\u884c\u4e3a\uff0c\u5219\u8fd9\u4e2a\u4efb\u52a1\u6c38\u8fdc\u4e0d\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f\u3002 fut = loop.create_future() # \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff08Task\u5bf9\u8c61\uff09\uff0c\u7ed1\u5b9a\u4e86set_after\u51fd\u6570\uff0c\u51fd\u6570\u5185\u90e8\u57282s\u4e4b\u540e\uff0c\u4f1a\u7ed9fut\u8d4b\u503c\u3002 # \u5373\u624b\u52a8\u8bbe\u7f6efuture\u4efb\u52a1\u7684\u6700\u7ec8\u7ed3\u679c\uff0c\u90a3\u4e48fut\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\u3002 await loop.create_task(set_after(fut)) # \u7b49\u5f85 Future\u5bf9\u8c61\u83b7\u53d6 \u6700\u7ec8\u7ed3\u679c\uff0c\u5426\u5219\u4e00\u76f4\u7b49\u4e0b\u53bb data = await fut print(data) asyncio.run(main()) Future\u5bf9\u8c61\u672c\u8eab\u51fd\u6570\u8fdb\u884c\u7ed1\u5b9a\uff0c\u6240\u4ee5\u60f3\u8981\u8ba9\u4e8b\u4ef6\u5faa\u73af\u83b7\u53d6Future\u7684\u7ed3\u679c\uff0c\u5219\u9700\u8981\u624b\u52a8\u8bbe\u7f6e\u3002\u800cTask\u5bf9\u8c61\u7ee7\u627f\u4e86Future\u5bf9\u8c61\uff0c\u5176\u5b9e\u5c31\u5bf9Future\u8fdb\u884c\u6269\u5c55\uff0c\u4ed6\u53ef\u4ee5\u5b9e\u73b0\u5728\u5bf9\u5e94\u7ed1\u5b9a\u7684\u51fd\u6570\u6267\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u81ea\u52a8\u6267\u884c set_result \uff0c\u4ece\u800c\u5b9e\u73b0\u81ea\u52a8\u7ed3\u675f\u3002 \u867d\u7136\uff0c\u5e73\u65f6\u4f7f\u7528\u7684\u662fTask\u5bf9\u8c61\uff0c\u4f46\u5bf9\u4e8e\u7ed3\u679c\u7684\u5904\u7406\u672c\u8d28\u662f\u57fa\u4e8eFuture\u5bf9\u8c61\u6765\u5b9e\u73b0\u7684\u3002 \u6269\u5c55\uff1a\u652f\u6301 await \u5bf9\u8c61 \u8bed \u6cd5\u7684\u5bf9\u8c61\u8bfe\u6210\u4e3a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u6240\u4ee5 \u534f\u7a0b\u5bf9\u8c61 \u3001 Task\u5bf9\u8c61 \u3001 Future\u5bf9\u8c61 \u90fd\u53ef\u4ee5\u88ab\u6210\u4e3a\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002 3.2.5 futures.Future\u5bf9\u8c61 \u5728Python\u7684 concurrent.futures \u6a21\u5757\u4e2d\u4e5f\u6709\u4e00\u4e2aFuture\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u57fa\u4e8e\u7ebf\u7a0b\u6c60\u548c\u8fdb\u7a0b\u6c60\u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684\u5bf9\u8c61\u3002 import time from concurrent.futures import Future from concurrent.futures.thread import ThreadPoolExecutor from concurrent.futures.process import ProcessPoolExecutor def func(value): time.sleep(1) print(value) pool = ThreadPoolExecutor(max_workers=5) # \u6216 pool = ProcessPoolExecutor(max_workers=5) for i in range(10): fut = pool.submit(func, i) print(fut) \u4e24\u4e2aFuture\u5bf9\u8c61\u662f\u4e0d\u540c\u7684\uff0c\u4ed6\u4eec\u662f\u4e3a\u4e0d\u540c\u7684\u5e94\u7528\u573a\u666f\u800c\u8bbe\u8ba1\uff0c\u4f8b\u5982\uff1a concurrent.futures.Future \u4e0d\u652f\u6301await\u8bed\u6cd5 \u7b49\u3002 \u5b98\u65b9\u63d0\u793a\u4e24\u5bf9\u8c61\u4e4b\u95f4\u4e0d\u540c\uff1a unlike asyncio Futures, concurrent.futures.Future instances cannot be awaited. asyncio.Future.result() and asyncio.Future.exception() do not accept the timeout argument. asyncio.Future.result() and asyncio.Future.exception() raise an InvalidStateError exception when the Future is not done . Callbacks registered with asyncio.Future.add_done_callback() are not called immediately. They are scheduled with loop.call_soon() instead. asyncio Future is not compatible with the concurrent.futures.wait() and concurrent.futures.as_completed() functions. \u5728Python\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c06 futures.Future \u5bf9\u8c61\u5305\u88c5\u6210 asyncio.Future \u5bf9\u8c61\u7684\u51fd\u6570 asynic.wrap_future \u3002 \u63a5\u4e0b\u91cc\u4f60\u80af\u5b9a\u95ee\uff1a\u4e3a\u4ec0\u4e48python\u4f1a\u63d0\u4f9b\u8fd9\u79cd\u529f\u80fd\uff1f \u5176\u5b9e\uff0c\u4e00\u822c\u5728\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u6211\u4eec\u8981\u4e48\u7edf\u4e00\u4f7f\u7528 asycio \u7684\u534f\u7a0b\u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c\u3001\u8981\u4e48\u90fd\u4f7f\u7528\u8fdb\u7a0b\u6c60\u548c\u7ebf\u7a0b\u6c60\u5b9e\u73b0\u5f02\u6b65\u64cd\u4f5c\u3002\u4f46\u5982\u679c \u534f\u7a0b\u7684\u5f02\u6b65 \u548c \u8fdb\u7a0b\u6c60/\u7ebf\u7a0b\u6c60\u7684\u5f02\u6b65 \u6df7\u642d\u65f6\uff0c\u90a3\u4e48\u5c31\u4f1a\u7528\u5230\u6b64\u529f\u80fd\u4e86\u3002 import time import asyncio import concurrent.futures def func1(): # \u67d0\u4e2a\u8017\u65f6\u64cd\u4f5c time.sleep(2) return \"XXX\" async def main(): loop = asyncio.get_running_loop() # 1. Run in the default loop's executor ( \u9ed8\u8ba4ThreadPoolExecutor ) # \u7b2c\u4e00\u6b65\uff1a\u5185\u90e8\u4f1a\u5148\u8c03\u7528 ThreadPoolExecutor \u7684 submit \u65b9\u6cd5\u53bb\u7ebf\u7a0b\u6c60\u4e2d\u7533\u8bf7\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884cfunc1\u51fd\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aconcurrent.futures.Future\u5bf9\u8c61 # \u7b2c\u4e8c\u6b65\uff1a\u8c03\u7528asyncio.wrap_future\u5c06concurrent.futures.Future\u5bf9\u8c61\u5305\u88c5\u4e3aasycio.Future\u5bf9\u8c61\u3002 # \u56e0\u4e3aconcurrent.futures.Future\u5bf9\u8c61\u4e0d\u652f\u6301await\u8bed\u6cd5\uff0c\u6240\u4ee5\u9700\u8981\u5305\u88c5\u4e3a asycio.Future\u5bf9\u8c61 \u624d\u80fd\u4f7f\u7528\u3002 fut = loop.run_in_executor(None, func1) result = await fut print('default thread pool', result) # 2. Run in a custom thread pool: # with concurrent.futures.ThreadPoolExecutor() as pool: # result = await loop.run_in_executor( # pool, func1) # print('custom thread pool', result) # 3. Run in a custom process pool: # with concurrent.futures.ProcessPoolExecutor() as pool: # result = await loop.run_in_executor( # pool, func1) # print('custom process pool', result) asyncio.run(main()) \u5e94\u7528\u573a\u666f\uff1a \u5f53\u9879\u76ee\u4ee5\u534f\u7a0b\u5f0f\u7684\u5f02\u6b65\u7f16\u7a0b\u5f00\u53d1\u65f6\uff0c\u5982\u679c\u8981\u4f7f\u7528\u4e00\u4e2a\u7b2c\u4e09\u65b9\u6a21\u5757\uff0c\u800c\u7b2c\u4e09\u65b9\u6a21\u5757\u4e0d\u652f\u6301\u534f\u7a0b\u65b9\u5f0f\u5f02\u6b65\u7f16\u7a0b\u65f6\uff0c\u5c31\u9700\u8981\u7528\u5230\u8fd9\u4e2a\u529f\u80fd\uff0c \u4f8b\u5982\uff1a import asyncio import requests async def download_image(url): # \u53d1\u9001\u7f51\u7edc\u8bf7\u6c42\uff0c\u4e0b\u8f7d\u56fe\u7247\uff08\u9047\u5230\u7f51\u7edc\u4e0b\u8f7d\u56fe\u7247\u7684IO\u8bf7\u6c42\uff0c\u81ea\u52a8\u5316\u5207\u6362\u5230\u5176\u4ed6\u4efb\u52a1\uff09 print(\"\u5f00\u59cb\u4e0b\u8f7d:\", url) loop = asyncio.get_event_loop() # requests\u6a21\u5757\u9ed8\u8ba4\u4e0d\u652f\u6301\u5f02\u6b65\u64cd\u4f5c\uff0c\u6240\u4ee5\u5c31\u4f7f\u7528\u7ebf\u7a0b\u6c60\u6765\u914d\u5408\u5b9e\u73b0\u4e86\u3002 future = loop.run_in_executor(None, requests.get, url) response = await future print('\u4e0b\u8f7d\u5b8c\u6210') # \u56fe\u7247\u4fdd\u5b58\u5230\u672c\u5730\u6587\u4ef6 file_name = url.rsplit('_')[-1] with open(file_name, mode='wb') as file_object: file_object.write(response.content) if __name__ == '__main__': url_list = [ 'https://www3.autoimg.cn/newsdfs/g26/M02/35/A9/120x90_0_autohomecar__ChsEe12AXQ6AOOH_AAFocMs8nzU621.jpg', 'https://www2.autoimg.cn/newsdfs/g30/M01/3C/E2/120x90_0_autohomecar__ChcCSV2BBICAUntfAADjJFd6800429.jpg', 'https://www3.autoimg.cn/newsdfs/g26/M0B/3C/65/120x90_0_autohomecar__ChcCP12BFCmAIO83AAGq7vK0sGY193.jpg' ] tasks = [download_image(url) for url in url_list] loop = asyncio.get_event_loop() loop.run_until_complete( asyncio.wait(tasks) ) 3.2.6 \u5f02\u6b65\u8fed\u4ee3\u5668 \u4ec0\u4e48\u662f\u5f02\u6b65\u8fed\u4ee3\u5668 \u5b9e\u73b0\u4e86 __aiter__() \u548c __anext__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 __anext__ \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a awaitable \u5bf9\u8c61\u3002 async for \u4f1a\u5904\u7406\u5f02\u6b65\u8fed\u4ee3\u5668\u7684 __anext__() \u65b9\u6cd5\u6240\u8fd4\u56de\u7684\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u76f4\u5230\u5176\u5f15\u53d1\u4e00\u4e2a StopAsyncIteration \u5f02\u5e38\u3002\u7531 PEP 492 \u5f15\u5165\u3002 \u4ec0\u4e48\u662f\u5f02\u6b65\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1f \u53ef\u5728 async for \u8bed\u53e5\u4e2d\u88ab\u4f7f\u7528\u7684\u5bf9\u8c61\u3002\u5fc5\u987b\u901a\u8fc7\u5b83\u7684 __aiter__() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a asynchronous iterator \u3002\u7531 PEP 492 \u5f15\u5165\u3002 import asyncio class Reader(object): \"\"\" \u81ea\u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668\uff08\u540c\u65f6\u4e5f\u662f\u5f02\u6b65\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff09 \"\"\" def __init__(self): self.count = 0 async def readline(self): # await asyncio.sleep(1) self.count += 1 if self.count == 100: return None return self.count def __aiter__(self): return self async def __anext__(self): val = await self.readline() if val == None: raise StopAsyncIteration return val async def func(): # \u521b\u5efa\u5f02\u6b65\u53ef\u8fed\u4ee3\u5bf9\u8c61 async_iter = Reader() # async for \u5fc5\u987b\u8981\u653e\u5728async def\u51fd\u6570\u5185\uff0c\u5426\u5219\u8bed\u6cd5\u9519\u8bef\u3002 async for item in async_iter: print(item) asyncio.run(func()) \u5f02\u6b65\u8fed\u4ee3\u5668\u5176\u5b9e\u6ca1\u4ec0\u4e48\u592a\u5927\u7684\u4f5c\u7528\uff0c\u53ea\u662f\u652f\u6301\u4e86async for\u8bed\u6cd5\u800c\u5df2\u3002 3.2.6 \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u6b64\u79cd\u5bf9\u8c61\u901a\u8fc7\u5b9a\u4e49 __aenter__() \u548c __aexit__() \u65b9\u6cd5\u6765\u5bf9 async with \u8bed\u53e5\u4e2d\u7684\u73af\u5883\u8fdb\u884c\u63a7\u5236\u3002\u7531 PEP 492 \u5f15\u5165\u3002 import asyncio class AsyncContextManager: def __init__(self): self.conn = conn async def do_something(self): # \u5f02\u6b65\u64cd\u4f5c\u6570\u636e\u5e93 return 666 async def __aenter__(self): # \u5f02\u6b65\u94fe\u63a5\u6570\u636e\u5e93 self.conn = await asyncio.sleep(1) return self async def __aexit__(self, exc_type, exc, tb): # \u5f02\u6b65\u5173\u95ed\u6570\u636e\u5e93\u94fe\u63a5 await asyncio.sleep(1) async def func(): async with AsyncContextManager() as f: result = await f.do_something() print(result) asyncio.run(func()) \u8fd9\u4e2a\u5f02\u6b65\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u8fd8\u662f\u6bd4\u8f83\u6709\u7528\u7684\uff0c\u5e73\u65f6\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d \u6253\u5f00\u3001\u5904\u7406\u3001\u5173\u95ed \u64cd\u4f5c\u65f6\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u6765\u5904\u7406\u3002 3.3 \u5c0f\u7ed3 \u5728\u7a0b\u5e8f\u4e2d\u53ea\u8981\u770b\u5230 async \u548c await \u5173\u952e\u5b57\uff0c\u5176\u5185\u90e8\u5c31\u662f\u57fa\u4e8e\u534f\u7a0b\u5b9e\u73b0\u7684\u5f02\u6b65\u7f16\u7a0b\uff0c\u8fd9\u79cd\u5f02\u6b65\u7f16\u7a0b\u662f\u901a\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u5728IO\u7b49\u5f85\u65f6\u95f4\u53bb\u6267\u884c\u5176\u4ed6\u4efb\u52a1\uff0c\u4ece\u800c\u5b9e\u73b0\u5e76\u53d1\u3002 \u4ee5\u4e0a\u5c31\u662f\u5f02\u6b65\u7f16\u7a0b\u7684\u5e38\u89c1\u64cd\u4f5c\uff0c\u5185\u5bb9\u53c2\u8003\u5b98\u65b9\u6587\u6863\u3002 \u4e2d\u6587\u7248\uff1a https://docs.python.org/zh-cn/3.8/library/asyncio.html \u82f1\u6587\u7248\uff1a https://docs.python.org/3.8/library/asyncio.html","title":"3.\u5f02\u6b65\u7f16\u7a0b"},{"location":"python\u8fdb\u9636/asyncio/#4-uvloop","text":"Python\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4e86 asyncio \u6a21\u5757\uff0c\u7528\u4e8e\u652f\u6301\u57fa\u4e8e\u534f\u7a0b\u7684\u5f02\u6b65\u7f16\u7a0b\u3002 uvloop\u662f asyncio \u4e2d\u7684\u4e8b\u4ef6\u5faa\u73af\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u66ff\u6362\u540e\u53ef\u4ee5\u4f7f\u5f97asyncio\u6027\u80fd\u63d0\u9ad8\u3002\u4e8b\u5b9e\u4e0a\uff0cuvloop\u8981\u6bd4nodejs\u3001gevent\u7b49\u5176\u4ed6python\u5f02\u6b65\u6846\u67b6\u81f3\u5c11\u8981\u5feb2\u500d\uff0c\u6027\u80fd\u53ef\u4ee5\u6bd4\u80a9Go\u8bed\u8a00\u3002 \u5b89\u88c5uvloop pip3 install uvloop \u5728\u9879\u76ee\u4e2d\u60f3\u8981\u4f7f\u7528uvloop\u66ff\u6362asyncio\u7684\u4e8b\u4ef6\u5faa\u73af\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u8981\u5728\u4ee3\u7801\u4e2d\u8fd9\u4e48\u505a\u5c31\u884c\u3002 import asyncio import uvloop asyncio.set_event_loop_policy(uvloop.EventLoopPolicy()) # \u7f16\u5199asyncio\u7684\u4ee3\u7801\uff0c\u4e0e\u4e4b\u524d\u5199\u7684\u4ee3\u7801\u4e00\u81f4\u3002 # \u5185\u90e8\u7684\u4e8b\u4ef6\u5faa\u73af\u81ea\u52a8\u5316\u4f1a\u53d8\u4e3auvloop asyncio.run(...) \u6ce8\u610f\uff1a\u77e5\u540d\u7684asgi uvicorn\u5185\u90e8\u5c31\u662f\u4f7f\u7528\u7684uvloop\u7684\u4e8b\u4ef6\u5faa\u73af\u3002","title":"4. uvloop"},{"location":"python\u8fdb\u9636/asyncio/#5","text":"\u4e3a\u4e86\u66f4\u597d\u7406\u89e3\uff0c\u4e0a\u8ff0\u6240\u6709\u793a\u4f8b\u7684IO\u60c5\u51b5\u90fd\u662f\u4ee5 asyncio.sleep \u4e3a\u4f8b\uff0c\u800c\u771f\u5b9e\u7684\u9879\u76ee\u5f00\u53d1\u4e2d\u4f1a\u7528\u5230\u5f88\u591aIO\u7684\u60c5\u51b5\u3002 5.1 \u5f02\u6b65Redis \u5f53\u901a\u8fc7python\u53bb\u64cd\u4f5credis\u65f6\uff0c\u94fe\u63a5\u3001\u8bbe\u7f6e\u503c\u3001\u83b7\u53d6\u503c \u8fd9\u4e9b\u90fd\u6d89\u53ca\u7f51\u7edcIO\u8bf7\u6c42\uff0c\u4f7f\u7528asycio\u5f02\u6b65\u7684\u65b9\u5f0f\u53ef\u4ee5\u5728IO\u7b49\u5f85\u65f6\u53bb\u505a\u4e00\u4e9b\u5176\u4ed6\u4efb\u52a1\uff0c\u4ece\u800c\u63d0\u5347\u6027\u80fd\u3002 \u5b89\u88c5Python\u5f02\u6b65\u64cd\u4f5credis\u6a21\u5757 pip3 install aioredis \u793a\u4f8b1\uff1a\u5f02\u6b65\u64cd\u4f5credis # -*- coding:utf-8 -*- import asyncio import aioredis async def execute(address, password): print(\"\u5f00\u59cb\u6267\u884c\", address) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u521b\u5efaredis\u8fde\u63a5 redis = await aioredis.create_redis(address, password=password) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5728redis\u4e2d\u8bbe\u7f6e\u54c8\u5e0c\u503ccar\uff0c\u5185\u90e8\u5728\u8bbe\u4e09\u4e2a\u952e\u503c\u5bf9\uff0c # \u5373\uff1a redis = { car:{key1:1,key2:2,key3:3}} await redis.hmset_dict('car', key1=1, key2=2, key3=3) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u53bbredis\u4e2d\u83b7\u53d6\u503c result = await redis.hgetall('car', encoding='utf-8') print(result) redis.close() # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5173\u95edredis\u8fde\u63a5 await redis.wait_closed() print(\"\u7ed3\u675f\", address) asyncio.run(execute('redis://47.93.4.198:6379', \"root!2345\")) \u793a\u4f8b2\uff1a\u8fde\u63a5\u591a\u4e2aredis\u505a\u64cd\u4f5c\uff08\u9047\u5230IO\u4f1a\u5207\u6362\u5176\u4ed6\u4efb\u52a1\uff0c\u63d0\u4f9b\u4e86\u6027\u80fd\uff09 import asyncio import aioredis async def execute(address, password): print(\"\u5f00\u59cb\u6267\u884c\", address) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5148\u53bb\u8fde\u63a5 47.93.4.197:6379\uff0c\u9047\u5230IO\u5219\u81ea\u52a8\u5207\u6362\u4efb\u52a1\uff0c\u53bb\u8fde\u63a547.93.4.198:6379 redis = await aioredis.create_redis_pool(address, password=password) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 await redis.hmset_dict('car', key1=1, key2=2, key3=3) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 result = await redis.hgetall('car', encoding='utf-8') print(result) redis.close() # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 await redis.wait_closed() print(\"\u7ed3\u675f\", address) task_list = [ execute('redis://47.93.4.197:6379', \"root!2345\"), execute('redis://47.93.4.198:6379', \"root!2345\") ] asyncio.run(asyncio.wait(task_list)) \u66f4\u591aredis\u64cd\u4f5c\u53c2\u8003aioredis\u5b98\u7f51\uff1a https://aioredis.readthedocs.io/en/v1.3.0/start.html 5.2 \u5f02\u6b65MySQL \u5f53\u901a\u8fc7python\u53bb\u64cd\u4f5cMySQL\u65f6\uff0c\u8fde\u63a5\u3001\u6267\u884cSQL\u3001\u5173\u95ed\u90fd\u6d89\u53ca\u7f51\u7edcIO\u8bf7\u6c42\uff0c\u4f7f\u7528asycio\u5f02\u6b65\u7684\u65b9\u5f0f\u53ef\u4ee5\u5728IO\u7b49\u5f85\u65f6\u53bb\u505a\u4e00\u4e9b\u5176\u4ed6\u4efb\u52a1\uff0c\u4ece\u800c\u63d0\u5347\u6027\u80fd\u3002 \u5b89\u88c5Python\u5f02\u6b65\u64cd\u4f5credis\u6a21\u5757 pip3 install aiomysql \u793a\u4f8b1\uff1a import asyncio import aiomysql async def execute(): # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u8fde\u63a5MySQL conn = await aiomysql.connect(host='127.0.0.1', port=3306, user='root', password='123', db='mysql', ) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u521b\u5efaCURSOR cur = await conn.cursor() # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u6267\u884cSQL await cur.execute(\"SELECT Host,User FROM user\") # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u83b7\u53d6SQL\u7ed3\u679c result = await cur.fetchall() print(result) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5173\u95ed\u94fe\u63a5 await cur.close() conn.close() asyncio.run(execute()) \u793a\u4f8b2\uff1a # -*- coding:utf-8 -*- import asyncio import aiomysql async def execute(host, password): print(\"\u5f00\u59cb\", host) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u5148\u53bb\u8fde\u63a5 47.93.40.197\uff0c\u9047\u5230IO\u5219\u81ea\u52a8\u5207\u6362\u4efb\u52a1\uff0c\u53bb\u8fde\u63a547.93.40.198:6379 conn = await aiomysql.connect(host=host, port=3306, user='root', password=password, db='mysql') # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 cur = await conn.cursor() # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 await cur.execute(\"SELECT Host,User FROM user\") # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 result = await cur.fetchall() print(result) # \u7f51\u7edcIO\u64cd\u4f5c\uff1a\u9047\u5230IO\u4f1a\u81ea\u52a8\u5207\u6362\u4efb\u52a1 await cur.close() conn.close() print(\"\u7ed3\u675f\", host) task_list = [ execute('47.93.40.197', \"root!2345\"), execute('47.93.40.197', \"root!2345\") ] asyncio.run(asyncio.wait(task_list)) 5.3 FastAPI\u6846\u67b6 FastAPI\u662f\u4e00\u6b3e\u7528\u4e8e\u6784\u5efaAPI\u7684\u9ad8\u6027\u80fdweb\u6846\u67b6\uff0c\u6846\u67b6\u57fa\u4e8ePython3.6+\u7684 type hints \u642d\u5efa\u3002 \u63a5\u4e0b\u91cc\u7684\u5f02\u6b65\u793a\u4f8b\u4ee5 FastAPI \u548c uvicorn \u6765\u8bb2\u89e3\uff08uvicorn\u662f\u4e00\u4e2a\u652f\u6301\u5f02\u6b65\u7684asgi\uff09\u3002 \u5b89\u88c5FastAPI web \u6846\u67b6 pip3 install fastapi \u5b89\u88c5uvicorn\uff0c\u672c\u8d28\u4e0a\u4e3aweb\u63d0\u4f9bsocket server\u7684\u652f\u6301\u7684asgi\uff08\u4e00\u822c\u652f\u6301\u5f02\u6b65\u79f0asgi\u3001\u4e0d\u652f\u6301\u5f02\u6b65\u79f0wsgi\uff09 pip3 install uvicorn \u793a\u4f8b\uff1a # -*- coding:utf-8 -*- import asyncio import uvicorn import aioredis from aioredis import Redis from fastapi import FastAPI app = FastAPI() REDIS_POOL = aioredis.ConnectionsPool('redis://47.193.14.198:6379', password=\"root123\", minsize=1, maxsize=10) @app.get(\"/\") def index(): \"\"\" \u666e\u901a\u64cd\u4f5c\u63a5\u53e3 \"\"\" return {\"message\": \"Hello World\"} @app.get(\"/red\") async def red(): \"\"\" \u5f02\u6b65\u64cd\u4f5c\u63a5\u53e3 \"\"\" print(\"\u8bf7\u6c42\u6765\u4e86\") await asyncio.sleep(3) # \u8fde\u63a5\u6c60\u83b7\u53d6\u4e00\u4e2a\u8fde\u63a5 conn = await REDIS_POOL.acquire() redis = Redis(conn) # \u8bbe\u7f6e\u503c await redis.hmset_dict('car', key1=1, key2=2, key3=3) # \u8bfb\u53d6\u503c result = await redis.hgetall('car', encoding='utf-8') print(result) # \u8fde\u63a5\u5f52\u8fd8\u8fde\u63a5\u6c60 REDIS_POOL.release(conn) return result if __name__ == '__main__': uvicorn.run(\"luffy:app\", host=\"127.0.0.1\", port=5000, log_level=\"info\") \u5728\u6709\u591a\u4e2a\u7528\u6237\u5e76\u53d1\u8bf7\u6c42\u7684\u60c5\u51b5\u4e0b\uff0c\u5f02\u6b65\u65b9\u5f0f\u6765\u7f16\u5199\u7684\u63a5\u53e3\u53ef\u4ee5\u5728IO\u7b49\u5f85\u8fc7\u7a0b\u4e2d\u53bb\u5904\u7406\u5176\u4ed6\u7684\u8bf7\u6c42\uff0c\u63d0\u4f9b\u6027\u80fd\u3002 \u4f8b\u5982\uff1a\u540c\u65f6\u6709\u4e24\u4e2a\u7528\u6237\u5e76\u53d1\u6765\u5411\u63a5\u53e3 http://127.0.0.1:5000/red \u53d1\u9001\u8bf7\u6c42\uff0c\u670d\u52a1\u7aef\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u8bf7\u6c42\u88ab\u5904\u7406\u3002 \u5f02\u6b65\u5904\u7406\u53ef\u4ee5\u63d0\u4f9b\u5e76\u53d1\u662f\u56e0\u4e3a\uff1a\u5f53\u89c6\u56fe\u51fd\u6570\u5728\u5904\u7406\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\u6b64\u65f6\u662f\u7b49\u5f85\u88ab\u5904\u7406\u7684\u72b6\u6001\uff0c\u5f53\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u9047\u5230IO\u7b49\u5f85\u65f6\uff0c\u4f1a\u81ea\u52a8\u5207\u6362\u53bb\u63a5\u6536\u5e76\u5904\u7406\u7b2c\u4e8c\u4e2a\u8bf7\u6c42\uff0c\u5f53\u9047\u5230IO\u65f6\u81ea\u52a8\u5316\u5207\u6362\u81f3\u5176\u4ed6\u8bf7\u6c42\uff0c\u4e00\u65e6\u6709\u8bf7\u6c42IO\u6267\u884c\u5b8c\u6bd5\uff0c\u5219\u4f1a\u518d\u6b21\u56de\u5230\u6307\u5b9a\u8bf7\u6c42\u5411\u4e0b\u7ee7\u7eed\u6267\u884c\u5176\u529f\u80fd\u4ee3\u7801\u3002 5.4 \u722c\u866b \u5728\u7f16\u5199\u722c\u866b\u5e94\u7528\u65f6\uff0c\u9700\u8981\u901a\u8fc7\u7f51\u7edcIO\u53bb\u8bf7\u6c42\u76ee\u6807\u6570\u636e\uff0c\u8fd9\u79cd\u60c5\u51b5\u9002\u5408\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u6765\u63d0\u5347\u6027\u80fd\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u4f7f\u7528\u652f\u6301\u5f02\u6b65\u7f16\u7a0b\u7684aiohttp\u6a21\u5757\u6765\u5b9e\u73b0\u3002 \u5b89\u88c5aiohttp\u6a21\u5757 pip3 install aiohttp \u793a\u4f8b\uff1a import aiohttp import asyncio async def fetch(session, url): print(\"\u53d1\u9001\u8bf7\u6c42\uff1a\", url) async with session.get(url, verify_ssl=False) as response: text = await response.text() print(\"\u5f97\u5230\u7ed3\u679c\uff1a\", url, len(text)) async def main(): async with aiohttp.ClientSession() as session: url_list = [ 'https://python.org', 'https://www.baidu.com', 'https://www.pythonav.com' ] tasks = [asyncio.create_task(fetch(session, url)) for url in url_list] await asyncio.wait(tasks) if __name__ == '__main__': asyncio.run(main())","title":"5.\u5b9e\u6218\u6848\u4f8b"},{"location":"python\u8fdb\u9636/asyncio/#6","text":"\u4e3a\u4e86\u63d0\u5347\u6027\u80fd\u8d8a\u6765\u8d8a\u591a\u7684\u6846\u67b6\u90fd\u5728\u5411\u5f02\u6b65\u7f16\u7a0b\u9760\u62e2\uff0c\u4f8b\u5982\uff1asanic\u3001tornado\u3001django3.0\u3001django channels\u7ec4\u4ef6 \u7b49\uff0c\u7528\u66f4\u5c11\u8d44\u6e90\u53ef\u4ee5\u505a\u5904\u7406\u66f4\u591a\u7684\u4e8b\uff0c\u4f55\u4e50\u800c\u4e0d\u4e3a\u5462\u3002","title":"6.\u603b\u7ed3"},{"location":"python\u8fdb\u9636/asyncio2/","text":"\u91cd\u8981\u6982\u5ff5 1\u3001C10K\u95ee\u9898\uff1a(\u53c2\u8003\u535a\u5ba2 C10K\u95ee\u9898 ) 2\u3001\u5e76\u53d1\u3001\u5e76\u884c\u3001\u540c\u6b65\u3001\u5f02\u6b65\u3001\u963b\u585e\u3001\u975e\u963b\u585e\u3002 1.\u5e76\u53d1\u662f\u6307\u5728\u4e00\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u6709\u51e0\u4e2a\u7a0b\u5e8f\u5728\u540c\u4e00\u4e2acpu\u4e0a\u8fd0\u884c\uff0c\u4f46\u662f\u4efb\u610f\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7a0b\u5e8f\u5728cpu\u4e0a\u8fd0\u884c\u3002 2.\u5e76\u884c\u662f\u6307\u4efb\u610f\u65f6\u523b\u70b9\u4e0a\uff0c\u6709\u591a\u4e2a\u7a0b\u5e8f\u540c\u65f6\u8fd0\u884c\u5728\u591a\u4e2acpu\u4e0a\u3002 3\u3001IO\u591a\u8def\u590d\u7528\u2014\u2014select\u3001pool\u3001epool\u3002 select+\u56de\u8c03+\u4e8b\u4ef6\u5faa\u73af\u83b7\u53d6html \u975e\u963b\u585eio\u5b8c\u6210http\u8bf7\u6c42\uff1a\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u63d0\u5347\u5e76\u53d1\u6548\u7387 import time import socket from urllib.parse import urlparse # \u4f7f\u7528\u975e\u963b\u585eio\u5b8c\u6210http\u8bf7\u6c42 def get_url(url): # \u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u975e\u963b\u585eio client.setblocking(False) try: client.connect((host, 80)) # \u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu except BlockingIOError as e: pass # \u4e0d\u505c\u7684\u8be2\u95ee\u8fde\u63a5\u662f\u5426\u5efa\u7acb\u597d\uff0c \u9700\u8981while\u5faa\u73af\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u72b6\u6001 # \u505a\u8ba1\u7b97\u4efb\u52a1\u6216\u8005\u518d\u6b21\u53d1\u8d77\u5176\u4ed6\u7684\u8fde\u63a5\u8bf7\u6c42 while True: try: client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) break except OSError as e: pass data = b\"\" while True: try: d = client.recv(1024) except BlockingIOError as e: continue if d: data += d else: break data = data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) client.close() if __name__ == \"__main__\": get_url(\"http://www.baidu.com\") select+\u56de\u8c03+\u4e8b\u4ef6\u5faa\u73af\u5b8c\u6210http\u8bf7\u6c42\u2014\u2014\u5e76\u53d1\u6027\u597d\u3001\u4f7f\u7528\u7684\u662f\u5355\u7ebf\u7a0b 1\u3001epoll\u5e76\u4e0d\u4ee3\u8868\u4e00\u5b9a\u6bd4select\u597d\uff1a \u5728\u5e76\u53d1\u9ad8\u7684\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u6d3b\u8dc3\u5ea6\u4e0d\u662f\u5f88\u9ad8\uff0c epoll\u6bd4select\u597d\u3002 \u5e76\u53d1\u6027\u4e0d\u9ad8\uff0c\u540c\u65f6\u8fde\u63a5\u5f88\u6d3b\u8dc3\uff0c select\u6bd4epoll\u597d\u3002 2\u3001\u56de\u8c03+\u4e8b\u4ef6\u5faa\u73af+select(poll\\epoll)\u7684\u6a21\u5f0f\uff1a tornado gevent \u534f\u7a0b/asyncio 3\u3001\u5177\u4f53\u5b9e\u73b0\uff1a import socket from urllib.parse import urlparse # selectors\u5185\u90e8\u4f7f\u7528select\uff0c\u5b9e\u9645\u4f7f\u7528\u8fd9\u4e2a from selectors import DefaultSelector, EVENT_READ, EVENT_WRITE # \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5168\u5c40\u7684selector selector = DefaultSelector() urls = [] stop = False # \u4f7f\u7528\u7c7b\u5b8c\u6210 \u2014\u2014 \u56de\u8c03\u9700\u8981\u7528\u5230\u5df2\u7ecf\u5efa\u7acb\u597d\u7684\u94fe\u63a5 class Fetcher: def connected(self, key): selector.unregister(key.fd) # \u8fd9\u91cc\u4f7f\u7528\u4e86\u4e8b\u4ef6\u76d1\u542c\uff0c\u4e0d\u7528\u4f7f\u7528while\u5faa\u73af\u8f6e\u8bad\uff08\u4e0d\u9700\u8981\u7528try\u6355\u83b7\u5f02\u5e38\uff09 # path\u4e0ehost\u90fd\u9700\u8981\u8bbe\u7f6e\u6210\u5bf9\u8c61\u7684\u5c5e\u6027 self.client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(self.path, self.host).encode(\"utf8\")) # \u63a5\u6536\u6570\u636e\u53c8\u9700\u8981\u76d1\u542csocket\u2014\u2014\u662f\u5426\u662f\u53ef\u8bfb\u7684\u72b6\u6001 selector.register(self.client.fileno(), EVENT_READ, self.readable) # \u53d8\u5f97\u53ef\u8bfb\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u81ea\u5df1\u53bb\u8c03\u7528\u5b83\u7684\u4ee3\u7801 def readable(self, key): d = self.client.recv(1024) if d: self.data += d # \u6570\u636e\u5df2\u7ecf\u8bfb\u5b8c\u4e86 else: selector.unregister(key.fd) data = self.data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) self.client.close() # windows\u9ed8\u8ba4\u4f7f\u7528select\u4f1a\u629b\u5f02\u5e38\uff0clinux\u9ed8\u8ba4\u4f7f\u7528epoll\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898 # \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u5728windows\u4e2d\u7684\u5fc5\u8981\u8bbe\u7f6e urls.remove(self.spider_url) if not urls: # \u5fc5\u987b\u4fee\u6539\u5168\u5c40\u7684\u53d8\u91cf global stop stop = True def get_url(self, url): self.spider_url = url url = urlparse(url) self.host = url.netloc self.path = url.path self.data = b\"\" if self.path == \"\": self.path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.client.setblocking(False) try: self.client.connect((self.host, 80)) # \u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu except BlockingIOError as e: pass # \u6ce8\u610f\u5fc5\u987b\u6ce8\u518c\uff01 # \u56de\u8c03\u4f7f\u7528\u5df2\u7ecf\u5efa\u7acb\u597d\u7684\u94fe\u63a5 \u2014\u2014 \u6ce8\u610fconnected\u4e0d\u8981\u52a0\u62ec\u53f7\uff01\u5199\u51fd\u6570\u7684\u540d\u79f0\uff01 selector.register(self.client.fileno(), EVENT_WRITE, self.connected) # \u81ea\u5df1\u8c03\u7528select\uff0c\u53bb\u4e0d\u505c\u7684\u5224\u65ad\u54ea\u4e00\u4e2asocket\u51c6\u5907\u597d\u4e86\u3001\u5b83\u662f\u53ef\u8bfb\u8fd8\u662f\u53ef\u5199 # \u5982\u679c\u5b83\u662f\u53ef\u8bfb\u6216\u8005\u53ef\u5199\u6211\u4eec\u9700\u8981\u8c03\u7528\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570 \u2014\u2014 \u6ce8\u610f\u8fd9\u4e2a\u56de\u8c03\u662f\u6211\u4eec\u81ea\u5df1\u6765\u505a\u7684 def loop(): # \u4e8b\u4ef6\u5faa\u73af\uff0c\u4e0d\u505c\u7684\u8bf7\u6c42socket\u7684\u72b6\u6001\u5e76\u8c03\u7528\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570 # 1. select\u672c\u8eab\u662f\u4e0d\u652f\u6301register\u6a21\u5f0f # 2. socket\u72b6\u6001\u53d8\u5316\u4ee5\u540e\u7684\u56de\u8c03\u662f\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u5b8c\u6210\u7684\uff0c\u800c\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u5b8c\u6210\u7684 while not stop: ready = selector.select() for key, mask in ready: call_back = key.data call_back(key) if __name__ == \"__main__\": fetcher = Fetcher() start_time = time.time() for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) urls.append(url) fetcher = Fetcher() fetcher.get_url(url) loop() print(time.time()-start_time) \u201c\u201d\u201c 0.26441121101379395 \u201d\u201c\u201d 4\u3001\u540c\u6b65\u7684\u65b9\u5f0f\u8017\u65f6\u6bd4\u4e0a\u9762\u7684\u957f\uff1a # requests -> urlib -> socket import socket from urllib.parse import urlparse def get_url(url): # \u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # client.setblocking(False) client.connect((host, 80)) #\u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu # \u4e0d\u505c\u7684\u8be2\u95ee\u8fde\u63a5\u662f\u5426\u5efa\u7acb\u597d\uff0c \u9700\u8981while\u5faa\u73af\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u72b6\u6001 # \u505a\u8ba1\u7b97\u4efb\u52a1\u6216\u8005\u518d\u6b21\u53d1\u8d77\u5176\u4ed6\u7684\u8fde\u63a5\u8bf7\u6c42 client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) data = b\"\" while True: d = client.recv(1024) if d: data += d else: break data = data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) client.close() if __name__ == \"__main__\": import time start_time = time.time() for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) get_url(url) print(time.time()-start_time) \"\"\" 0.8437938690185547 \"\"\" \u56de\u8c03\u6a21\u5f0f\u7684\u95ee\u9898 1\u3001\u6211\u4eec\u53bb\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\u7684\u65f6\u5019\u5fc5\u987b\u8ba9\u4e8b\u4ef6\u5faa\u73af\u9a71\u52a8\u56de\u8c03\u3002 2\u3001\u5c06\u4f20\u7edf\u7684\u4ee3\u7801\u5206\u5272\u7684\u201c\u56db\u5206\u4e94\u88c2\u201d\uff0c\u4ee3\u7801\u7ef4\u62a4\u96be\u5ea6\u9ad8\u3002 3\u3001\u4f1a\u4ea7\u751f\u7684\u95ee\u9898\uff1a 1.\u5982\u679c\u56de\u8c03\u51fd\u6570\u6267\u884c\u4e0d\u6b63\u5e38\u8be5\u5982\u4f55\u5904\u7406\uff1f 2.\u5982\u679c\u56de\u8c03\u91cc\u9762\u8fd8\u8981\u5d4c\u5957\u56de\u8c03\u600e\u4e48\u529e\uff1f\u8981\u5d4c\u5957\u5f88\u591a\u5c42\u600e\u4e48\u529e\uff1f 3.\u5982\u679c\u5d4c\u5957\u4e86\u591a\u5c42\uff0c\u5176\u4e2d\u67d0\u4e2a\u73af\u8282\u51fa\u9519\u4e86\u4f1a\u9020\u6210\u4ec0\u4e48\u540e\u679c\uff1f 4.\u5982\u679c\u6709\u4e2a\u6570\u636e\u9700\u8981\u88ab\u6bcf\u4e2a\u56de\u8c03\u90fd\u5904\u7406\u600e\u4e48\u529e\uff1f 5.\u5982\u4f55\u4f7f\u7528\u5f53\u524d\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\uff1f \u534f\u7a0b\u4ecb\u7ecd 1\u3001C10M\u95ee\u9898\uff1a \u5982\u4f55\u5229\u75288\u6838CPU\u300164G\u5185\u5b58\uff0c\u572810gbps\u7684\u7f51\u7edc\u4e0a\u4fdd\u63011000\u4e07\u5e76\u53d1\u8fde\u63a5\u3002 2\u3001\u56de\u8c03\u6a21\u5f0f\u4e0e\u540c\u6b65\u7f16\u7a0b\u7684\u95ee\u9898\uff1a 1\u3001\u56de\u8c03\u6a21\u5f0f\u4ee3\u7801\u590d\u6742\u5ea6\u9ad8 2\u3001\u540c\u6b65\u7f16\u7a0b\u5e76\u53d1\u6027\u4e0d\u9ad8 3\u3001\u591a\u7ebf\u7a0b\u7f16\u7a0b\u9700\u8981\u7ebf\u7a0b\u95f4\u540c\u6b65 \u2014\u2014 \u9700\u8981\u7528\u5230\u9501 \u2014\u2014 \u4f46\u662f\u9501\u4f1a\u964d\u4f4e\u6548\u7387 3\u3001\u9762\u4e34\u7684\u6311\u6218\uff1a 1\u3001\u91c7\u7528\u540c\u6b65\u7684\u65b9\u5f0f\u53bb\u7f16\u5199\u5f02\u6b65\u7684\u4ee3\u7801 2\u3001\u4f7f\u7528\u5355\u7ebf\u7a0b\u53bb\u5207\u6362\u4efb\u52a1\uff1a ->1.\u7ebf\u7a0b\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u5207\u6362\u7684\uff0c\u5355\u7ebf\u7a0b\u5207\u6362\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u7a0b\u5e8f\u5458\u81ea\u5df1\u53bb\u8c03\u5ea6\u4efb\u52a1 ->2.\u4e0d\u518d\u9700\u8981\u9501\uff0c\u5e76\u53d1\u6027\u9ad8\uff0c\u5728\u5355\u7ebf\u7a0b\u4e4b\u95f4\u5207\u6362\u51fd\u6570\uff0c\u6027\u80fd\u8fdc\u9ad8\u4e8e\u7ebf\u7a0b\u95f4\u5207\u6362\uff01 4\u3001\u4f20\u7edf\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b def get_html(url): pass def parse_url(url): pass def get_url1(url): #do someting 1 html = get_html(url) #\u6b64\u5904\u6682\u505c\uff0c\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u51fd\u6570\u53bb\u6267\u884c # #parse html urls = parse_url(html) def get_url2(url): # do someting 1 html = get_html(url) #\u6b64\u5904\u6682\u505c\uff0c\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u51fd\u6570\u53bb\u6267\u884c # #parse html urls = parse_url(html) # \u4f20\u7edf\u51fd\u6570\u8c03\u7528 \u8fc7\u7a0b A->B->C 5\u3001\u65b0\u7684\u9700\u6c42\u53ca\u534f\u7a0b\u7684\u51fa\u73b0\uff1a 1.\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u6682\u505c\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u9002\u5f53\u7684\u65f6\u5019\u6062\u590d\u8be5\u51fd\u6570\u7684\u7ee7\u7eed\u6267\u884c 2.\u51fa\u73b0\u4e86\u534f\u7a0b -> \u6709\u591a\u4e2a\u5165\u53e3\u7684\u51fd\u6570\uff0c \u53ef\u4ee5\u6682\u505c\u7684\u51fd\u6570\uff0c \u53ef\u4ee5\u6682\u505c\u7684\u51fd\u6570(\u53ef\u4ee5\u5411\u6682\u505c\u7684\u5730\u65b9\u4f20\u5165\u503c) \u751f\u6210\u5668\u8fdb\u9636\u53casend/close/throw\u65b9\u6cd5 1\u3001send\u65b9\u6cd5 \u751f\u6210\u5668\u4e0d\u53ea\u53ef\u4ee5\u4ea7\u51fa\u503c\uff0c\u8fd8\u53ef\u4ee5\u63a5\u6536\u503c\u3002 send\u65b9\u6cd5\u53ef\u4ee5\u4f20\u9012\u503c\u8fdb\u5165\u751f\u6210\u5668\u5185\u90e8\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u91cd\u542f\u751f\u6210\u5668\u6267\u884c\u5230\u4e0b\u4e00\u4e2ayield\u4f4d\u7f6e\u3002 \u6709\u4e86send\u65b9\u6cd5\u5c06\u503c\u4f20\u9012\u7ed9\u751f\u6210\u5668\u5185\u90e8\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528\u751f\u6210\u5668\u5b9e\u73b0\u534f\u7a0b\uff01 \u5728\u8c03\u7528send\u53d1\u9001\u975enone\u503c\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u542f\u52a8\u4e00\u6b21\u751f\u6210\u5668\uff01\u542f\u52a8\u751f\u6210\u5668\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a gen.send(None) \u4e0e next(gen) \u3002 1. gen.send(None) 2. next(gen) send\u7684\u6848\u4f8b\uff1a def gen_func(): # \u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u67092\u4e2a\uff1a # 1. \u53ef\u4ee5\u4ea7\u51fa\u503c\uff0c 2. \u53ef\u4ee5\u63a5\u6536\u503c(\u8c03\u7528\u65b9\u4f20\u9012\u8fdb\u6765\u7684\u503c) \u2014\u2014 \u4f20\u9012\u7ed9\u751f\u6210\u5668\u5185\u90e8 html = yield \"http://projectsedu.com\" print(\"html>>>>>\",html) yield 111 yield 222 return \"whw\" if __name__ == \"__main__\": gen = gen_func() # \u5728\u8c03\u7528send\u53d1\u9001\u975enone\u503c\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u542f\u52a8\u4e00\u6b21\u751f\u6210\u5668 # \u542f\u52a8\u751f\u6210\u5668\u65b9\u5f0f\u6709\u4e24\u79cd\uff0cgen.send(None) \u4e0e next(gen) # 1. gen.send(None); 2. next(gen) # \u5728\u7b2c\u4e00\u6b21send\u65f6\uff0c\u5fc5\u987bsend\u4e00\u4e2aNone\uff01\uff01\uff01\uff5e\uff5e\uff5e\uff5e\uff5e\uff5e\uff5e\uff5e url = gen.send(None) # download url html = \"whw\" # send\u65b9\u6cd5\u53ef\u4ee5\u4f20\u9012\u503c\u8fdb\u5165\u751f\u6210\u5668\u5185\u90e8\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u91cd\u542f\u751f\u6210\u5668\u6267\u884c\u5230\u4e0b\u4e00\u4e2ayield\u4f4d\u7f6e print(gen.send(html)) print(gen.send(html)) \"\"\" html>>>>> whw 111 222 \"\"\" 2\u3001close\u65b9\u6cd5 \u505c\u6b62\u2014\u2014\u5982\u679c\u540e\u9762\u8fd8\u4f7f\u7528next\u65b9\u6cd5\u7684\u8bdd\u4f1a\u62a5 StopIteration \u5f02\u5e38\u3002 close\u65b9\u6cd5\u4e4b\u540e\u8fd8\u6709yield\u7684\u8bdd\u4f1a\u629b\u5f02\u5e38\uff1a GeneratorExit \u3002 def gen_func(): # 1. \u53ef\u4ee5\u4ea7\u51fa\u503c\uff0c 2. \u53ef\u4ee5\u63a5\u6536\u503c(\u8c03\u7528\u65b9\u4f20\u9012\u8fdb\u6765\u7684\u503c) try: yield \"http://projectsedu.com\" except Exception: import traceback print(traceback.format_exc()) yield 2 yield 3 return \"whw\" if __name__ == \"__main__\": gen = gen_func() print(next(gen)) # close gen.close() print(next(gen)) print(\"whw\") # \u4e0d\u4f1a\u6267\u884c # GeneratorExit\u662f\u7ee7\u627f\u81eaBaseException\uff0c Exception 3\u3001throw\u65b9\u6cd5 \u4e0e\u5f02\u5e38\u5904\u7406\u6709\u5173\u3002 def gen_func(): #1. \u53ef\u4ee5\u4ea7\u51fa\u503c\uff0c 2. \u53ef\u4ee5\u63a5\u6536\u503c(\u8c03\u7528\u65b9\u4f20\u9012\u8fdb\u6765\u7684\u503c) try: yield \"http://projectsedu.com\" except Exception as e: import traceback print(traceback.format_exc()) yield 2 yield 3 return \"whw\" if __name__ == \"__main__\": gen = gen_func() print(next(gen)) # \u662f\u524d\u4e00\u4e2ayield\u5bf9\u5e94\u7684\u5f02\u5e38\uff01 gen.throw(Exception, \"download error\") print(next(gen)) gen.throw(Exception, \"download error\") yield from\u8bed\u6cd5 yield from\u662fpython3.3\u65b0\u52a0\u7684\u8bed\u6cd5\u3002 itertools.chain \u5c06\u51e0\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u653e\u5728\u4e00\u8d77\u904d\u5386\u3002 from itertools import chain my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } for value in chain(my_list,my_dict,range(1,5)): print(value) \"\"\" 1 2 3 html1 html2 1 2 3 4 \"\"\" \u4f7f\u7528yield\u5b9e\u73b0itertools.chain\u7684\u529f\u80fd my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } # \u81ea\u5df1\u662f\u5fc3\u554a\u4e00\u4e2achain\u6548\u679c\u7684\u51fd\u6570 def my_chain(*args, **kwargs): for my_iterable in args: # yield from my_iterable for value in my_iterable: yield value for value in my_chain(my_list, my_dict, range(5,7)): print(value) \"\"\" 1 2 3 html1 html2 5 6 \"\"\" \u4f7f\u7528yield from\u5b9e\u73b0itertools.chain\u7684\u529f\u80fd my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } def my_chain(*args, **kwargs): for my_iterable in args: yield from my_iterable for value in my_chain(my_list, my_dict, range(5,7)): print(value) \"\"\" 1 2 3 html1 html2 5 6 \"\"\" yield\u8bed\u6cd5\u4e0eyield from\u8bed\u6cd5\u7684\u533a\u522b yield\u540e\u9762\u8ddf\u4ec0\u4e48\u5c31\u8fd4\u56de\u4ec0\u4e48\uff1byield from\u540e\u9762\u8ddf\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u503c\u8fd4\u56de\u53bb\u3002 def g1(iterable): # yield\u540e\u9762\u8ddf\u4ec0\u4e48\u5c31\u8fd4\u56de\u4ec0\u4e48 yield iterable def g2(iterable): # yield from\u540e\u9762\u8ddf\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u503c\u8fd4\u56de\u53bb\u3002 yield from iterable for v in g1(range(3)): print(v) print(\"==================\") for v in g2(range(3)): print(v) \"\"\" range(0, 3) ================== 0 1 2 \"\"\" yield from\u4f1a\u5728\u8c03\u7528\u65b9\u4e0e\u5b50\u751f\u6210\u5668\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u53cc\u5411\u901a\u9053 \"\"\" # 1. main\uff1a\u8c03\u7528\u65b9\uff1bg1\uff1a\u59d4\u6258\u751f\u6210\u5668\uff1bgen\uff1a\u5b50\u751f\u6210\u5668 # 2. yield from\u4f1a\u5728\u8c03\u7528\u65b9\u4e0e\u5b50\u751f\u6210\u5668\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u53cc\u5411\u901a\u9053 # \u6b64\u65f6\u5b50\u751f\u6210\u5668gen\u4e0e\u4e3b\u8c03\u7528\u65b9main\u5c31\u5efa\u7acb\u8d77\u4e86\u8054\u7cfb\u4e86 \"\"\" # gen\uff1a\u5b50\u751f\u6210\u5668 def g1(gen): yield from gen # g1\uff1a\u59d4\u6258\u751f\u6210\u5668 def main(): g = g1() g.send(None) \u8c03\u7528\u65b9+\u59d4\u6258\u751f\u6210\u5668+\u5b50\u751f\u6210\u5668\u7684\u4f7f\u7528\uff1a\u6784\u5efa\u9500\u91cf\u5b57\u5178 final_result = {} # \u5b50\u751f\u6210\u5668 \u2014\u2014 \u63a5\u6536\u5916\u9762\u4f20\u6765\u7684\u503c\u5e76\u505a\u4fdd\u5b58 def sales_sum(pro_name): total = 0 nums = [] while True: x = yield print(pro_name+\"\u9500\u91cf: \", x) # \u5916\u9762\u4f20\u8fdb\u6765\u7684\u503c\u4e3aNone\u7ed3\u675f if not x: break total += x nums.append(x) return total, nums # \u59d4\u6258\u751f\u6210\u5668 \u2014\u2014 \u5c06\u6bcf\u4e00\u884c\u6570\u636e\u8fdb\u884c\u7edf\u8ba1 def middle(key): while True: # yield from\u8c03\u7528\u5b50\u751f\u6210\u5668 final_result[key] = yield from sales_sum(key) print(key+\"\u9500\u91cf\u7edf\u8ba1\u5b8c\u6210\uff01\uff01.\") # \u8c03\u7528\u65b9 def main(): data_sets = { \"\u9762\u819c\": [1200,1500], \"\u98de\u673a\": [28,55,98,108], \"\u676f\u5b50\": [280,560,778,70], } for key, data_set in data_sets.items(): print(\"start key:\", key) m = middle(key) # \u9884\u6fc0middle\u534f\u7a0b m.send(None) for value in data_set: m.send(value) # \u7ed9\u534f\u7a0b\u4f20\u9012\u6bcf\u4e00\u7ec4\u7684\u503c m.send(None) print(\"final_result:\", final_result) if __name__ == '__main__': main() \"\"\" start key: \u9762\u819c \u9762\u819c\u9500\u91cf: 1200 \u9762\u819c\u9500\u91cf: 1500 \u9762\u819c\u9500\u91cf: None \u9762\u819c\u9500\u91cf\u7edf\u8ba1\u5b8c\u6210\uff01\uff01. start key: \u98de\u673a \u98de\u673a\u9500\u91cf: 28 \u98de\u673a\u9500\u91cf: 55 \u98de\u673a\u9500\u91cf: 98 \u98de\u673a\u9500\u91cf: 108 \u98de\u673a\u9500\u91cf: None \u98de\u673a\u9500\u91cf\u7edf\u8ba1\u5b8c\u6210\uff01\uff01. start key: \u676f\u5b50 \u676f\u5b50\u9500\u91cf: 280 \u676f\u5b50\u9500\u91cf: 560 \u676f\u5b50\u9500\u91cf: 778 \u676f\u5b50\u9500\u91cf: 70 \u676f\u5b50\u9500\u91cf: None \u676f\u5b50\u9500\u91cf\u7edf\u8ba1\u5b8c\u6210\uff01\uff01. final_result: {'\u9762\u819c': (2700, [1200, 1500]), '\u98de\u673a': (289, [28, 55, 98, 108]), '\u676f\u5b50': (1688, [280, 560, 778, 70])} \"\"\" \u5b50\u751f\u6210\u5668\u5206\u6790\uff1ayield from\u7684\u5f3a\u5927\u4e4b\u5904 \u5355\u72ec\u4f7f\u7528\u5b50\u751f\u6210\u5668\u7684\u8bdd\u8fd8\u5f97\u6355\u83b7\u5f02\u5e38\uff01\u5728\u59d4\u6258\u751f\u6210\u5668\u4e2d\u4f7f\u7528yield from\u7684\u8bdd\u4e0d\u7528\u8003\u8651\u8fd9\u4e00\u70b9\u3002 def sales_sum(pro_name): total = 0 nums = [] while True: x = yield print(pro_name+\"\u9500\u91cf: \", x) if not x: break total += x nums.append(x) return total, nums if __name__ == \"__main__\": my_gen = sales_sum(\"\u98de\u673a\") # send\u7684\u7b2c\u4e00\u4e2a\u503c\u5fc5\u987b\u662fNone\uff01\uff01\uff01 my_gen.send(None) my_gen.send(1200) my_gen.send(1500) my_gen.send(3000) try: my_gen.send(None) except StopIteration as e: result = e.value print(result) \"\"\" \u98de\u673a\u9500\u91cf: 1200 \u98de\u673a\u9500\u91cf: 1500 \u98de\u673a\u9500\u91cf: 3000 \u98de\u673a\u9500\u91cf: None (5700, [1200, 1500, 3000]) \"\"\" yield from\u7684\u539f\u7406\u8bf4\u660e\uff08pep380\u6587\u6863\uff09 # pep380 #1. RESULT = yield from EXPR\u53ef\u4ee5\u7b80\u5316\u6210\u4e0b\u9762\u8fd9\u6837 #\u4e00\u4e9b\u8bf4\u660e \"\"\" _i\uff1a\u5b50\u751f\u6210\u5668\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 _y\uff1a\u5b50\u751f\u6210\u5668\u751f\u4ea7\u7684\u503c _r\uff1ayield from \u8868\u8fbe\u5f0f\u6700\u7ec8\u7684\u503c _s\uff1a\u8c03\u7528\u65b9\u901a\u8fc7send()\u53d1\u9001\u7684\u503c _e\uff1a\u5f02\u5e38\u5bf9\u8c61 \"\"\" _i = iter(EXPR) # EXPR\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c_i\u5176\u5b9e\u662f\u5b50\u751f\u6210\u5668\uff1b try: _y = next(_i) # \u9884\u6fc0\u5b50\u751f\u6210\u5668\uff0c\u628a\u4ea7\u51fa\u7684\u7b2c\u4e00\u4e2a\u503c\u5b58\u5728_y\u4e2d\uff1b except StopIteration as _e: _r = _e.value # \u5982\u679c\u629b\u51fa\u4e86`StopIteration`\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u5c06\u5f02\u5e38\u5bf9\u8c61\u7684`value`\u5c5e\u6027\u4fdd\u5b58\u5230_r\uff0c\u8fd9\u662f\u6700\u7b80\u5355\u7684\u60c5\u51b5\u7684\u8fd4\u56de\u503c\uff1b else: while 1: # \u5c1d\u8bd5\u6267\u884c\u8fd9\u4e2a\u5faa\u73af\uff0c\u59d4\u6258\u751f\u6210\u5668\u4f1a\u963b\u585e\uff1b _s = yield _y # \u751f\u4ea7\u5b50\u751f\u6210\u5668\u7684\u503c\uff0c\u7b49\u5f85\u8c03\u7528\u65b9`send()`\u503c\uff0c\u53d1\u9001\u8fc7\u6765\u7684\u503c\u5c06\u4fdd\u5b58\u5728_s\u4e2d\uff1b try: _y = _i.send(_s) # \u8f6c\u53d1_s\uff0c\u5e76\u4e14\u5c1d\u8bd5\u5411\u4e0b\u6267\u884c\uff1b except StopIteration as _e: _r = _e.value # \u5982\u679c\u5b50\u751f\u6210\u5668\u629b\u51fa\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u83b7\u53d6\u5f02\u5e38\u5bf9\u8c61\u7684`value`\u5c5e\u6027\u5b58\u5230_r\uff0c\u9000\u51fa\u5faa\u73af\uff0c\u6062\u590d\u59d4\u6258\u751f\u6210\u5668\u7684\u8fd0\u884c\uff1b break RESULT = _r # _r\u5c31\u662f\u6574\u4e2ayield from\u8868\u8fbe\u5f0f\u8fd4\u56de\u7684\u503c\u3002 \"\"\" 1. \u5b50\u751f\u6210\u5668\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5e76\u4e0d\u662f\u4e00\u4e2a\u4f5c\u4e3a\u534f\u7a0b\u7684\u751f\u6210\u5668\uff0c\u6240\u4ee5\u5b83\u4e0d\u652f\u6301.throw()\u548c.close()\u65b9\u6cd5\uff1b 2. \u5982\u679c\u5b50\u751f\u6210\u5668\u652f\u6301.throw()\u548c.close()\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u5b50\u751f\u6210\u5668\u5185\u90e8\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff1b 3. \u8c03\u7528\u65b9\u8ba9\u5b50\u751f\u6210\u5668\u81ea\u5df1\u629b\u51fa\u5f02\u5e38 4. \u5f53\u8c03\u7528\u65b9\u4f7f\u7528next()\u6216\u8005.send(None)\u65f6\uff0c\u90fd\u8981\u5728\u5b50\u751f\u6210\u5668\u4e0a\u8c03\u7528next()\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u65b9\u4f7f\u7528.send()\u53d1\u9001\u975e None \u503c\u65f6\uff0c\u624d\u8c03\u7528\u5b50\u751f\u6210\u5668\u7684.send()\u65b9\u6cd5\uff1b \"\"\" _i = iter(EXPR) try: _y = next(_i) except StopIteration as _e: _r = _e.value else: while 1: try: _s = yield _y except GeneratorExit as _e: try: _m = _i.close except AttributeError: pass else: _m() raise _e except BaseException as _e: _x = sys.exc_info() try: _m = _i.throw except AttributeError: raise _e else: try: _y = _m(*_x) except StopIteration as _e: _r = _e.value break else: try: if _s is None: _y = next(_i) else: _y = _i.send(_s) except StopIteration as _e: _r = _e.value break RESULT = _r \"\"\" \u770b\u5b8c\u4ee3\u7801\uff0c\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u5173\u952e\u70b9\uff1a 1. \u5b50\u751f\u6210\u5668\u751f\u4ea7\u7684\u503c\uff0c\u90fd\u662f\u76f4\u63a5\u4f20\u7ed9\u8c03\u7528\u65b9\u7684\uff1b\u8c03\u7528\u65b9\u901a\u8fc7.send()\u53d1\u9001\u7684\u503c\u90fd\u662f\u76f4\u63a5\u4f20\u9012\u7ed9\u5b50\u751f\u6210\u5668\u7684\uff1b\u5982\u679c\u53d1\u9001\u7684\u662f None\uff0c\u4f1a\u8c03\u7528\u5b50\u751f\u6210\u5668\u7684__next__()\u65b9\u6cd5\uff0c\u5982\u679c\u4e0d\u662f None\uff0c\u4f1a\u8c03\u7528\u5b50\u751f\u6210\u5668\u7684.send()\u65b9\u6cd5\uff1b 2. \u5b50\u751f\u6210\u5668\u9000\u51fa\u7684\u65f6\u5019\uff0c\u6700\u540e\u7684return EXPR\uff0c\u4f1a\u89e6\u53d1\u4e00\u4e2aStopIteration(EXPR)\u5f02\u5e38\uff1b 3. yield from\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u662f\u5b50\u751f\u6210\u5668\u7ec8\u6b62\u65f6\uff0c\u4f20\u9012\u7ed9StopIteration\u5f02\u5e38\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff1b 4. \u5982\u679c\u8c03\u7528\u7684\u65f6\u5019\u51fa\u73b0StopIteration\u5f02\u5e38\uff0c\u59d4\u6258\u751f\u6210\u5668\u4f1a\u6062\u590d\u8fd0\u884c\uff0c\u540c\u65f6\u5176\u4ed6\u7684\u5f02\u5e38\u4f1a\u5411\u4e0a \"\u5192\u6ce1\"\uff1b 5. \u4f20\u5165\u59d4\u6258\u751f\u6210\u5668\u7684\u5f02\u5e38\u91cc\uff0c\u9664\u4e86GeneratorExit\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6240\u6709\u5f02\u5e38\u5168\u90e8\u4f20\u9012\u7ed9\u5b50\u751f\u6210\u5668\u7684.throw()\u65b9\u6cd5\uff1b\u5982\u679c\u8c03\u7528.throw()\u7684\u65f6\u5019\u51fa\u73b0\u4e86StopIteration\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u6062\u590d\u59d4\u6258\u751f\u6210\u5668\u7684\u8fd0\u884c\uff0c\u5176\u4ed6\u7684\u5f02\u5e38\u5168\u90e8\u5411\u4e0a \"\u5192\u6ce1\"\uff1b 6. \u5982\u679c\u5728\u59d4\u6258\u751f\u6210\u5668\u4e0a\u8c03\u7528.close()\u6216\u4f20\u5165GeneratorExit\u5f02\u5e38\uff0c\u4f1a\u8c03\u7528\u5b50\u751f\u6210\u5668\u7684.close()\u65b9\u6cd5\uff0c\u6ca1\u6709\u7684\u8bdd\u5c31\u4e0d\u8c03\u7528\u3002\u5982\u679c\u5728\u8c03\u7528.close()\u7684\u65f6\u5019\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u5411\u4e0a \"\u5192\u6ce1\"\uff0c\u5426\u5219\u7684\u8bdd\u59d4\u6258\u751f\u6210\u5668\u4f1a\u629b\u51faGeneratorExit\u5f02\u5e38\u3002 \"\"\" Python\u4e2d\u7684\u539f\u751f\u534f\u7a0b:async\u4e0eawait python3.5\u4e3a\u4e86\u5c06\u8bed\u4e49\u53d8\u5f97\u66f4\u52a0\u660e\u786e\uff0c\u5c31\u5f15\u5165\u4e86async\u548cawait\u5173\u952e\u8bcd\u7528\u4e8e\u5b9a\u4e49\u539f\u751f\u7684\u534f\u7a0b\u3002 \u6ce8\u610f\uff1aasync\u4e2d\u4e0d\u80fd\u6709yield\u3002 \"\"\" types.coroutine\u88c5\u9970\u7684\u51fd\u6570\u53ef\u4ee5\u653e\u5728await\u540e\u9762 \"\"\" # import types # @types.coroutine # def downloader(url): # yield \"whw\" from collections import Awaitable async def downloader(url): return \"whw\" async def download_url(url): # dosomethings # await\u540e\u9762\u53ea\u80fd\u63a5\u6536Awaitable\u5bf9\u8c61 html = await downloader(url) return html if __name__ == \"__main__\": coro = download_url(\"http://www.imooc.com\") # \u539f\u751f\u534f\u7a0b\u4e0d\u80fd\u4f7f\u7528next\u8c03\u7528\uff01\u987b\u4f7f\u7528send\u8c03\u7528\uff01 # next(None) coro.send(None) \u751f\u6210\u5668\u5b9e\u73b0\u534f\u7a0b\u7684\u4e00\u4e2a\u4f8b\u5b50 # -*- coding:utf-8 -*- import time def consumer(): # consumer\u4f5c\u4e3a\u4e00\u4e2a\u751f\u6210\u5668 while 1: data = yield def producer(): # \u751f\u6210\u5668\u5bf9\u8c61 g = consumer() # \u5148next\u540e\u9762\u624d\u80fdsend\u5177\u4f53\u7684\u975eNone\u7684\u503c,\u76f8\u5f53\u4e8e\u5148send\u4e00\u4e2aNone next(g) for i in range(1000000): g.send(i) if __name__ == '__main__': start = time.time() #\u5e76\u53d1\u6267\u884c,\u4f46\u662f\u4efb\u52a1producer\u9047\u5230io\u5c31\u4f1a\u963b\u585e\u4f4f,\u5e76\u4e0d\u4f1a\u5207\u5230\u8be5\u7ebf\u7a0b\u5185\u7684\u5176\u4ed6\u4efb\u52a1\u53bb\u6267\u884c producer() print('\u6267\u884c\u65f6\u95f4\uff1a',time.time() - start)","title":"12 Python\u534f\u7a0b\u8be6\u89e3\u4e0e\u8fdb\u9636"},{"location":"python\u8fdb\u9636/asyncio2/#_1","text":"1\u3001C10K\u95ee\u9898\uff1a(\u53c2\u8003\u535a\u5ba2 C10K\u95ee\u9898 ) 2\u3001\u5e76\u53d1\u3001\u5e76\u884c\u3001\u540c\u6b65\u3001\u5f02\u6b65\u3001\u963b\u585e\u3001\u975e\u963b\u585e\u3002 1.\u5e76\u53d1\u662f\u6307\u5728\u4e00\u4e2a\u65f6\u95f4\u6bb5\u5185\uff0c\u6709\u51e0\u4e2a\u7a0b\u5e8f\u5728\u540c\u4e00\u4e2acpu\u4e0a\u8fd0\u884c\uff0c\u4f46\u662f\u4efb\u610f\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7a0b\u5e8f\u5728cpu\u4e0a\u8fd0\u884c\u3002 2.\u5e76\u884c\u662f\u6307\u4efb\u610f\u65f6\u523b\u70b9\u4e0a\uff0c\u6709\u591a\u4e2a\u7a0b\u5e8f\u540c\u65f6\u8fd0\u884c\u5728\u591a\u4e2acpu\u4e0a\u3002 3\u3001IO\u591a\u8def\u590d\u7528\u2014\u2014select\u3001pool\u3001epool\u3002","title":"\u91cd\u8981\u6982\u5ff5"},{"location":"python\u8fdb\u9636/asyncio2/#selecthtml","text":"\u975e\u963b\u585eio\u5b8c\u6210http\u8bf7\u6c42\uff1a\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u63d0\u5347\u5e76\u53d1\u6548\u7387 import time import socket from urllib.parse import urlparse # \u4f7f\u7528\u975e\u963b\u585eio\u5b8c\u6210http\u8bf7\u6c42 def get_url(url): # \u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u975e\u963b\u585eio client.setblocking(False) try: client.connect((host, 80)) # \u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu except BlockingIOError as e: pass # \u4e0d\u505c\u7684\u8be2\u95ee\u8fde\u63a5\u662f\u5426\u5efa\u7acb\u597d\uff0c \u9700\u8981while\u5faa\u73af\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u72b6\u6001 # \u505a\u8ba1\u7b97\u4efb\u52a1\u6216\u8005\u518d\u6b21\u53d1\u8d77\u5176\u4ed6\u7684\u8fde\u63a5\u8bf7\u6c42 while True: try: client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) break except OSError as e: pass data = b\"\" while True: try: d = client.recv(1024) except BlockingIOError as e: continue if d: data += d else: break data = data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) client.close() if __name__ == \"__main__\": get_url(\"http://www.baidu.com\") select+\u56de\u8c03+\u4e8b\u4ef6\u5faa\u73af\u5b8c\u6210http\u8bf7\u6c42\u2014\u2014\u5e76\u53d1\u6027\u597d\u3001\u4f7f\u7528\u7684\u662f\u5355\u7ebf\u7a0b 1\u3001epoll\u5e76\u4e0d\u4ee3\u8868\u4e00\u5b9a\u6bd4select\u597d\uff1a \u5728\u5e76\u53d1\u9ad8\u7684\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u6d3b\u8dc3\u5ea6\u4e0d\u662f\u5f88\u9ad8\uff0c epoll\u6bd4select\u597d\u3002 \u5e76\u53d1\u6027\u4e0d\u9ad8\uff0c\u540c\u65f6\u8fde\u63a5\u5f88\u6d3b\u8dc3\uff0c select\u6bd4epoll\u597d\u3002 2\u3001\u56de\u8c03+\u4e8b\u4ef6\u5faa\u73af+select(poll\\epoll)\u7684\u6a21\u5f0f\uff1a tornado gevent \u534f\u7a0b/asyncio 3\u3001\u5177\u4f53\u5b9e\u73b0\uff1a import socket from urllib.parse import urlparse # selectors\u5185\u90e8\u4f7f\u7528select\uff0c\u5b9e\u9645\u4f7f\u7528\u8fd9\u4e2a from selectors import DefaultSelector, EVENT_READ, EVENT_WRITE # \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5168\u5c40\u7684selector selector = DefaultSelector() urls = [] stop = False # \u4f7f\u7528\u7c7b\u5b8c\u6210 \u2014\u2014 \u56de\u8c03\u9700\u8981\u7528\u5230\u5df2\u7ecf\u5efa\u7acb\u597d\u7684\u94fe\u63a5 class Fetcher: def connected(self, key): selector.unregister(key.fd) # \u8fd9\u91cc\u4f7f\u7528\u4e86\u4e8b\u4ef6\u76d1\u542c\uff0c\u4e0d\u7528\u4f7f\u7528while\u5faa\u73af\u8f6e\u8bad\uff08\u4e0d\u9700\u8981\u7528try\u6355\u83b7\u5f02\u5e38\uff09 # path\u4e0ehost\u90fd\u9700\u8981\u8bbe\u7f6e\u6210\u5bf9\u8c61\u7684\u5c5e\u6027 self.client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(self.path, self.host).encode(\"utf8\")) # \u63a5\u6536\u6570\u636e\u53c8\u9700\u8981\u76d1\u542csocket\u2014\u2014\u662f\u5426\u662f\u53ef\u8bfb\u7684\u72b6\u6001 selector.register(self.client.fileno(), EVENT_READ, self.readable) # \u53d8\u5f97\u53ef\u8bfb\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u81ea\u5df1\u53bb\u8c03\u7528\u5b83\u7684\u4ee3\u7801 def readable(self, key): d = self.client.recv(1024) if d: self.data += d # \u6570\u636e\u5df2\u7ecf\u8bfb\u5b8c\u4e86 else: selector.unregister(key.fd) data = self.data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) self.client.close() # windows\u9ed8\u8ba4\u4f7f\u7528select\u4f1a\u629b\u5f02\u5e38\uff0clinux\u9ed8\u8ba4\u4f7f\u7528epoll\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898 # \u4e0b\u9762\u7684\u4ee3\u7801\u662f\u5728windows\u4e2d\u7684\u5fc5\u8981\u8bbe\u7f6e urls.remove(self.spider_url) if not urls: # \u5fc5\u987b\u4fee\u6539\u5168\u5c40\u7684\u53d8\u91cf global stop stop = True def get_url(self, url): self.spider_url = url url = urlparse(url) self.host = url.netloc self.path = url.path self.data = b\"\" if self.path == \"\": self.path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.client.setblocking(False) try: self.client.connect((self.host, 80)) # \u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu except BlockingIOError as e: pass # \u6ce8\u610f\u5fc5\u987b\u6ce8\u518c\uff01 # \u56de\u8c03\u4f7f\u7528\u5df2\u7ecf\u5efa\u7acb\u597d\u7684\u94fe\u63a5 \u2014\u2014 \u6ce8\u610fconnected\u4e0d\u8981\u52a0\u62ec\u53f7\uff01\u5199\u51fd\u6570\u7684\u540d\u79f0\uff01 selector.register(self.client.fileno(), EVENT_WRITE, self.connected) # \u81ea\u5df1\u8c03\u7528select\uff0c\u53bb\u4e0d\u505c\u7684\u5224\u65ad\u54ea\u4e00\u4e2asocket\u51c6\u5907\u597d\u4e86\u3001\u5b83\u662f\u53ef\u8bfb\u8fd8\u662f\u53ef\u5199 # \u5982\u679c\u5b83\u662f\u53ef\u8bfb\u6216\u8005\u53ef\u5199\u6211\u4eec\u9700\u8981\u8c03\u7528\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570 \u2014\u2014 \u6ce8\u610f\u8fd9\u4e2a\u56de\u8c03\u662f\u6211\u4eec\u81ea\u5df1\u6765\u505a\u7684 def loop(): # \u4e8b\u4ef6\u5faa\u73af\uff0c\u4e0d\u505c\u7684\u8bf7\u6c42socket\u7684\u72b6\u6001\u5e76\u8c03\u7528\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570 # 1. select\u672c\u8eab\u662f\u4e0d\u652f\u6301register\u6a21\u5f0f # 2. socket\u72b6\u6001\u53d8\u5316\u4ee5\u540e\u7684\u56de\u8c03\u662f\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u5b8c\u6210\u7684\uff0c\u800c\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u5b8c\u6210\u7684 while not stop: ready = selector.select() for key, mask in ready: call_back = key.data call_back(key) if __name__ == \"__main__\": fetcher = Fetcher() start_time = time.time() for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) urls.append(url) fetcher = Fetcher() fetcher.get_url(url) loop() print(time.time()-start_time) \u201c\u201d\u201c 0.26441121101379395 \u201d\u201c\u201d 4\u3001\u540c\u6b65\u7684\u65b9\u5f0f\u8017\u65f6\u6bd4\u4e0a\u9762\u7684\u957f\uff1a # requests -> urlib -> socket import socket from urllib.parse import urlparse def get_url(url): # \u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # client.setblocking(False) client.connect((host, 80)) #\u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu # \u4e0d\u505c\u7684\u8be2\u95ee\u8fde\u63a5\u662f\u5426\u5efa\u7acb\u597d\uff0c \u9700\u8981while\u5faa\u73af\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u72b6\u6001 # \u505a\u8ba1\u7b97\u4efb\u52a1\u6216\u8005\u518d\u6b21\u53d1\u8d77\u5176\u4ed6\u7684\u8fde\u63a5\u8bf7\u6c42 client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) data = b\"\" while True: d = client.recv(1024) if d: data += d else: break data = data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) client.close() if __name__ == \"__main__\": import time start_time = time.time() for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) get_url(url) print(time.time()-start_time) \"\"\" 0.8437938690185547 \"\"\"","title":"select+\u56de\u8c03+\u4e8b\u4ef6\u5faa\u73af\u83b7\u53d6html"},{"location":"python\u8fdb\u9636/asyncio2/#_2","text":"1\u3001\u6211\u4eec\u53bb\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\u7684\u65f6\u5019\u5fc5\u987b\u8ba9\u4e8b\u4ef6\u5faa\u73af\u9a71\u52a8\u56de\u8c03\u3002 2\u3001\u5c06\u4f20\u7edf\u7684\u4ee3\u7801\u5206\u5272\u7684\u201c\u56db\u5206\u4e94\u88c2\u201d\uff0c\u4ee3\u7801\u7ef4\u62a4\u96be\u5ea6\u9ad8\u3002 3\u3001\u4f1a\u4ea7\u751f\u7684\u95ee\u9898\uff1a 1.\u5982\u679c\u56de\u8c03\u51fd\u6570\u6267\u884c\u4e0d\u6b63\u5e38\u8be5\u5982\u4f55\u5904\u7406\uff1f 2.\u5982\u679c\u56de\u8c03\u91cc\u9762\u8fd8\u8981\u5d4c\u5957\u56de\u8c03\u600e\u4e48\u529e\uff1f\u8981\u5d4c\u5957\u5f88\u591a\u5c42\u600e\u4e48\u529e\uff1f 3.\u5982\u679c\u5d4c\u5957\u4e86\u591a\u5c42\uff0c\u5176\u4e2d\u67d0\u4e2a\u73af\u8282\u51fa\u9519\u4e86\u4f1a\u9020\u6210\u4ec0\u4e48\u540e\u679c\uff1f 4.\u5982\u679c\u6709\u4e2a\u6570\u636e\u9700\u8981\u88ab\u6bcf\u4e2a\u56de\u8c03\u90fd\u5904\u7406\u600e\u4e48\u529e\uff1f 5.\u5982\u4f55\u4f7f\u7528\u5f53\u524d\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\uff1f","title":"\u56de\u8c03\u6a21\u5f0f\u7684\u95ee\u9898"},{"location":"python\u8fdb\u9636/asyncio2/#_3","text":"1\u3001C10M\u95ee\u9898\uff1a \u5982\u4f55\u5229\u75288\u6838CPU\u300164G\u5185\u5b58\uff0c\u572810gbps\u7684\u7f51\u7edc\u4e0a\u4fdd\u63011000\u4e07\u5e76\u53d1\u8fde\u63a5\u3002 2\u3001\u56de\u8c03\u6a21\u5f0f\u4e0e\u540c\u6b65\u7f16\u7a0b\u7684\u95ee\u9898\uff1a 1\u3001\u56de\u8c03\u6a21\u5f0f\u4ee3\u7801\u590d\u6742\u5ea6\u9ad8 2\u3001\u540c\u6b65\u7f16\u7a0b\u5e76\u53d1\u6027\u4e0d\u9ad8 3\u3001\u591a\u7ebf\u7a0b\u7f16\u7a0b\u9700\u8981\u7ebf\u7a0b\u95f4\u540c\u6b65 \u2014\u2014 \u9700\u8981\u7528\u5230\u9501 \u2014\u2014 \u4f46\u662f\u9501\u4f1a\u964d\u4f4e\u6548\u7387 3\u3001\u9762\u4e34\u7684\u6311\u6218\uff1a 1\u3001\u91c7\u7528\u540c\u6b65\u7684\u65b9\u5f0f\u53bb\u7f16\u5199\u5f02\u6b65\u7684\u4ee3\u7801 2\u3001\u4f7f\u7528\u5355\u7ebf\u7a0b\u53bb\u5207\u6362\u4efb\u52a1\uff1a ->1.\u7ebf\u7a0b\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u5207\u6362\u7684\uff0c\u5355\u7ebf\u7a0b\u5207\u6362\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u7a0b\u5e8f\u5458\u81ea\u5df1\u53bb\u8c03\u5ea6\u4efb\u52a1 ->2.\u4e0d\u518d\u9700\u8981\u9501\uff0c\u5e76\u53d1\u6027\u9ad8\uff0c\u5728\u5355\u7ebf\u7a0b\u4e4b\u95f4\u5207\u6362\u51fd\u6570\uff0c\u6027\u80fd\u8fdc\u9ad8\u4e8e\u7ebf\u7a0b\u95f4\u5207\u6362\uff01 4\u3001\u4f20\u7edf\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b def get_html(url): pass def parse_url(url): pass def get_url1(url): #do someting 1 html = get_html(url) #\u6b64\u5904\u6682\u505c\uff0c\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u51fd\u6570\u53bb\u6267\u884c # #parse html urls = parse_url(html) def get_url2(url): # do someting 1 html = get_html(url) #\u6b64\u5904\u6682\u505c\uff0c\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u51fd\u6570\u53bb\u6267\u884c # #parse html urls = parse_url(html) # \u4f20\u7edf\u51fd\u6570\u8c03\u7528 \u8fc7\u7a0b A->B->C 5\u3001\u65b0\u7684\u9700\u6c42\u53ca\u534f\u7a0b\u7684\u51fa\u73b0\uff1a 1.\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u6682\u505c\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u9002\u5f53\u7684\u65f6\u5019\u6062\u590d\u8be5\u51fd\u6570\u7684\u7ee7\u7eed\u6267\u884c 2.\u51fa\u73b0\u4e86\u534f\u7a0b -> \u6709\u591a\u4e2a\u5165\u53e3\u7684\u51fd\u6570\uff0c \u53ef\u4ee5\u6682\u505c\u7684\u51fd\u6570\uff0c \u53ef\u4ee5\u6682\u505c\u7684\u51fd\u6570(\u53ef\u4ee5\u5411\u6682\u505c\u7684\u5730\u65b9\u4f20\u5165\u503c)","title":"\u534f\u7a0b\u4ecb\u7ecd"},{"location":"python\u8fdb\u9636/asyncio2/#sendclosethrow","text":"1\u3001send\u65b9\u6cd5 \u751f\u6210\u5668\u4e0d\u53ea\u53ef\u4ee5\u4ea7\u51fa\u503c\uff0c\u8fd8\u53ef\u4ee5\u63a5\u6536\u503c\u3002 send\u65b9\u6cd5\u53ef\u4ee5\u4f20\u9012\u503c\u8fdb\u5165\u751f\u6210\u5668\u5185\u90e8\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u91cd\u542f\u751f\u6210\u5668\u6267\u884c\u5230\u4e0b\u4e00\u4e2ayield\u4f4d\u7f6e\u3002 \u6709\u4e86send\u65b9\u6cd5\u5c06\u503c\u4f20\u9012\u7ed9\u751f\u6210\u5668\u5185\u90e8\uff0c\u624d\u53ef\u4ee5\u4f7f\u7528\u751f\u6210\u5668\u5b9e\u73b0\u534f\u7a0b\uff01 \u5728\u8c03\u7528send\u53d1\u9001\u975enone\u503c\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u542f\u52a8\u4e00\u6b21\u751f\u6210\u5668\uff01\u542f\u52a8\u751f\u6210\u5668\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a gen.send(None) \u4e0e next(gen) \u3002 1. gen.send(None) 2. next(gen) send\u7684\u6848\u4f8b\uff1a def gen_func(): # \u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u7684\u4f5c\u7528\u67092\u4e2a\uff1a # 1. \u53ef\u4ee5\u4ea7\u51fa\u503c\uff0c 2. \u53ef\u4ee5\u63a5\u6536\u503c(\u8c03\u7528\u65b9\u4f20\u9012\u8fdb\u6765\u7684\u503c) \u2014\u2014 \u4f20\u9012\u7ed9\u751f\u6210\u5668\u5185\u90e8 html = yield \"http://projectsedu.com\" print(\"html>>>>>\",html) yield 111 yield 222 return \"whw\" if __name__ == \"__main__\": gen = gen_func() # \u5728\u8c03\u7528send\u53d1\u9001\u975enone\u503c\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u542f\u52a8\u4e00\u6b21\u751f\u6210\u5668 # \u542f\u52a8\u751f\u6210\u5668\u65b9\u5f0f\u6709\u4e24\u79cd\uff0cgen.send(None) \u4e0e next(gen) # 1. gen.send(None); 2. next(gen) # \u5728\u7b2c\u4e00\u6b21send\u65f6\uff0c\u5fc5\u987bsend\u4e00\u4e2aNone\uff01\uff01\uff01\uff5e\uff5e\uff5e\uff5e\uff5e\uff5e\uff5e\uff5e url = gen.send(None) # download url html = \"whw\" # send\u65b9\u6cd5\u53ef\u4ee5\u4f20\u9012\u503c\u8fdb\u5165\u751f\u6210\u5668\u5185\u90e8\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u91cd\u542f\u751f\u6210\u5668\u6267\u884c\u5230\u4e0b\u4e00\u4e2ayield\u4f4d\u7f6e print(gen.send(html)) print(gen.send(html)) \"\"\" html>>>>> whw 111 222 \"\"\" 2\u3001close\u65b9\u6cd5 \u505c\u6b62\u2014\u2014\u5982\u679c\u540e\u9762\u8fd8\u4f7f\u7528next\u65b9\u6cd5\u7684\u8bdd\u4f1a\u62a5 StopIteration \u5f02\u5e38\u3002 close\u65b9\u6cd5\u4e4b\u540e\u8fd8\u6709yield\u7684\u8bdd\u4f1a\u629b\u5f02\u5e38\uff1a GeneratorExit \u3002 def gen_func(): # 1. \u53ef\u4ee5\u4ea7\u51fa\u503c\uff0c 2. \u53ef\u4ee5\u63a5\u6536\u503c(\u8c03\u7528\u65b9\u4f20\u9012\u8fdb\u6765\u7684\u503c) try: yield \"http://projectsedu.com\" except Exception: import traceback print(traceback.format_exc()) yield 2 yield 3 return \"whw\" if __name__ == \"__main__\": gen = gen_func() print(next(gen)) # close gen.close() print(next(gen)) print(\"whw\") # \u4e0d\u4f1a\u6267\u884c # GeneratorExit\u662f\u7ee7\u627f\u81eaBaseException\uff0c Exception 3\u3001throw\u65b9\u6cd5 \u4e0e\u5f02\u5e38\u5904\u7406\u6709\u5173\u3002 def gen_func(): #1. \u53ef\u4ee5\u4ea7\u51fa\u503c\uff0c 2. \u53ef\u4ee5\u63a5\u6536\u503c(\u8c03\u7528\u65b9\u4f20\u9012\u8fdb\u6765\u7684\u503c) try: yield \"http://projectsedu.com\" except Exception as e: import traceback print(traceback.format_exc()) yield 2 yield 3 return \"whw\" if __name__ == \"__main__\": gen = gen_func() print(next(gen)) # \u662f\u524d\u4e00\u4e2ayield\u5bf9\u5e94\u7684\u5f02\u5e38\uff01 gen.throw(Exception, \"download error\") print(next(gen)) gen.throw(Exception, \"download error\")","title":"\u751f\u6210\u5668\u8fdb\u9636\u53casend/close/throw\u65b9\u6cd5"},{"location":"python\u8fdb\u9636/asyncio2/#yield-from","text":"yield from\u662fpython3.3\u65b0\u52a0\u7684\u8bed\u6cd5\u3002 itertools.chain \u5c06\u51e0\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u653e\u5728\u4e00\u8d77\u904d\u5386\u3002 from itertools import chain my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } for value in chain(my_list,my_dict,range(1,5)): print(value) \"\"\" 1 2 3 html1 html2 1 2 3 4 \"\"\" \u4f7f\u7528yield\u5b9e\u73b0itertools.chain\u7684\u529f\u80fd my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } # \u81ea\u5df1\u662f\u5fc3\u554a\u4e00\u4e2achain\u6548\u679c\u7684\u51fd\u6570 def my_chain(*args, **kwargs): for my_iterable in args: # yield from my_iterable for value in my_iterable: yield value for value in my_chain(my_list, my_dict, range(5,7)): print(value) \"\"\" 1 2 3 html1 html2 5 6 \"\"\" \u4f7f\u7528yield from\u5b9e\u73b0itertools.chain\u7684\u529f\u80fd my_list = [1,2,3] my_dict = { \"html1\":\"http://projectsedu.com\", \"html2\":\"http://www.imooc.com\", } def my_chain(*args, **kwargs): for my_iterable in args: yield from my_iterable for value in my_chain(my_list, my_dict, range(5,7)): print(value) \"\"\" 1 2 3 html1 html2 5 6 \"\"\" yield\u8bed\u6cd5\u4e0eyield from\u8bed\u6cd5\u7684\u533a\u522b yield\u540e\u9762\u8ddf\u4ec0\u4e48\u5c31\u8fd4\u56de\u4ec0\u4e48\uff1byield from\u540e\u9762\u8ddf\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u503c\u8fd4\u56de\u53bb\u3002 def g1(iterable): # yield\u540e\u9762\u8ddf\u4ec0\u4e48\u5c31\u8fd4\u56de\u4ec0\u4e48 yield iterable def g2(iterable): # yield from\u540e\u9762\u8ddf\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u503c\u8fd4\u56de\u53bb\u3002 yield from iterable for v in g1(range(3)): print(v) print(\"==================\") for v in g2(range(3)): print(v) \"\"\" range(0, 3) ================== 0 1 2 \"\"\" yield from\u4f1a\u5728\u8c03\u7528\u65b9\u4e0e\u5b50\u751f\u6210\u5668\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u53cc\u5411\u901a\u9053 \"\"\" # 1. main\uff1a\u8c03\u7528\u65b9\uff1bg1\uff1a\u59d4\u6258\u751f\u6210\u5668\uff1bgen\uff1a\u5b50\u751f\u6210\u5668 # 2. yield from\u4f1a\u5728\u8c03\u7528\u65b9\u4e0e\u5b50\u751f\u6210\u5668\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u53cc\u5411\u901a\u9053 # \u6b64\u65f6\u5b50\u751f\u6210\u5668gen\u4e0e\u4e3b\u8c03\u7528\u65b9main\u5c31\u5efa\u7acb\u8d77\u4e86\u8054\u7cfb\u4e86 \"\"\" # gen\uff1a\u5b50\u751f\u6210\u5668 def g1(gen): yield from gen # g1\uff1a\u59d4\u6258\u751f\u6210\u5668 def main(): g = g1() g.send(None) \u8c03\u7528\u65b9+\u59d4\u6258\u751f\u6210\u5668+\u5b50\u751f\u6210\u5668\u7684\u4f7f\u7528\uff1a\u6784\u5efa\u9500\u91cf\u5b57\u5178 final_result = {} # \u5b50\u751f\u6210\u5668 \u2014\u2014 \u63a5\u6536\u5916\u9762\u4f20\u6765\u7684\u503c\u5e76\u505a\u4fdd\u5b58 def sales_sum(pro_name): total = 0 nums = [] while True: x = yield print(pro_name+\"\u9500\u91cf: \", x) # \u5916\u9762\u4f20\u8fdb\u6765\u7684\u503c\u4e3aNone\u7ed3\u675f if not x: break total += x nums.append(x) return total, nums # \u59d4\u6258\u751f\u6210\u5668 \u2014\u2014 \u5c06\u6bcf\u4e00\u884c\u6570\u636e\u8fdb\u884c\u7edf\u8ba1 def middle(key): while True: # yield from\u8c03\u7528\u5b50\u751f\u6210\u5668 final_result[key] = yield from sales_sum(key) print(key+\"\u9500\u91cf\u7edf\u8ba1\u5b8c\u6210\uff01\uff01.\") # \u8c03\u7528\u65b9 def main(): data_sets = { \"\u9762\u819c\": [1200,1500], \"\u98de\u673a\": [28,55,98,108], \"\u676f\u5b50\": [280,560,778,70], } for key, data_set in data_sets.items(): print(\"start key:\", key) m = middle(key) # \u9884\u6fc0middle\u534f\u7a0b m.send(None) for value in data_set: m.send(value) # \u7ed9\u534f\u7a0b\u4f20\u9012\u6bcf\u4e00\u7ec4\u7684\u503c m.send(None) print(\"final_result:\", final_result) if __name__ == '__main__': main() \"\"\" start key: \u9762\u819c \u9762\u819c\u9500\u91cf: 1200 \u9762\u819c\u9500\u91cf: 1500 \u9762\u819c\u9500\u91cf: None \u9762\u819c\u9500\u91cf\u7edf\u8ba1\u5b8c\u6210\uff01\uff01. start key: \u98de\u673a \u98de\u673a\u9500\u91cf: 28 \u98de\u673a\u9500\u91cf: 55 \u98de\u673a\u9500\u91cf: 98 \u98de\u673a\u9500\u91cf: 108 \u98de\u673a\u9500\u91cf: None \u98de\u673a\u9500\u91cf\u7edf\u8ba1\u5b8c\u6210\uff01\uff01. start key: \u676f\u5b50 \u676f\u5b50\u9500\u91cf: 280 \u676f\u5b50\u9500\u91cf: 560 \u676f\u5b50\u9500\u91cf: 778 \u676f\u5b50\u9500\u91cf: 70 \u676f\u5b50\u9500\u91cf: None \u676f\u5b50\u9500\u91cf\u7edf\u8ba1\u5b8c\u6210\uff01\uff01. final_result: {'\u9762\u819c': (2700, [1200, 1500]), '\u98de\u673a': (289, [28, 55, 98, 108]), '\u676f\u5b50': (1688, [280, 560, 778, 70])} \"\"\" \u5b50\u751f\u6210\u5668\u5206\u6790\uff1ayield from\u7684\u5f3a\u5927\u4e4b\u5904 \u5355\u72ec\u4f7f\u7528\u5b50\u751f\u6210\u5668\u7684\u8bdd\u8fd8\u5f97\u6355\u83b7\u5f02\u5e38\uff01\u5728\u59d4\u6258\u751f\u6210\u5668\u4e2d\u4f7f\u7528yield from\u7684\u8bdd\u4e0d\u7528\u8003\u8651\u8fd9\u4e00\u70b9\u3002 def sales_sum(pro_name): total = 0 nums = [] while True: x = yield print(pro_name+\"\u9500\u91cf: \", x) if not x: break total += x nums.append(x) return total, nums if __name__ == \"__main__\": my_gen = sales_sum(\"\u98de\u673a\") # send\u7684\u7b2c\u4e00\u4e2a\u503c\u5fc5\u987b\u662fNone\uff01\uff01\uff01 my_gen.send(None) my_gen.send(1200) my_gen.send(1500) my_gen.send(3000) try: my_gen.send(None) except StopIteration as e: result = e.value print(result) \"\"\" \u98de\u673a\u9500\u91cf: 1200 \u98de\u673a\u9500\u91cf: 1500 \u98de\u673a\u9500\u91cf: 3000 \u98de\u673a\u9500\u91cf: None (5700, [1200, 1500, 3000]) \"\"\" yield from\u7684\u539f\u7406\u8bf4\u660e\uff08pep380\u6587\u6863\uff09 # pep380 #1. RESULT = yield from EXPR\u53ef\u4ee5\u7b80\u5316\u6210\u4e0b\u9762\u8fd9\u6837 #\u4e00\u4e9b\u8bf4\u660e \"\"\" _i\uff1a\u5b50\u751f\u6210\u5668\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668 _y\uff1a\u5b50\u751f\u6210\u5668\u751f\u4ea7\u7684\u503c _r\uff1ayield from \u8868\u8fbe\u5f0f\u6700\u7ec8\u7684\u503c _s\uff1a\u8c03\u7528\u65b9\u901a\u8fc7send()\u53d1\u9001\u7684\u503c _e\uff1a\u5f02\u5e38\u5bf9\u8c61 \"\"\" _i = iter(EXPR) # EXPR\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c_i\u5176\u5b9e\u662f\u5b50\u751f\u6210\u5668\uff1b try: _y = next(_i) # \u9884\u6fc0\u5b50\u751f\u6210\u5668\uff0c\u628a\u4ea7\u51fa\u7684\u7b2c\u4e00\u4e2a\u503c\u5b58\u5728_y\u4e2d\uff1b except StopIteration as _e: _r = _e.value # \u5982\u679c\u629b\u51fa\u4e86`StopIteration`\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u5c06\u5f02\u5e38\u5bf9\u8c61\u7684`value`\u5c5e\u6027\u4fdd\u5b58\u5230_r\uff0c\u8fd9\u662f\u6700\u7b80\u5355\u7684\u60c5\u51b5\u7684\u8fd4\u56de\u503c\uff1b else: while 1: # \u5c1d\u8bd5\u6267\u884c\u8fd9\u4e2a\u5faa\u73af\uff0c\u59d4\u6258\u751f\u6210\u5668\u4f1a\u963b\u585e\uff1b _s = yield _y # \u751f\u4ea7\u5b50\u751f\u6210\u5668\u7684\u503c\uff0c\u7b49\u5f85\u8c03\u7528\u65b9`send()`\u503c\uff0c\u53d1\u9001\u8fc7\u6765\u7684\u503c\u5c06\u4fdd\u5b58\u5728_s\u4e2d\uff1b try: _y = _i.send(_s) # \u8f6c\u53d1_s\uff0c\u5e76\u4e14\u5c1d\u8bd5\u5411\u4e0b\u6267\u884c\uff1b except StopIteration as _e: _r = _e.value # \u5982\u679c\u5b50\u751f\u6210\u5668\u629b\u51fa\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u83b7\u53d6\u5f02\u5e38\u5bf9\u8c61\u7684`value`\u5c5e\u6027\u5b58\u5230_r\uff0c\u9000\u51fa\u5faa\u73af\uff0c\u6062\u590d\u59d4\u6258\u751f\u6210\u5668\u7684\u8fd0\u884c\uff1b break RESULT = _r # _r\u5c31\u662f\u6574\u4e2ayield from\u8868\u8fbe\u5f0f\u8fd4\u56de\u7684\u503c\u3002 \"\"\" 1. \u5b50\u751f\u6210\u5668\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5e76\u4e0d\u662f\u4e00\u4e2a\u4f5c\u4e3a\u534f\u7a0b\u7684\u751f\u6210\u5668\uff0c\u6240\u4ee5\u5b83\u4e0d\u652f\u6301.throw()\u548c.close()\u65b9\u6cd5\uff1b 2. \u5982\u679c\u5b50\u751f\u6210\u5668\u652f\u6301.throw()\u548c.close()\u65b9\u6cd5\uff0c\u4f46\u662f\u5728\u5b50\u751f\u6210\u5668\u5185\u90e8\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff1b 3. \u8c03\u7528\u65b9\u8ba9\u5b50\u751f\u6210\u5668\u81ea\u5df1\u629b\u51fa\u5f02\u5e38 4. \u5f53\u8c03\u7528\u65b9\u4f7f\u7528next()\u6216\u8005.send(None)\u65f6\uff0c\u90fd\u8981\u5728\u5b50\u751f\u6210\u5668\u4e0a\u8c03\u7528next()\u51fd\u6570\uff0c\u5f53\u8c03\u7528\u65b9\u4f7f\u7528.send()\u53d1\u9001\u975e None \u503c\u65f6\uff0c\u624d\u8c03\u7528\u5b50\u751f\u6210\u5668\u7684.send()\u65b9\u6cd5\uff1b \"\"\" _i = iter(EXPR) try: _y = next(_i) except StopIteration as _e: _r = _e.value else: while 1: try: _s = yield _y except GeneratorExit as _e: try: _m = _i.close except AttributeError: pass else: _m() raise _e except BaseException as _e: _x = sys.exc_info() try: _m = _i.throw except AttributeError: raise _e else: try: _y = _m(*_x) except StopIteration as _e: _r = _e.value break else: try: if _s is None: _y = next(_i) else: _y = _i.send(_s) except StopIteration as _e: _r = _e.value break RESULT = _r \"\"\" \u770b\u5b8c\u4ee3\u7801\uff0c\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u5173\u952e\u70b9\uff1a 1. \u5b50\u751f\u6210\u5668\u751f\u4ea7\u7684\u503c\uff0c\u90fd\u662f\u76f4\u63a5\u4f20\u7ed9\u8c03\u7528\u65b9\u7684\uff1b\u8c03\u7528\u65b9\u901a\u8fc7.send()\u53d1\u9001\u7684\u503c\u90fd\u662f\u76f4\u63a5\u4f20\u9012\u7ed9\u5b50\u751f\u6210\u5668\u7684\uff1b\u5982\u679c\u53d1\u9001\u7684\u662f None\uff0c\u4f1a\u8c03\u7528\u5b50\u751f\u6210\u5668\u7684__next__()\u65b9\u6cd5\uff0c\u5982\u679c\u4e0d\u662f None\uff0c\u4f1a\u8c03\u7528\u5b50\u751f\u6210\u5668\u7684.send()\u65b9\u6cd5\uff1b 2. \u5b50\u751f\u6210\u5668\u9000\u51fa\u7684\u65f6\u5019\uff0c\u6700\u540e\u7684return EXPR\uff0c\u4f1a\u89e6\u53d1\u4e00\u4e2aStopIteration(EXPR)\u5f02\u5e38\uff1b 3. yield from\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u662f\u5b50\u751f\u6210\u5668\u7ec8\u6b62\u65f6\uff0c\u4f20\u9012\u7ed9StopIteration\u5f02\u5e38\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff1b 4. \u5982\u679c\u8c03\u7528\u7684\u65f6\u5019\u51fa\u73b0StopIteration\u5f02\u5e38\uff0c\u59d4\u6258\u751f\u6210\u5668\u4f1a\u6062\u590d\u8fd0\u884c\uff0c\u540c\u65f6\u5176\u4ed6\u7684\u5f02\u5e38\u4f1a\u5411\u4e0a \"\u5192\u6ce1\"\uff1b 5. \u4f20\u5165\u59d4\u6258\u751f\u6210\u5668\u7684\u5f02\u5e38\u91cc\uff0c\u9664\u4e86GeneratorExit\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6240\u6709\u5f02\u5e38\u5168\u90e8\u4f20\u9012\u7ed9\u5b50\u751f\u6210\u5668\u7684.throw()\u65b9\u6cd5\uff1b\u5982\u679c\u8c03\u7528.throw()\u7684\u65f6\u5019\u51fa\u73b0\u4e86StopIteration\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u6062\u590d\u59d4\u6258\u751f\u6210\u5668\u7684\u8fd0\u884c\uff0c\u5176\u4ed6\u7684\u5f02\u5e38\u5168\u90e8\u5411\u4e0a \"\u5192\u6ce1\"\uff1b 6. \u5982\u679c\u5728\u59d4\u6258\u751f\u6210\u5668\u4e0a\u8c03\u7528.close()\u6216\u4f20\u5165GeneratorExit\u5f02\u5e38\uff0c\u4f1a\u8c03\u7528\u5b50\u751f\u6210\u5668\u7684.close()\u65b9\u6cd5\uff0c\u6ca1\u6709\u7684\u8bdd\u5c31\u4e0d\u8c03\u7528\u3002\u5982\u679c\u5728\u8c03\u7528.close()\u7684\u65f6\u5019\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u90a3\u4e48\u5c31\u5411\u4e0a \"\u5192\u6ce1\"\uff0c\u5426\u5219\u7684\u8bdd\u59d4\u6258\u751f\u6210\u5668\u4f1a\u629b\u51faGeneratorExit\u5f02\u5e38\u3002 \"\"\"","title":"yield from\u8bed\u6cd5"},{"location":"python\u8fdb\u9636/asyncio2/#pythonasyncawait","text":"python3.5\u4e3a\u4e86\u5c06\u8bed\u4e49\u53d8\u5f97\u66f4\u52a0\u660e\u786e\uff0c\u5c31\u5f15\u5165\u4e86async\u548cawait\u5173\u952e\u8bcd\u7528\u4e8e\u5b9a\u4e49\u539f\u751f\u7684\u534f\u7a0b\u3002 \u6ce8\u610f\uff1aasync\u4e2d\u4e0d\u80fd\u6709yield\u3002 \"\"\" types.coroutine\u88c5\u9970\u7684\u51fd\u6570\u53ef\u4ee5\u653e\u5728await\u540e\u9762 \"\"\" # import types # @types.coroutine # def downloader(url): # yield \"whw\" from collections import Awaitable async def downloader(url): return \"whw\" async def download_url(url): # dosomethings # await\u540e\u9762\u53ea\u80fd\u63a5\u6536Awaitable\u5bf9\u8c61 html = await downloader(url) return html if __name__ == \"__main__\": coro = download_url(\"http://www.imooc.com\") # \u539f\u751f\u534f\u7a0b\u4e0d\u80fd\u4f7f\u7528next\u8c03\u7528\uff01\u987b\u4f7f\u7528send\u8c03\u7528\uff01 # next(None) coro.send(None)","title":"Python\u4e2d\u7684\u539f\u751f\u534f\u7a0b:async\u4e0eawait"},{"location":"python\u8fdb\u9636/asyncio2/#_4","text":"# -*- coding:utf-8 -*- import time def consumer(): # consumer\u4f5c\u4e3a\u4e00\u4e2a\u751f\u6210\u5668 while 1: data = yield def producer(): # \u751f\u6210\u5668\u5bf9\u8c61 g = consumer() # \u5148next\u540e\u9762\u624d\u80fdsend\u5177\u4f53\u7684\u975eNone\u7684\u503c,\u76f8\u5f53\u4e8e\u5148send\u4e00\u4e2aNone next(g) for i in range(1000000): g.send(i) if __name__ == '__main__': start = time.time() #\u5e76\u53d1\u6267\u884c,\u4f46\u662f\u4efb\u52a1producer\u9047\u5230io\u5c31\u4f1a\u963b\u585e\u4f4f,\u5e76\u4e0d\u4f1a\u5207\u5230\u8be5\u7ebf\u7a0b\u5185\u7684\u5176\u4ed6\u4efb\u52a1\u53bb\u6267\u884c producer() print('\u6267\u884c\u65f6\u95f4\uff1a',time.time() - start)","title":"\u751f\u6210\u5668\u5b9e\u73b0\u534f\u7a0b\u7684\u4e00\u4e2a\u4f8b\u5b50"},{"location":"python\u8fdb\u9636/asyncio3/","text":"asyncio\u4ecb\u7ecd 1\u3001\u5305\u542b\u5404\u79cd\u7279\u5b9a\u7cfb\u7edf\u5b9e\u73b0\u7684\u6a21\u5757\u5316\u4e8b\u4ef6\u5faa\u73af\u3002 2\u3001\u4f20\u8f93\u548c\u62bd\u8c61\u534f\u8bae\u3002 3\u3001\u5bf9TCP\u3001UDP\u3001SSL\u3001\u5b50\u8fdb\u7a0b\u3001\u5ef6\u65f6\u8c03\u7528\u4ee5\u53ca\u5176\u4ed6\u7684\u5177\u4f53\u652f\u6301\u3002 4\u3001\u6a21\u4efffutures\u6a21\u5757\u4f46\u9002\u7528\u4e8e\u4e8b\u4ef6\u5faa\u73af\u4f7f\u7528\u7684Future\u7c7b\u3002 5\u3001\u57fa\u4e8eyield from\u7684\u534f\u8bae\u548c\u4efb\u52a1\uff0c\u53ef\u4ee5\u8ba9\u4f60\u7528\u987a\u5e8f\u7684\u65b9\u5f0f\u7f16\u5199\u5e76\u53d1\u4ee3\u7801\u3002 6\u3001\u5f53\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u4e00\u4e2a\u5c06\u4ea7\u751f\u963b\u585eIO\u7684\u8c03\u7528\u65f6\uff0c\u6709\u63a5\u53e3\u53ef\u4ee5\u628a\u8fd9\u4e2a\u4e8b\u4ef6\u8f6c\u79fb\u5230\u7ebf\u7a0b\u6c60\u3002 7\u3001\u6a21\u4effthreading\u6a21\u5757\u4e2d\u7684\u540c\u6b65\u539f\u8bed\u3001\u53ef\u4ee5\u7528\u5728\u5355\u7ebf\u7a0b\u5185\u7684\u534f\u7a0b\u4e4b\u95f4\u3002 \u4e8b\u4ef6\u5faa\u73af 1\u3001\u9ad8\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u4e09\u4e2a\u8981\u7d20 \u4e8b\u4ef6\u5faa\u73af \u56de\u8c03(\u9a71\u52a8\u751f\u6210\u5668) epoll(IO\u591a\u8def\u590d\u7528) 2\u3001asyncio asyncio\u662fpython\u7528\u4e8e\u89e3\u51b3\u5f02\u6b65io\u7f16\u7a0b\u7684\u4e00\u6574\u5957\u89e3\u51b3\u65b9\u6848\uff1a tornado\u3001gevent\u3001twisted\uff08scrapy\uff0c django channels\uff09 3\u3001tornado torando\u81ea\u5df1\u5b9e\u73b0\u4e86\u5b9e\u73b0web\u670d\u52a1\u5668\uff01 django+flask\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684web\u670d\u52a1\u5668\uff1a(uwsgi, gunicorn+nginx) tornado\u53ef\u4ee5\u76f4\u63a5\u90e8\u7f72\uff1a nginx+tornado\uff08nginx\u5b9e\u73b0\u4e86\u4e00\u4e9btornado\u6ca1\u6709\u5b9e\u73b0\u7684\u529f\u80fd\uff09 \u4f7f\u7528asyncio # \u4f7f\u7528asyncio import asyncio import time async def get_html(url): print(\"start get url\") # \u540c\u6b65\u7684time.sleep\u4e0d\u80fd\u4f7f\u7528\u5728\u534f\u7a0b\u4e2d\uff01\u5f97\u4f7f\u7528\u81ea\u5df1\u7684\uff01 # \u8fd9\u662f\u4e00\u4e2a\u8017\u65f6\u7684\u64cd\u4f5c\uff1a\u5f97\u52a0\u4e0aawait await asyncio.sleep(2) print(\"end get url\") if __name__ == \"__main__\": start_time = time.time() # \u81ea\u5df1\u5b8c\u6210select\u7684\u64cd\u4f5c loop = asyncio.get_event_loop() tasks = [get_html(\"http://www.imooc.com\") for i in range(10)] # \u76f4\u63a5\u5c06\u4efb\u52a1\u4f20\u8fdb\u53bb \"\"\" \u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u7684\u662fasyncio.wait \"\"\" loop.run_until_complete(asyncio.wait(tasks)) print(time.time()-start_time) \u83b7\u53d6\u534f\u7a0b\u7684\u8fd4\u56de\u503c \u65b9\u6cd51 # \u83b7\u53d6\u534f\u7a0b\u7684\u8fd4\u56de\u503c import asyncio import time from functools import partial async def get_html(url): print(\"start get url\") await asyncio.sleep(2) return \"whw\" \"\"\" \u4f7f\u7528paratial\u7684\u8bdd\uff0c\u4f20\u7684\u53c2\u6570\u5fc5\u987b\u653e\u5728\u524d\u8fb9\uff01\"\"\" def callback(url, future): print(url) print(\"send email to whw\") if __name__ == \"__main__\": start_time = time.time() # \u4e00\u4e2a\u7ebf\u7a0b\u53ea\u6709\u4e00\u4e2aloop loop = asyncio.get_event_loop() # \u4f7f\u7528loop.create_task\u65b9\u6cd5 task = loop.create_task(get_html(\"http://www.imooc.com\")) # \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2acallback\uff01\uff01\uff01 # \u6ce8\u610f\u53ea\u4f20\u51fd\u6570\u540d # \u4f7f\u7528partial\u5305\u88c5callback\uff01\u8fd9\u6837callback\u53ef\u4ee5\u52a0\u53c2\u6570\u4e86\uff01partical\u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e2a\u51fd\u6570\u7684\u5730\u5740 task.add_done_callback(partial(callback, \"http://www.imooc.com\")) loop.run_until_complete(task) print(task.result()) \"\"\" start get url http://www.imooc.com send email to whw whw \"\"\" \u65b9\u6cd52 # \u83b7\u53d6\u534f\u7a0b\u7684\u8fd4\u56de\u503c import asyncio import time from functools import partial async def get_html(url): print(\"start get url\") await asyncio.sleep(2) return \"whw\" def callback(url, future): print(url) print(\"send email to whw\") if __name__ == \"__main__\": start_time = time.time() loop = asyncio.get_event_loop() # \u8c03\u7528asyncio.ensure_future \u2014\u2014 \u5b9e\u9645\u4e2d\u8fd4\u56de\u7684\u4e5f\u662ftask\u7c7b\u578b get_future = asyncio.ensure_future(get_html(\"http://www.imooc.com\")) loop.run_until_complete(get_future) print(get_future.result()) # whw \"\"\" start get url whw \"\"\" wait\u4e0egather gather\u66f4\u52a0\u9ad8\u7ea7\uff0c\u4f7f\u7528\u66f4\u52a0\u7075\u6d3b\u3002 wait\u7684\u65b9\u6cd5 # wait \u548c gather import asyncio import time async def get_html(url): print(\"start get url\") await asyncio.sleep(2) print(\"end get url\") if __name__ == \"__main__\": start_time = time.time() loop = asyncio.get_event_loop() tasks = [get_html(\"http://www.imooc.com\") for i in range(10)] loop.run_until_complete(asyncio.gather(*tasks)) print(time.time()-start_time) gather\u7684\u65b9\u6cd5 # # wait \u548c gather import asyncio import time async def get_html(url): print(\"start get url\") await asyncio.sleep(2) print(\"end get url\") if __name__ == \"__main__\": start_time = time.time() loop = asyncio.get_event_loop() # gather\u548cwait\u7684\u533a\u522b # gather\u66f4\u52a0high-level group1 = [get_html(\"http://projectsedu.com\") for i in range(2)] group2 = [get_html(\"http://www.imooc.com\") for i in range(2)] # gather\u65b9\u6cd5 group1 = asyncio.gather(*group1) group2 = asyncio.gather(*group2) # \u4e5f\u53ef\u4ee5\u53d6\u6d88\u6389\u4efb\u52a1 # group2.cancel() # \u76f4\u63a5\u4f20\u9012\u591a\u4e2agroup loop.run_until_complete(asyncio.gather(group1, group2)) print(time.time() - start_time) run_until_complete\u4e0erun_forever run_until_complete\u8fd0\u884c\u5b8c\u6307\u5b9a\u7684\u534f\u7a0b\u540e\u81ea\u52a8\u505c\u6389\u3002 \"\"\" loop\u4f1a\u88ab\u653e\u5230future\u4e2d:\u8fd9\u6837\u5728\u4efb\u4f55future\u6216\u8005task\u4e2dloop\u90fd\u4f1a\u88ab\u505c\u6b62\uff01 \"\"\" \"\"\" loop\u653e\u5728future\u4e2d\uff0cfuture\u4e5f\u653e\u5728loop\u4e2d\uff5e\u5f88\u5bb9\u6613\u5f15\u8d77\u5faa\u73af\u5f15\u7528\uff01 \"\"\" import asyncio loop = asyncio.get_event_loop() loop.run_forever() # \u6c38\u4e0d\u4f1a\u505c\u6b62 loop.run_until_complete(task...) # \u81ea\u52a8\u505c\u6b62 \u5982\u4f55\u53d6\u6d88future(task) import asyncio import time async def get_html(sleep_times): print(\"waiting\") await asyncio.sleep(sleep_times) print(\"done after {}s\".format(sleep_times)) if __name__ == \"__main__\": task1 = get_html(2) task2 = get_html(3) task3 = get_html(3) tasks = [task1, task2, task3] loop = asyncio.get_event_loop() try: loop.run_until_complete(asyncio.wait(tasks)) # \u6309\u4e86Ctrl+c\u540e\u53d6\u6d88\u4efb\u52a1\uff01 except KeyboardInterrupt as e: all_tasks = asyncio.Task.all_tasks() for task in all_tasks: print(\"cancel task\") # task.cancel()\u4f1a\u8fd4\u56deTrue\u6216\u8005False print(task.cancel()) loop.stop() \"\"\" # \u5fc5\u987b\u8c03\u7528run_forever() \"\"\" loop.run_forever() finally: loop.close() \u534f\u7a0b\u7684\u5d4c\u5957(\u4e92\u76f8\u8c03\u7528) \u8be6\u89c1asyncio\u5b98\u65b9\u6587\u6863\uff1a \u534f\u7a0b\u76f8\u4e92\u8c03\u7528\u6587\u6863 import asyncio async def compute(x, y): print(\"Compute %s + %s ...\" % (x, y)) await asyncio.sleep(1.0) return x + y async def print_sum(x, y): result = await compute(x, y) print(\"%s + %s = %s\" % (x, y, result)) loop = asyncio.get_event_loop() loop.run_until_complete(print_sum(1, 2)) loop.close() \u65f6\u5e8f\u56fe \u5176\u4ed6\u51fd\u6570:call_soon/call_at/call_later/call_soon_threadsafe call_soon\u5373\u523b\u6267\u884c \u2014\u2014\u5728\u961f\u5217\u91cc\u9762\u7b49\u5230\u4e0b\u4e00\u6b21\u5faa\u73af\u7684\u65f6\u5019\u7acb\u5373\u6267\u884c\u3002 import asyncio def callback(sleep_times): print(\"success time {}\".format(sleep_times)) # \u505c\u6b62 def stoploop(loop): loop.stop() #call_later, call_at if __name__ == \"__main__\": loop = asyncio.get_event_loop() now = loop.time() loop.call_soon(callback, 2) loop.call_soon(callback, 1) loop.call_soon(callback, 3) # \u505c\u6b62 loop.call_soon(stoploop, loop) loop.run_forever() call_later \u6839\u636e\u5ef6\u8fdf\u8c03\u7528\u7684\u65f6\u95f4\u6765\u8c03\u7528\uff0c\u5e76\u4e14\u662f\u5728call_soon\u4e4b\u540e\u8c03\u7528\u3002 import asyncio def callback(sleep_times): print(\"success time {}\".format(sleep_times)) # \u505c\u6b62 def stoploop(loop): loop.stop() if __name__ == \"__main__\": loop = asyncio.get_event_loop() now = loop.time() # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6307\u5b9a\u7684\u65f6\u95f4 loop.call_later(2,callback, 2) loop.call_later(1,callback, 1) loop.call_later(3,callback, 3) # \u5148\u6267\u884ccall_soon loop.call_soon(callback, 4) # # \u505c\u6b62 # loop.call_soon(stoploop, loop) loop.run_forever() \"\"\" success time 4 success time 1 success time 2 success time 3 \"\"\" call_at import asyncio def callback(sleep_times,loop): print(\"success time {}\".format(loop.time())) # \u505c\u6b62 def stoploop(loop): loop.stop() #call_later, call_at if __name__ == \"__main__\": loop = asyncio.get_event_loop() # \u5185\u90e8\u7684\u5355\u8c03\u65f6\u95f4 now = loop.time() # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6307\u5b9a\u7684\u65f6\u95f4 \u2014\u2014 \u662f\u5185\u90e8\u7684\u65f6\u949f\u65f6\u95f4 loop.call_at(now+2,callback, 2,loop) loop.call_at(now+1,callback, 1,loop) loop.call_at(now+3,callback, 3,loop) # \u5148\u6267\u884ccall_soon loop.call_soon(callback, 4,loop) # # \u505c\u6b62 # loop.call_soon(stoploop, loop) loop.run_forever() \"\"\" success time 22962.654698165 success time 22963.65639768 success time 22964.658318416 success time 22965.659323424 \"\"\" call_soon_threadsafe \u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u6cd5 \u2014\u2014 \u4e0ecall_soon\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u5b83\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 \u2014\u2014 \u7528\u6cd5\u4e0ecall_soon\u4e00\u6837\uff01 \u7ebf\u7a0b\u6c60\u4e0easyncio\u7ed3\u5408\u5b8c\u6210\u963b\u585eIO\u8bf7\u6c42 \u2014\u2014 \u5982\u679c\u73b0\u5b9e\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757\u6216\u8005\u63a5\u53e3\u5fc5\u987b\u4f7f\u7528\u963b\u585e\u7684\u8bdd\uff08pymysql\u7b49\uff09\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c\uff01 # \u4f7f\u7528\u591a\u7ebf\u7a0b\uff1a\u5728\u534f\u7a0b\u4e2d\u96c6\u6210\u963b\u585eio import socket import asyncio from concurrent.futures import ThreadPoolExecutor from urllib.parse import urlparse \"\"\" \u963b\u585e\u7684\u63a5\u53e3 \"\"\" def get_url(url): # \u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" #\u5efa\u7acbsocket\u8fde\u63a5 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # client.setblocking(False) client.connect((host, 80)) # \u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu #\u4e0d\u505c\u7684\u8be2\u95ee\u8fde\u63a5\u662f\u5426\u5efa\u7acb\u597d\uff0c \u9700\u8981while\u5faa\u73af\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u72b6\u6001 #\u505a\u8ba1\u7b97\u4efb\u52a1\u6216\u8005\u518d\u6b21\u53d1\u8d77\u5176\u4ed6\u7684\u8fde\u63a5\u8bf7\u6c42 client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) data = b\"\" while True: d = client.recv(1024) if d: data += d else: break data = data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) client.close() if __name__ == \"__main__\": import time start_time = time.time() loop = asyncio.get_event_loop() # \u7ebf\u7a0b\u6c60\u8bbe\u4e3a3 executor = ThreadPoolExecutor(3) tasks = [] for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) # \u5c06\u67d0\u4e2a\u963b\u585eIO\u7684\u51fd\u6570\u653e\u5728executor\u4e2d\u8fd0\u884c # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u7ebf\u7a0b\u6c60 \u2014\u2014 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u963b\u585e\u51fd\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u963b\u585eIO\u51fd\u6570\u7528\u5230\u7684\u53c2\u6570 task = loop.run_in_executor(executor, get_url, url) tasks.append(task) loop.run_until_complete(asyncio.wait(tasks)) print(\"last time:{}\".format(time.time()-start_time)) asyncio\u6a21\u62df\u7b80\u5355\u7684http\u8bf7\u6c42 asyncio\u6ca1\u6709\u63d0\u4f9bhttp\u534f\u8bae\u63a5\u53e3\uff0c\u53ea\u63d0\u4f9b\u4e86TCP/UDP\u534f\u8bae\u63a5\u53e3\u3002 \u5982\u679c\u60f3\u4f7f\u7528http\u534f\u8bae\u8bf7\u6c42url\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528 aiohttp \u2014\u2014\u642d\u5efahttp\u670d\u52a1\u5668\u6216\u8005\u505a\u722c\u866b\u3002 # asyncio \u6ca1\u6709\u63d0\u4f9bhttp\u534f\u8bae\u7684\u63a5\u53e3 aiohttp import asyncio import socket from urllib.parse import urlparse \"\"\"# \u6539\u6210\u534f\u7a0b\u51fd\u6570\"\"\" async def get_url(url): #\u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 \"\"\"# \u4f7f\u7528await\"\"\" reader, writer = await asyncio.open_connection(host,80) writer.write(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) all_lines = [] async for raw_line in reader: data = raw_line.decode(\"utf8\") all_lines.append(data) html = \"\\n\".join(all_lines) return html async def main(): tasks = [] for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) tasks.append(asyncio.ensure_future(get_url(url))) for task in asyncio.as_completed(tasks): result = await task print(result) if __name__ == \"__main__\": import time start_time = time.time() loop = asyncio.get_event_loop() loop.run_until_complete(main()) print('last time:{}'.format(time.time()-start_time))","title":"13 asyncio\u5e76\u53d1\u7f16\u7a0b\u8fdb\u9636"},{"location":"python\u8fdb\u9636/asyncio3/#asyncio","text":"1\u3001\u5305\u542b\u5404\u79cd\u7279\u5b9a\u7cfb\u7edf\u5b9e\u73b0\u7684\u6a21\u5757\u5316\u4e8b\u4ef6\u5faa\u73af\u3002 2\u3001\u4f20\u8f93\u548c\u62bd\u8c61\u534f\u8bae\u3002 3\u3001\u5bf9TCP\u3001UDP\u3001SSL\u3001\u5b50\u8fdb\u7a0b\u3001\u5ef6\u65f6\u8c03\u7528\u4ee5\u53ca\u5176\u4ed6\u7684\u5177\u4f53\u652f\u6301\u3002 4\u3001\u6a21\u4efffutures\u6a21\u5757\u4f46\u9002\u7528\u4e8e\u4e8b\u4ef6\u5faa\u73af\u4f7f\u7528\u7684Future\u7c7b\u3002 5\u3001\u57fa\u4e8eyield from\u7684\u534f\u8bae\u548c\u4efb\u52a1\uff0c\u53ef\u4ee5\u8ba9\u4f60\u7528\u987a\u5e8f\u7684\u65b9\u5f0f\u7f16\u5199\u5e76\u53d1\u4ee3\u7801\u3002 6\u3001\u5f53\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u4e00\u4e2a\u5c06\u4ea7\u751f\u963b\u585eIO\u7684\u8c03\u7528\u65f6\uff0c\u6709\u63a5\u53e3\u53ef\u4ee5\u628a\u8fd9\u4e2a\u4e8b\u4ef6\u8f6c\u79fb\u5230\u7ebf\u7a0b\u6c60\u3002 7\u3001\u6a21\u4effthreading\u6a21\u5757\u4e2d\u7684\u540c\u6b65\u539f\u8bed\u3001\u53ef\u4ee5\u7528\u5728\u5355\u7ebf\u7a0b\u5185\u7684\u534f\u7a0b\u4e4b\u95f4\u3002","title":"asyncio\u4ecb\u7ecd"},{"location":"python\u8fdb\u9636/asyncio3/#_1","text":"1\u3001\u9ad8\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u4e09\u4e2a\u8981\u7d20 \u4e8b\u4ef6\u5faa\u73af \u56de\u8c03(\u9a71\u52a8\u751f\u6210\u5668) epoll(IO\u591a\u8def\u590d\u7528) 2\u3001asyncio asyncio\u662fpython\u7528\u4e8e\u89e3\u51b3\u5f02\u6b65io\u7f16\u7a0b\u7684\u4e00\u6574\u5957\u89e3\u51b3\u65b9\u6848\uff1a tornado\u3001gevent\u3001twisted\uff08scrapy\uff0c django channels\uff09 3\u3001tornado torando\u81ea\u5df1\u5b9e\u73b0\u4e86\u5b9e\u73b0web\u670d\u52a1\u5668\uff01 django+flask\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684web\u670d\u52a1\u5668\uff1a(uwsgi, gunicorn+nginx) tornado\u53ef\u4ee5\u76f4\u63a5\u90e8\u7f72\uff1a nginx+tornado\uff08nginx\u5b9e\u73b0\u4e86\u4e00\u4e9btornado\u6ca1\u6709\u5b9e\u73b0\u7684\u529f\u80fd\uff09","title":"\u4e8b\u4ef6\u5faa\u73af"},{"location":"python\u8fdb\u9636/asyncio3/#asyncio_1","text":"# \u4f7f\u7528asyncio import asyncio import time async def get_html(url): print(\"start get url\") # \u540c\u6b65\u7684time.sleep\u4e0d\u80fd\u4f7f\u7528\u5728\u534f\u7a0b\u4e2d\uff01\u5f97\u4f7f\u7528\u81ea\u5df1\u7684\uff01 # \u8fd9\u662f\u4e00\u4e2a\u8017\u65f6\u7684\u64cd\u4f5c\uff1a\u5f97\u52a0\u4e0aawait await asyncio.sleep(2) print(\"end get url\") if __name__ == \"__main__\": start_time = time.time() # \u81ea\u5df1\u5b8c\u6210select\u7684\u64cd\u4f5c loop = asyncio.get_event_loop() tasks = [get_html(\"http://www.imooc.com\") for i in range(10)] # \u76f4\u63a5\u5c06\u4efb\u52a1\u4f20\u8fdb\u53bb \"\"\" \u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u7684\u662fasyncio.wait \"\"\" loop.run_until_complete(asyncio.wait(tasks)) print(time.time()-start_time)","title":"\u4f7f\u7528asyncio"},{"location":"python\u8fdb\u9636/asyncio3/#_2","text":"\u65b9\u6cd51 # \u83b7\u53d6\u534f\u7a0b\u7684\u8fd4\u56de\u503c import asyncio import time from functools import partial async def get_html(url): print(\"start get url\") await asyncio.sleep(2) return \"whw\" \"\"\" \u4f7f\u7528paratial\u7684\u8bdd\uff0c\u4f20\u7684\u53c2\u6570\u5fc5\u987b\u653e\u5728\u524d\u8fb9\uff01\"\"\" def callback(url, future): print(url) print(\"send email to whw\") if __name__ == \"__main__\": start_time = time.time() # \u4e00\u4e2a\u7ebf\u7a0b\u53ea\u6709\u4e00\u4e2aloop loop = asyncio.get_event_loop() # \u4f7f\u7528loop.create_task\u65b9\u6cd5 task = loop.create_task(get_html(\"http://www.imooc.com\")) # \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2acallback\uff01\uff01\uff01 # \u6ce8\u610f\u53ea\u4f20\u51fd\u6570\u540d # \u4f7f\u7528partial\u5305\u88c5callback\uff01\u8fd9\u6837callback\u53ef\u4ee5\u52a0\u53c2\u6570\u4e86\uff01partical\u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e2a\u51fd\u6570\u7684\u5730\u5740 task.add_done_callback(partial(callback, \"http://www.imooc.com\")) loop.run_until_complete(task) print(task.result()) \"\"\" start get url http://www.imooc.com send email to whw whw \"\"\" \u65b9\u6cd52 # \u83b7\u53d6\u534f\u7a0b\u7684\u8fd4\u56de\u503c import asyncio import time from functools import partial async def get_html(url): print(\"start get url\") await asyncio.sleep(2) return \"whw\" def callback(url, future): print(url) print(\"send email to whw\") if __name__ == \"__main__\": start_time = time.time() loop = asyncio.get_event_loop() # \u8c03\u7528asyncio.ensure_future \u2014\u2014 \u5b9e\u9645\u4e2d\u8fd4\u56de\u7684\u4e5f\u662ftask\u7c7b\u578b get_future = asyncio.ensure_future(get_html(\"http://www.imooc.com\")) loop.run_until_complete(get_future) print(get_future.result()) # whw \"\"\" start get url whw \"\"\" wait\u4e0egather gather\u66f4\u52a0\u9ad8\u7ea7\uff0c\u4f7f\u7528\u66f4\u52a0\u7075\u6d3b\u3002 wait\u7684\u65b9\u6cd5 # wait \u548c gather import asyncio import time async def get_html(url): print(\"start get url\") await asyncio.sleep(2) print(\"end get url\") if __name__ == \"__main__\": start_time = time.time() loop = asyncio.get_event_loop() tasks = [get_html(\"http://www.imooc.com\") for i in range(10)] loop.run_until_complete(asyncio.gather(*tasks)) print(time.time()-start_time) gather\u7684\u65b9\u6cd5 # # wait \u548c gather import asyncio import time async def get_html(url): print(\"start get url\") await asyncio.sleep(2) print(\"end get url\") if __name__ == \"__main__\": start_time = time.time() loop = asyncio.get_event_loop() # gather\u548cwait\u7684\u533a\u522b # gather\u66f4\u52a0high-level group1 = [get_html(\"http://projectsedu.com\") for i in range(2)] group2 = [get_html(\"http://www.imooc.com\") for i in range(2)] # gather\u65b9\u6cd5 group1 = asyncio.gather(*group1) group2 = asyncio.gather(*group2) # \u4e5f\u53ef\u4ee5\u53d6\u6d88\u6389\u4efb\u52a1 # group2.cancel() # \u76f4\u63a5\u4f20\u9012\u591a\u4e2agroup loop.run_until_complete(asyncio.gather(group1, group2)) print(time.time() - start_time)","title":"\u83b7\u53d6\u534f\u7a0b\u7684\u8fd4\u56de\u503c"},{"location":"python\u8fdb\u9636/asyncio3/#run_until_completerun_forever","text":"run_until_complete\u8fd0\u884c\u5b8c\u6307\u5b9a\u7684\u534f\u7a0b\u540e\u81ea\u52a8\u505c\u6389\u3002 \"\"\" loop\u4f1a\u88ab\u653e\u5230future\u4e2d:\u8fd9\u6837\u5728\u4efb\u4f55future\u6216\u8005task\u4e2dloop\u90fd\u4f1a\u88ab\u505c\u6b62\uff01 \"\"\" \"\"\" loop\u653e\u5728future\u4e2d\uff0cfuture\u4e5f\u653e\u5728loop\u4e2d\uff5e\u5f88\u5bb9\u6613\u5f15\u8d77\u5faa\u73af\u5f15\u7528\uff01 \"\"\" import asyncio loop = asyncio.get_event_loop() loop.run_forever() # \u6c38\u4e0d\u4f1a\u505c\u6b62 loop.run_until_complete(task...) # \u81ea\u52a8\u505c\u6b62","title":"run_until_complete\u4e0erun_forever"},{"location":"python\u8fdb\u9636/asyncio3/#futuretask","text":"import asyncio import time async def get_html(sleep_times): print(\"waiting\") await asyncio.sleep(sleep_times) print(\"done after {}s\".format(sleep_times)) if __name__ == \"__main__\": task1 = get_html(2) task2 = get_html(3) task3 = get_html(3) tasks = [task1, task2, task3] loop = asyncio.get_event_loop() try: loop.run_until_complete(asyncio.wait(tasks)) # \u6309\u4e86Ctrl+c\u540e\u53d6\u6d88\u4efb\u52a1\uff01 except KeyboardInterrupt as e: all_tasks = asyncio.Task.all_tasks() for task in all_tasks: print(\"cancel task\") # task.cancel()\u4f1a\u8fd4\u56deTrue\u6216\u8005False print(task.cancel()) loop.stop() \"\"\" # \u5fc5\u987b\u8c03\u7528run_forever() \"\"\" loop.run_forever() finally: loop.close()","title":"\u5982\u4f55\u53d6\u6d88future(task)"},{"location":"python\u8fdb\u9636/asyncio3/#_3","text":"\u8be6\u89c1asyncio\u5b98\u65b9\u6587\u6863\uff1a \u534f\u7a0b\u76f8\u4e92\u8c03\u7528\u6587\u6863 import asyncio async def compute(x, y): print(\"Compute %s + %s ...\" % (x, y)) await asyncio.sleep(1.0) return x + y async def print_sum(x, y): result = await compute(x, y) print(\"%s + %s = %s\" % (x, y, result)) loop = asyncio.get_event_loop() loop.run_until_complete(print_sum(1, 2)) loop.close() \u65f6\u5e8f\u56fe","title":"\u534f\u7a0b\u7684\u5d4c\u5957(\u4e92\u76f8\u8c03\u7528)"},{"location":"python\u8fdb\u9636/asyncio3/#call_sooncall_atcall_latercall_soon_threadsafe","text":"call_soon\u5373\u523b\u6267\u884c \u2014\u2014\u5728\u961f\u5217\u91cc\u9762\u7b49\u5230\u4e0b\u4e00\u6b21\u5faa\u73af\u7684\u65f6\u5019\u7acb\u5373\u6267\u884c\u3002 import asyncio def callback(sleep_times): print(\"success time {}\".format(sleep_times)) # \u505c\u6b62 def stoploop(loop): loop.stop() #call_later, call_at if __name__ == \"__main__\": loop = asyncio.get_event_loop() now = loop.time() loop.call_soon(callback, 2) loop.call_soon(callback, 1) loop.call_soon(callback, 3) # \u505c\u6b62 loop.call_soon(stoploop, loop) loop.run_forever() call_later \u6839\u636e\u5ef6\u8fdf\u8c03\u7528\u7684\u65f6\u95f4\u6765\u8c03\u7528\uff0c\u5e76\u4e14\u662f\u5728call_soon\u4e4b\u540e\u8c03\u7528\u3002 import asyncio def callback(sleep_times): print(\"success time {}\".format(sleep_times)) # \u505c\u6b62 def stoploop(loop): loop.stop() if __name__ == \"__main__\": loop = asyncio.get_event_loop() now = loop.time() # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6307\u5b9a\u7684\u65f6\u95f4 loop.call_later(2,callback, 2) loop.call_later(1,callback, 1) loop.call_later(3,callback, 3) # \u5148\u6267\u884ccall_soon loop.call_soon(callback, 4) # # \u505c\u6b62 # loop.call_soon(stoploop, loop) loop.run_forever() \"\"\" success time 4 success time 1 success time 2 success time 3 \"\"\" call_at import asyncio def callback(sleep_times,loop): print(\"success time {}\".format(loop.time())) # \u505c\u6b62 def stoploop(loop): loop.stop() #call_later, call_at if __name__ == \"__main__\": loop = asyncio.get_event_loop() # \u5185\u90e8\u7684\u5355\u8c03\u65f6\u95f4 now = loop.time() # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6307\u5b9a\u7684\u65f6\u95f4 \u2014\u2014 \u662f\u5185\u90e8\u7684\u65f6\u949f\u65f6\u95f4 loop.call_at(now+2,callback, 2,loop) loop.call_at(now+1,callback, 1,loop) loop.call_at(now+3,callback, 3,loop) # \u5148\u6267\u884ccall_soon loop.call_soon(callback, 4,loop) # # \u505c\u6b62 # loop.call_soon(stoploop, loop) loop.run_forever() \"\"\" success time 22962.654698165 success time 22963.65639768 success time 22964.658318416 success time 22965.659323424 \"\"\" call_soon_threadsafe \u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u6cd5 \u2014\u2014 \u4e0ecall_soon\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7\u5b83\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 \u2014\u2014 \u7528\u6cd5\u4e0ecall_soon\u4e00\u6837\uff01","title":"\u5176\u4ed6\u51fd\u6570:call_soon/call_at/call_later/call_soon_threadsafe"},{"location":"python\u8fdb\u9636/asyncio3/#asyncioio","text":"\u2014\u2014 \u5982\u679c\u73b0\u5b9e\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757\u6216\u8005\u63a5\u53e3\u5fc5\u987b\u4f7f\u7528\u963b\u585e\u7684\u8bdd\uff08pymysql\u7b49\uff09\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5728\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c\uff01 # \u4f7f\u7528\u591a\u7ebf\u7a0b\uff1a\u5728\u534f\u7a0b\u4e2d\u96c6\u6210\u963b\u585eio import socket import asyncio from concurrent.futures import ThreadPoolExecutor from urllib.parse import urlparse \"\"\" \u963b\u585e\u7684\u63a5\u53e3 \"\"\" def get_url(url): # \u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" #\u5efa\u7acbsocket\u8fde\u63a5 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # client.setblocking(False) client.connect((host, 80)) # \u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu #\u4e0d\u505c\u7684\u8be2\u95ee\u8fde\u63a5\u662f\u5426\u5efa\u7acb\u597d\uff0c \u9700\u8981while\u5faa\u73af\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u72b6\u6001 #\u505a\u8ba1\u7b97\u4efb\u52a1\u6216\u8005\u518d\u6b21\u53d1\u8d77\u5176\u4ed6\u7684\u8fde\u63a5\u8bf7\u6c42 client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) data = b\"\" while True: d = client.recv(1024) if d: data += d else: break data = data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) client.close() if __name__ == \"__main__\": import time start_time = time.time() loop = asyncio.get_event_loop() # \u7ebf\u7a0b\u6c60\u8bbe\u4e3a3 executor = ThreadPoolExecutor(3) tasks = [] for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) # \u5c06\u67d0\u4e2a\u963b\u585eIO\u7684\u51fd\u6570\u653e\u5728executor\u4e2d\u8fd0\u884c # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u7ebf\u7a0b\u6c60 \u2014\u2014 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u963b\u585e\u51fd\u6570\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u963b\u585eIO\u51fd\u6570\u7528\u5230\u7684\u53c2\u6570 task = loop.run_in_executor(executor, get_url, url) tasks.append(task) loop.run_until_complete(asyncio.wait(tasks)) print(\"last time:{}\".format(time.time()-start_time))","title":"\u7ebf\u7a0b\u6c60\u4e0easyncio\u7ed3\u5408\u5b8c\u6210\u963b\u585eIO\u8bf7\u6c42"},{"location":"python\u8fdb\u9636/asyncio3/#asynciohttp","text":"asyncio\u6ca1\u6709\u63d0\u4f9bhttp\u534f\u8bae\u63a5\u53e3\uff0c\u53ea\u63d0\u4f9b\u4e86TCP/UDP\u534f\u8bae\u63a5\u53e3\u3002 \u5982\u679c\u60f3\u4f7f\u7528http\u534f\u8bae\u8bf7\u6c42url\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528 aiohttp \u2014\u2014\u642d\u5efahttp\u670d\u52a1\u5668\u6216\u8005\u505a\u722c\u866b\u3002 # asyncio \u6ca1\u6709\u63d0\u4f9bhttp\u534f\u8bae\u7684\u63a5\u53e3 aiohttp import asyncio import socket from urllib.parse import urlparse \"\"\"# \u6539\u6210\u534f\u7a0b\u51fd\u6570\"\"\" async def get_url(url): #\u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 \"\"\"# \u4f7f\u7528await\"\"\" reader, writer = await asyncio.open_connection(host,80) writer.write(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) all_lines = [] async for raw_line in reader: data = raw_line.decode(\"utf8\") all_lines.append(data) html = \"\\n\".join(all_lines) return html async def main(): tasks = [] for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) tasks.append(asyncio.ensure_future(get_url(url))) for task in asyncio.as_completed(tasks): result = await task print(result) if __name__ == \"__main__\": import time start_time = time.time() loop = asyncio.get_event_loop() loop.run_until_complete(main()) print('last time:{}'.format(time.time()-start_time))","title":"asyncio\u6a21\u62df\u7b80\u5355\u7684http\u8bf7\u6c42"},{"location":"python\u8fdb\u9636/copy/","text":"\u4e2a\u4eba\u535a\u5ba2 \u672c\u4eba\u4e4b\u524d\u603b\u7ed3\u4e86\u4e00\u7bc7\u535a\u5ba2\uff0c\u8bb2\u7684\u975e\u5e38\u6e05\u695a\uff1a Python3\u4e2d\u7684\u8d4b\u503c\u64cd\u4f5c\u3001\u6d45\u62f7\u8d1d\u4e0e\u6df1\u62f7\u8d1d \u4e0b\u9762\u8fd9\u7bc7\u535a\u5ba2\u662f\u5b9e\u9645\u4e2d\u7528\u5230\u6df1\u62f7\u8d1d\u7684\u5730\u65b9\uff1a Python\u53ef\u53d8\u6570\u636e\u7c7b\u578blist\u586b\u5751\u4e00\u5219","title":"10 Python\u4e2d\u7684\u6df1\u62f7\u8d1d\u4e0e\u6d45\u62f7\u8d1d"},{"location":"python\u8fdb\u9636/copy/#_1","text":"\u672c\u4eba\u4e4b\u524d\u603b\u7ed3\u4e86\u4e00\u7bc7\u535a\u5ba2\uff0c\u8bb2\u7684\u975e\u5e38\u6e05\u695a\uff1a Python3\u4e2d\u7684\u8d4b\u503c\u64cd\u4f5c\u3001\u6d45\u62f7\u8d1d\u4e0e\u6df1\u62f7\u8d1d \u4e0b\u9762\u8fd9\u7bc7\u535a\u5ba2\u662f\u5b9e\u9645\u4e2d\u7528\u5230\u6df1\u62f7\u8d1d\u7684\u5730\u65b9\uff1a Python\u53ef\u53d8\u6570\u636e\u7c7b\u578blist\u586b\u5751\u4e00\u5219","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u8fdb\u9636/linux/","text":"\u96f6\u6563\u77e5\u8bc6\u70b9 shell\u547d\u4ee4\u4e2d\u4e0d\u80fd\u6709\u4e2d\u82f1\u6587\u7684\u5355\u62ec\u53f7 windows\u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u5668\u7684\u65f6\u5019\u6587\u4ef6\u540d\u4f1a\u591a\u4e00\u4e9b\u4e2d\u6587\u7684\u62ec\u53f7\uff1a teml\uff081\uff09.csv \u5982\u679c\u5728shell\u4e2d\u6267\u884c\u547d\u4ee4\uff1a\u5c06\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5199\u5165\u65b0\u6587\u4ef6\u7684\u8bdd\u4f1a\u6709\u95ee\u9898\uff1a cat /home/whw/teml\uff081\uff09.csv > /homwe/whw/teml_new.csv \u8fd9\u6837\u5199\u4f1a\u62a5\u9519\uff0c\u53ef\u4ee5\u5c06\u6587\u4ef6\u540d\u7528\u5f15\u53f7\u5305\u8d77\u6765\uff1a cat \"/home/whw/teml\uff081\uff09.csv\" > \"/home/whw/teml_new.csv\" \u4e2a\u4eba\u535a\u5ba2 docker\u5b66\u4e60\u4e0e\u5e94\u7528 Linux\u4e0bvim\u57fa\u672c\u547d\u4ee4 nginx.conf\u6587\u4ef6\u5185\u5bb9\u8be6\u89e3 Linux\u5e38\u7528\u547d\u4ee4\u5927\u5168\uff08\u975e\u5e38\u5168\uff01\uff01\uff01\uff09 centos7\u90e8\u7f72\u524d\u540e\u7aef\u5206\u79bb\u9879\u76ee\u7684\u8fc7\u7a0b \u5728\u88f8\u673acentos7\u7cfb\u7edf\u4e2d\u90e8\u7f72django\u9879\u76ee\u7684\u8fc7\u7a0b linux\u4e0b\u865a\u62df\u73af\u5883\u6a21\u5757virtualenv\u53ca\u7ba1\u7406\u5de5\u5177virtualenvwrapper\u7684\u4f7f\u7528 \u4f18\u79c0\u53c2\u8003\u6587\u6863 Linux\u5de5\u5177\u5feb\u901f\u6559\u7a0b","title":"01 Linux\u670d\u52a1\u7aef\u76f8\u5173"},{"location":"python\u8fdb\u9636/linux/#_1","text":"shell\u547d\u4ee4\u4e2d\u4e0d\u80fd\u6709\u4e2d\u82f1\u6587\u7684\u5355\u62ec\u53f7 windows\u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u5668\u7684\u65f6\u5019\u6587\u4ef6\u540d\u4f1a\u591a\u4e00\u4e9b\u4e2d\u6587\u7684\u62ec\u53f7\uff1a teml\uff081\uff09.csv \u5982\u679c\u5728shell\u4e2d\u6267\u884c\u547d\u4ee4\uff1a\u5c06\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u5199\u5165\u65b0\u6587\u4ef6\u7684\u8bdd\u4f1a\u6709\u95ee\u9898\uff1a cat /home/whw/teml\uff081\uff09.csv > /homwe/whw/teml_new.csv \u8fd9\u6837\u5199\u4f1a\u62a5\u9519\uff0c\u53ef\u4ee5\u5c06\u6587\u4ef6\u540d\u7528\u5f15\u53f7\u5305\u8d77\u6765\uff1a cat \"/home/whw/teml\uff081\uff09.csv\" > \"/home/whw/teml_new.csv\"","title":"\u96f6\u6563\u77e5\u8bc6\u70b9"},{"location":"python\u8fdb\u9636/linux/#_2","text":"docker\u5b66\u4e60\u4e0e\u5e94\u7528 Linux\u4e0bvim\u57fa\u672c\u547d\u4ee4 nginx.conf\u6587\u4ef6\u5185\u5bb9\u8be6\u89e3 Linux\u5e38\u7528\u547d\u4ee4\u5927\u5168\uff08\u975e\u5e38\u5168\uff01\uff01\uff01\uff09 centos7\u90e8\u7f72\u524d\u540e\u7aef\u5206\u79bb\u9879\u76ee\u7684\u8fc7\u7a0b \u5728\u88f8\u673acentos7\u7cfb\u7edf\u4e2d\u90e8\u7f72django\u9879\u76ee\u7684\u8fc7\u7a0b linux\u4e0b\u865a\u62df\u73af\u5883\u6a21\u5757virtualenv\u53ca\u7ba1\u7406\u5de5\u5177virtualenvwrapper\u7684\u4f7f\u7528","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u8fdb\u9636/linux/#_3","text":"Linux\u5de5\u5177\u5feb\u901f\u6559\u7a0b","title":"\u4f18\u79c0\u53c2\u8003\u6587\u6863"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/","text":"send\u4e0esendall \u5b98\u65b9\u6587\u6863\u5bf9socket\u6a21\u5757\u4e0b\u7684socket.send()\u548csocket.sendall()\u89e3\u91ca\u5982\u4e0b\uff1a socket.send(string[, flags]) Send data to the socket. The socket must be connected to a remote socket. The optional flags argument has the same meaning as for recv() above. Returns the number of bytes sent. Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. send()\u7684\u8fd4\u56de\u503c\u662f\u53d1\u9001\u7684\u5b57\u8282\u6570\u91cf\uff0c\u8fd9\u4e2a\u6570\u91cf\u503c\u53ef\u80fd\u5c0f\u4e8e\u8981\u53d1\u9001\u7684string\u7684\u5b57\u8282\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u80fd\u65e0\u6cd5\u53d1\u9001string\u4e2d\u6240\u6709\u7684\u6570\u636e\u3002 \u5982\u679c\u6709\u9519\u8bef\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 socket.sendall(string[, flags]) Send data to the socket. The socket must be connected to a remote socket. The optional flags argument has the same meaning as for recv() above. Unlike send(), this method continues to send data from string until either all data has been sent or an error occurs. None is returned on success. On error, an exception is raised, and there is no way to determine how much data, if any, was successfully sent. \u5c1d\u8bd5\u53d1\u9001string\u7684\u6240\u6709\u6570\u636e\uff0c\u6210\u529f\u5219\u8fd4\u56deNone\uff0c\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38\u3002 \u6545\uff0c\u4e0b\u9762\u4e24\u6bb5\u4ee3\u7801\u662f\u7b49\u4ef7\u7684\uff1a # 1\u3001sendall sock.sendall('Hello world\\n') # 2\u3001send buffer = 'Hello world\\n' while buffer: bytes = sock.send(buffer) buffer = buffer[bytes:] \u7b80\u5355\u7684socket\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef '''# client''' # -*- coding:utf-8 -*- import socket sk = socket.socket() # \u5bf9\u65b9\u670d\u52a1\u5668\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\u53f7 sk.connect(('192.168.16.166',8004)) while 1: send = input('>>>:').strip() if not send: continue elif send.upper() == 'Q': # \u9000\u51fa\u524d\u7ed9sever\u7aef\u53d1\u4fe1\u53f7 \u8ba9\u4ed6\u4e5f\u5173\u95ed sk.send(send.encode('utf-8')) print('\u8fde\u63a5\u5173\u95ed\uff01') break sk.send(send.encode('utf-8')) msg = sk.recv(1024).decode('utf-8') if msg.upper() == 'Q': print('\u8fde\u63a5\u5173\u95ed\uff01') break print('\u670d\u52a1\u5668\u7aef\u6570\u636e\uff1a',msg) sk.close() '''# server''' # -*- coding:utf-8 -*- import socket sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u5728\u7ed1\u5b9a\u524d\u8c03\u7528setsockopt\u8ba9\u5957\u63a5\u5b57\u5141\u8bb8\u5730\u5740\u91cd\u590d\u5229\u7528 sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # \u672c\u673a\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\u53f7 sk.bind(('192.168.16.79',9001)) sk.listen(100) print('\u6b63\u5728\u7b49\u5f85\u5ba2\u6237\u7aef\u53d1\u6765\u4fe1\u606f......') conn,addr = sk.accept() while 1: # \u5ba2\u6237\u7aef\u5f3a\u5236\u5173\u95ed\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u6240\u4ee5\u7528\u5f02\u5e38\u5904\u7406 try: ## \u901a\u4fe1\u5faa\u73af msg = conn.recv(1024).decode('utf-8') if msg.upper() == 'Q': print('\u8fde\u63a5\u5173\u95ed\uff01') break print('\u5ba2\u6237\u7aef\u6570\u636e\uff1a',msg) send = input('>>>::').strip() if not send: continue if send.upper() == 'Q': # \u9000\u51fa\u524d\u7ed9client\u7aef\u53d1\u4fe1\u53f7\uff0c\u8ba9\u4ed6\u4e5f\u5173\u95ed conn.send(send.encode('utf-8')) print('\u8fde\u63a5\u5173\u95ed\uff01') break conn.send(send.encode('utf-8')) except ConnectionResetError: print('\u5ba2\u6237\u7aef\u5f3a\u5236\u9000\u51fa\u7a0b\u5e8f\uff0c\u8fde\u63a5\u5173\u95ed\uff01') break conn.close() sk.close() ''' # \u8bf4\u660e \u603b\u662fclient\u7aef\u5148\u53d1\u9001\u6570\u636e\uff0c\u800cserver\u7aef\u5148\u63a5\u53d7\u6570\u636e\u7684\uff1b server\u7aef\u542f\u52a8\u540e\u603b\u662f\u5728\u76d1\u542c\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u4fe1\u606f\uff0c\u56e0\u6b64server\u8d77\u521d\u90fd\u662f\u5148\u63a5\u53d7\u6570\u636e\u7684\uff0c \u800c\u4e14\u4e00\u5f00\u59cb\u8ba9server\u7aef\u53d1\u9001\u7684\u8bdd\u4ed6\u4e5f\u4e0d\u77e5\u9053\u76ee\u6807\u5728\u54ea\u91cc\u3002 ''' TCP\u6a21\u578b '''# client''' # -*- coding:utf-8 -*- import socket sk_client = socket.socket() sk_client.connect(('127.0.0.1',9000)) while 1: rec = sk_client.recv(1024).decode('utf-8') # \u670d\u52a1\u7aef\u4e3b\u52a8\u65ad\u5f00\u94fe\u63a5 if rec.upper() == 'Q': break print('\u670d\u52a1\u5668\u6570\u636e\uff1a%s'%rec) msg = input('>>>:').strip() #\u5982\u679c\u8f93\u5165Q \u76f4\u63a5\u9000\u51fa \u4e5f\u4e0d\u7ed9server\u53d1\u9001\u4fe1\u606f\u4e86 if msg.upper() == 'Q': break sk_client.send(msg.encode('utf-8')) '''# server''' # -*- coding:utf-8 -*- import socket sk_server = socket.socket() sk_server.bind(('127.0.0.1',9000)) sk_server.listen() print('Listening......') while 1: conn,addr = sk_server.accept() while 1: msg = input('>>>').strip() conn.send(msg.encode('utf-8')) # \u670d\u52a1\u5668\u4e3b\u52a8\u8ddf\u6b63\u5728\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u5173\u95ed\u8fde\u63a5 if msg.upper() == 'Q': break ret = conn.recv(1024).decode('utf-8') print('\u5ba2\u6237\u7aef %s \u6570\u636e\uff1a%s'%(addr,ret)) conn.close() # \u670d\u52a1\u56687*24\u5c0f\u65f6\u8fd0\u884c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u5173\u95ed\u670d\u52a1\u5668 UDP\u6a21\u578b '''# client''' # -*- coding:utf-8 -*- import socket sk_client = socket.socket(type=socket.SOCK_DGRAM) server_addr = ('127.0.0.1',9000) while 1: cout = input('>>>:').strip() # \u5373\u4f7f\u8f93\u5165q \u4e5f\u8981\u53d1\u7ed9\u670d\u52a1\u5668 \u670d\u52a1\u5668\u7aef\u6709\u5224\u65ad-\u4f60\u8ddf\u4ed6\u65ad\u5f00\u4e86\u8fde\u63a5 sk_client.sendto(cout.encode('utf-8'),server_addr) if cout.upper() == 'Q': break print('\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4e86\u4fe1\u606f\uff1a%s'%cout) msg = sk_client.recv(1024).decode('utf-8') if msg.upper() == 'Q': break print('\u4ece\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5230\u6570\u636e\uff1a%s'%msg) sk_client.close() '''# server''' # -*- coding:utf-8 -*- import socket sk_server = socket.socket(type=socket.SOCK_DGRAM) sk_server.bind(('127.0.0.1',9000)) while 1: msg,c_addr = sk_server.recvfrom(1024) if msg.decode('utf-8').upper() == 'Q': ## \u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5143\u7ec4\u7684\u5751\uff01 print('\u5ba2\u6237\u7aef %s \u4e0e\u4f60\u65ad\u5f00\u4e86\u8fde\u63a5'%(c_addr,)) continue print('\u4ece\u5ba2\u6237\u7aef %s \u6536\u5230\u6d88\u606f\uff1a%s'%(c_addr,msg.decode('utf-8'))) cout = input('>>>:') sk_server.sendto(cout.encode('utf-8'),c_addr) if cout.upper() == 'Q': # ## \u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5143\u7ec4\u7684\u5751\uff01 print('\u5df2\u7ed9\u5ba2\u6237\u7aef %s \u53d1\u9001\u65ad\u5f00\u8fde\u63a5\u6307\u4ee4'%(c_addr,)) continue print('\u7ed9\u5ba2\u6237\u7aef %s \u53d1\u9001\u4e86\u4fe1\u606f\uff1a%s'%(c_addr,cout)) # \u670d\u52a1\u5668\u4e0d\u505c\u6b62 \u6240\u4ee5\u4e0d\u7ed9\u4ed6close \u57fa\u4e8eTCP\u7684\u767b\u9646\u2014\u7528\u5230\u53cd\u5c04 '''# client''' # -*- coding:utf-8 -*- import json import socket count = 0 while count < 3: username = input('\u7528\u6237\u540d\uff1a').strip() password = input('\u5bc6 \u7801\uff1a').strip() sk_client = socket.socket() sk_client.connect(('127.0.0.1',9005)) dic = { 'operate':'login', 'username':username, 'password':password, } # \u7528json\u53d8\u6210str\u7c7b\u578b\u7684 \u65b9\u4fbf\u7f51\u7edc\u4f20\u8f93 str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') sk_client.send(bytes_dic) # \u4ece\u670d\u52a1\u5668\u7aef\u63a5\u6536\u7ed3\u679c str_dic_res = sk_client.recv(1024).decode('utf-8') dic_res = json.loads(str_dic_res) if dic_res['result']: print('\u767b\u9646\u6210\u529f\uff01') sk_client.close() break else: print('\u767b\u5f55\u5931\u8d25\uff01') sk_client.close() '''# server''' # -*- coding:utf-8 -*- import sys import json import socket import hashlib def get_md5(username,password): md5 = hashlib.md5(username.encode('utf-8')) md5.update(password.encode('utf-8')) return md5.hexdigest() def login(dic): with open('userinfo','r')as f: for line in f: usr,pwd = line.strip().split('|') if usr == dic['username'] and pwd == get_md5(dic['username'],dic['password']): return {'operate':'login','result':True} else: return {'operate':'login','result':False} if __name__ == '__main__': sk_server = socket.socket() sk_server.bind(('127.0.0.1',9005)) sk_server.listen() print('\u7b49\u5f85\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5......') while 1: conn,addr = sk_server.accept() str_dic = conn.recv(1024).decode('utf-8') dic = json.loads(str_dic) # \u53cd\u5c04 if hasattr(sys.modules[__name__],dic['operate']): l = getattr(sys.modules[__name__],dic['operate']) ret = l(dic) bytes_ret = json.dumps(ret).encode('utf-8') conn.send(bytes_ret) conn.close() # \u6a21\u62dfserver\u7aef\u4e0ddown\u673a \u4e0b\u9762\u4e0d\u4f1a\u6267\u884c sk_server.close() \u57fa\u4e8eUDP\u7684\u804a\u5929\u2014\u52a0\u6807\u8bc6 '''# client''' # -*- coding:utf-8 -*- import json import socket sk_client = socket.socket(type=socket.SOCK_DGRAM) server_addr = ('127.0.0.1',9112) code = 1234 while 1: content = input('>>>:').strip() if not content: continue if content.upper() == 'Q': break dic = {'code':code,'content':content} str_dic = json.dumps(dic) sk_client.sendto(str_dic.encode('utf-8'),server_addr) recv = sk_client.recv(1024).decode('utf-8') if recv.upper() == 'Q': break print(recv) sk_client.close() '''# server''' # -*- coding:utf-8 -*- import json import socket sk_server = socket.socket(type=socket.SOCK_DGRAM) sk_server.bind(('127.0.0.1',9112)) user_info = { 1234:('whw','\\033[1;32m'), 5678:('wanghw','\\033[1;31m'), } while 1: msg,addr = sk_server.recvfrom(1024) str_msg = msg.decode('utf-8') dic_msg = json.loads(str_msg) code = dic_msg['code'] content = dic_msg['content'] print('%s%s:%s'%(user_info[code][1],user_info[code][0],content)) ret = input('>>>:').strip() sk_server.sendto(ret.encode('utf-8'),addr) ## \u670d\u52a1\u5668\u4e0ddown\u673a sk_server.close() \u7c98\u5305\u7684\u89e3\u51b3\u2014\u4f20\u5927\u6587\u4ef6\u7684\u5b9e\u4f8b '''# client''' # -*- coding:utf-8 -*- import os import socket import struct import json sk = socket.socket() sk.connect(('127.0.0.1',9001)) filepath = input('>>>:').strip() filename = os.path.basename(filepath) filesize = os.path.getsize(filepath) dic = {'filename':filename,'filesize':filesize} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num = struct.pack('i',len(bytes_dic)) sk.send(num) sk.send(bytes_dic) with open(filepath,'rb')as f: while filesize > 2048: content = f.read(2048) sk.send(content) filesize -= 2048 else: content = f.read(2048) if content: sk.send(content) sk.close() '''# server''' # -*- coding:utf-8 -*- import socket import struct import json sk = socket.socket() sk.bind(('127.0.0.1',9001)) sk.listen() print('Listening...') conn,addr = sk.accept() bytes_num = conn.recv(4) num = struct.unpack('i',bytes_num)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) filename = dic['filename'] filesize = dic['filesize'] with open(filename,'wb')as f: while filesize: content = conn.recv(2048) f.write(content) ## \u6536\u7aef\u51fa\u95ee\u9898\u7684\u51e0\u7387\u5927\uff01\u7531\u4e8e\u6709\u201c\u62c6\u5305\u201d\uff0c\u56e0\u6b64\u6536\u5230\u7684\u4e0d\u4e00\u5b9a\u662f2048\u4e2a\u5b57\u8282\uff01 ## \u8fd9\u91cc\u6bcf\u6b21\u51cf\u53bb\u6536\u5230\u7684content\u7684\u957f\u5ea6\uff01 filesize -= len(content) else: content = conn.recv(2048) if content: f.write(content) \u5e76\u53d1\u7684socketserver '''client''' # -*- coding:utf-8 -*- import socket client = socket.socket() client.connect(('127.0.0.1',9000)) while 1: try: msg = client.recv(1024).decode('utf-8') print(msg) client.send('client1'.encode('utf-8')) except Exception as e: print(e) break client.close() '''server''' # -*- coding:utf-8 -*- import socketserver import time # \u5fc5\u987b\u7ee7\u627f\u8fd9\u4e2a\u7236\u7c7b class Myserver(socketserver.BaseRequestHandler): # \u5fc5\u987b\u6709\u4e00\u4e2a\u53ebhandle\u7684\u65b9\u6cd5 def handle(self): conn = self.request # \u5bf9\u4e8e \u201c\u5e76\u53d1\u7684\u6587\u4ef6\u4e0a\u4f20\u201d \u8fd9\u6837\u505a\u662f\u4e92\u4e0d\u5f71\u54cd\u7684\uff01 for i in range(200): conn.send(('hello%s'%i).encode('utf-8')) msg = conn.recv(1024) print(msg) time.sleep(0.5) if __name__ == '__main__': # \u683c\u5f0f\u662f\u56fa\u5b9a\u7684 # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u7ed1\u5b9a\u7684ip\u4e0e\u7aef\u53e3 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u81ea\u5df1\u7684\u7c7b server_obj = socketserver.ThreadingTCPServer(('127.0.0.1',9001),Myserver) server_obj.serve_forever() \u57fa\u4e8e\u539f\u751fsocket\u5b9e\u73b0\u7684\u767b\u9646\u4e0e\u5927\u6587\u4ef6\u52a0\u5bc6\u4e0a\u4f20\u5b9e\u4f8b \u76ee\u5f55\u7ed3\u6784\u5982\u4e0b -client_files -server_files -client.py -server.py -userinfo client\u7aef # -*- coding:utf-8 -*- import os import sys import json import struct import socket import hashlib # \u8fdb\u5ea6\u6761 def progress_bar(total_size, current_percent=0, last_percent=0): '''\u8fdb\u5ea6\u6761\u529f\u80fd''' while 1: received_size = yield current_percent current_percent = int(received_size / total_size * 100) if current_percent > last_percent: print(\"*\" * int(current_percent / 2) + \"{percent}%\".format(percent=current_percent), end='\\r', flush=True) # \u628a\u672c\u6b21\u5faa\u73af\u7684percent\u8d4b\u503c\u7ed9last last_percent = current_percent # \u5927\u6587\u4ef6\u7684MD5 def get_file_md5(filepath): filesize = os.path.getsize(filepath) md5 = hashlib.md5() with open(filepath,'rb')as f: while filesize > 1024: content = f.read(1024) md5.update(content) filesize -= 1024 else: content = f.read() if content: md5.update(content) return md5.hexdigest() # \u5148\u767b\u5f55 \u767b\u5f55\u6210\u529f\u540e\u518d\u8fdb\u884c\u6587\u4ef6\u7684\u4e0a\u4f20 def login(username,password,client): dic = {'operate':'login','username':username,'password':password} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num_dic = struct.pack('i',len(bytes_dic)) # \u53d1\u9001\u5b57\u8282\u5b57\u5178\u7684\u957f\u5ea6\u53ca\u5b57\u8282\u5b57\u5178 client.send(num_dic) client.send(bytes_dic) # \u63a5\u6536\u8fd4\u56de\u7684\u4fe1\u606f {'operate':'login','result':True} # \u5148\u63a5\u53d7\u5b57\u5178\u4fe1\u606f num_ret = client.recv(4) num = struct.unpack('i',num_ret)[0] str_ret = client.recv(num).decode('utf-8') ret_dic = json.loads(str_ret) # \u767b\u5f55\u6210\u529f\u7684\u8bdd\uff0cupload\u8fd8\u4f1a\u5229\u7528\u8d44\u6e90\uff0c\u8fd9\u91cc\u4e0d\u5173\u95ed if ret_dic['result']: return True else: # \u767b\u9646\u5931\u8d25\u8bb0\u5f97\u5173\u95ed\u8d44\u6e90 client.close() return False def upload(client): print('upload...') filepath = input('\u8bf7\u8f93\u5165\u4f60\u8981\u4e0a\u4f20\u7684\u6587\u4ef6\u8def\u5f84\uff1a').strip() filename = os.path.basename(filepath) filesize = os.path.getsize(filepath) # \u6587\u4ef6\u7684MD5 file_md5 = get_file_md5(filepath) # \u5efa\u5b57\u5178\u3001\u4f20\u5b57\u5178 dic = {'filename':filename,'filesize':filesize,'file_md5':file_md5} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num_dic = struct.pack('i',len(bytes_dic)) # \u53d1\u9001\u5b57\u5178\u4fe1\u606f\u53ca\u5b57\u5178 client.send(num_dic) client.send(bytes_dic) # \u5f00\u59cb\u53d1\u9001\u6587\u4ef6 with open(filepath,'rb')as f: while filesize > 1024: content = f.read(1024) client.send(content) filesize -= 1024 else: content = f.read() if content: client.send(content) # \u6700\u540e\u5173\u95ed\u8d44\u6e90 client.close() print('\u6587\u4ef6 %s \u4e0a\u4f20\u5b8c\u6210\uff01'%filename) def download(client): print('download...') filename = input('\u8bf7\u8f93\u5165\u4f60\u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\uff1a').strip() filepath = os.path.join('client_files',filename) # \u6587\u4ef6\u540d\u4f20\u7ed9server client.send(filename.encode('utf-8')) # \u4eceserver\u7aef\u6536\u7ed3\u679c\uff0c\u5982\u679c\u6709\u8fd9\u4e2a\u6587\u4ef6\u5c31\u8fdb\u884c\u64cd\u4f5c {'filesize':filesize,'file_md5':file_md5} ret_str = client.recv(1024).decode('utf-8') ret_dic = json.loads(ret_str) if ret_dic['filesize'] and ret_dic['file_md5']: filesize = ret_dic['filesize'] file_md5 = ret_dic['file_md5'] # \u8fdb\u5ea6\u6761 progress_generator = progress_bar(filesize) progress_generator.__next__() recv_size = 0 total = filesize with open(filepath,'wb')as f: while filesize > 1024: content = client.recv(1024) f.write(content) # \u6ce8\u610f \u6bcf\u6b21\u957f\u5ea6\u662f len(content) # \u56e0\u4e3a\u63a5\u6536\u7684\u4e0d\u4e00\u5b9a\u662f1024\u957f\u5ea6 \u53ef\u80fd\u4f1a\u5c0f\u4e8e\u8fd9\u4e2a\u503c filesize -= len(content) recv_size += 1024 # \u6253\u5370\u8fdb\u5ea6\u6761 progress_generator.send(recv_size) else: content = client.recv(1024) if content: f.write(content) print('---\u6587\u4ef6 [%s] \u63a5\u6536\u5b8c\u6210\uff01\u603b\u5927\u5c0f [%s]---' % (filename, total)) client.close() # md5\u6821\u9a8c if get_file_md5(filepath) == file_md5: print('\u6587\u4ef6\u4f20\u8f93\u5b8c\u6210\uff0c\u6821\u9a8c\u540e\u65e0\u8bef\uff01') else: print('\u8bf7\u6ce8\u610f\uff01\u6587\u4ef6\u7565\u6709\u635f\u574f\u54e6~') else: print('\u670d\u52a1\u7aef\u6ca1\u6709\u8fd9\u4e2a\u6587\u4ef6\uff01') client.close() if __name__ == '__main__': # \u64cd\u4f5c\u7684\u5b57\u5178 \u53cd\u5c04\u7528 operate_dic = { '1':['upload','\u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u5668'], '2':['download','\u4ece\u670d\u52a1\u5668\u7aef\u4e0b\u8f7d\u6587\u4ef6'], } username = input('\u7528\u6237\u540d\uff1a').strip() password = input('\u5bc6\u7801\uff1a').strip() # \u521b\u5efasocket\u7684\u8d44\u6e90 sk_client = socket.socket() sk_client.connect(('127.0.0.1', 9000)) res = login(username,password,sk_client) # \u5982\u679c\u767b\u5f55\u6210\u529f\u5c31\u5f00\u59cb\u9009\u62e9\u4e0a\u4f20\u8fd8\u662f\u4e0b\u8f7d if res: print('\u767b\u9646\u6210\u529f\uff01\u8bf7\u9009\u62e9\u4f60\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a') for i in operate_dic: print(i,':',operate_dic[i][1]) choice = input('\u8bf7\u9009\u62e9\u64cd\u4f5c\u7684\u5e8f\u53f7\uff1a').strip() # \u53cd\u5c04 if hasattr(sys.modules[__name__],operate_dic[choice][0]): # \u6ce8\u610f\uff0c\u628aclient\u7aef\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u53d1\u7ed9server\u7aef\uff0c\u8ba9\u4ed6\u505a\u597d\u5bf9\u5e94\u7684\u64cd\u4f5c\uff01 operate_str = operate_dic[choice][0] sk_client.send(operate_str.encode('utf-8')) # \u7136\u540eclient\u7aef\u8fdb\u884c\u5bf9\u5e94\u7684\u64cd\u4f5c method = getattr(sys.modules[__name__],operate_dic[choice][0]) method(sk_client) else: print('\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u64cd\u4f5c\u5e8f\u53f7\uff01') else: print('\u767b\u9646\u5931\u8d25\uff01') server\u7aef # -*- coding:utf-8 -*- import os import sys import json import struct import socket import hashlib def get_md5(username,password): md5 = hashlib.md5(username.encode('utf-8')) md5.update(password.encode('utf-8')) return md5.hexdigest() # \u5927\u6587\u4ef6\u7684MD5 def get_file_md5(filepath): filesize = os.path.getsize(filepath) md5 = hashlib.md5() with open(filepath,'rb')as f: while filesize > 1024: content = f.read(1024) md5.update(content) filesize -= 1024 else: content = f.read() if content: md5.update(content) return md5.hexdigest() def login(username,password): ## whw 123 with open('userinfo','r',encoding='utf-8')as f: for line in f: user,pwd = line.strip().split('|') if user == username and pwd == get_md5(username,password): return {'operate':'login','result':True} else: return {'operate':'login','result':False} def upload(conn): print('upload...') # \u63a5\u6536\u5b57\u5178\u7684\u957f\u5ea6\u4e0e\u5b57\u5178 num_dic = conn.recv(4) num = struct.unpack('i',num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) # \u5f97\u5230\u76f8\u5173\u4fe1\u606f filename = dic['filename'] filesize = dic['filesize'] # \u5f00\u59cb\u63a5\u6536\u6587\u4ef6 with open(filename,'wb')as f: while filesize > 1024: content = conn.recv(1024) f.write(content) # \u6ce8\u610f\u6bcf\u6b21\u6536\u5230\u4e0d\u4e00\u5b9a\u662f1024\uff01 # \u56e0\u6b64\u8fd9\u91cc\u7528content\u7684\u957f\u5ea6\u505a\u51cf\u6cd5\uff01 filesize -= len(content) else: content = conn.recv(1024) if content: f.write(content) # \u8fdb\u884c\u6587\u4ef6\u7684MD5\u6821\u9a8c file_md5 = get_file_md5(filename) if file_md5 == dic['file_md5']: print('\u6587\u4ef6 %s \u4e0a\u4f20\u6210\u529f\uff01\u6821\u9a8c\u65e0\u8bef!' % filename) # \u6700\u540e\u8bb0\u5f97\u5173\u95ed\u8d44\u6e90 conn.close() def download(conn): print('download...') # \u4ececlient\u7aef\u63a5\u6536\u6587\u4ef6\u540d filename = conn.recv(1024).decode('utf-8') file_path = os.path.join('server_files', filename) filesize = None if filename in os.listdir('server_files'): filesize = os.path.getsize(file_path) file_md5 = get_file_md5(file_path) dic = {'filesize': filesize, 'file_md5': file_md5} else: dic = {'filesize':None,'file_md5':None} # \u628a\u8fd9\u4e2a\u5b57\u5178\u4f20\u7ed9client\uff0c\u8ba9\u5b83\u786e\u8ba4\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u4e0b\u8f7d\u4e86 str_dic = json.dumps(dic) conn.send(str_dic.encode('utf-8')) # \u5982\u679c\u6709\u8fd9\u4e2a\u6587\u4ef6\u8868\u793a\u53ef\u4ee5\u4e0b\u8f7d\u4e86\uff0cserver\u5f00\u59cb\u7ed9\u4ed6\u4f20 if dic['filesize'] and dic['file_md5']: with open(file_path,'rb')as f: while filesize > 1024: content = f.read(1024) conn.send(content) else: content = f.read() if content: conn.send(content) # \u6700\u540e\u8bb0\u5f97\u5173\u95edconn conn.close() else: print('\u5ba2\u6237\u7aef %s \u8bd5\u56fe\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25'%(addr,)) conn.close() if __name__ == '__main__': server = socket.socket() server.bind(('127.0.0.1',9000)) server.listen() print('listening......') while 1: conn,addr = server.accept() # \u5148\u6536\u5b57\u5178\u957f\u5ea6\u518d\u6536\u5b57\u5178 bytes_num = conn.recv(4) num = struct.unpack('i',bytes_num)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) ret = login(dic['username'],dic['password']) # \u8fd4\u56de\u7ed9client str_ret = json.dumps(ret) bytes_ret = str_ret.encode('utf-8') num_ret = struct.pack('i',len(bytes_ret)) # \u5148\u53d1\u5b57\u8282\u5b57\u5178\u7684\u957f\u5ea6\u518d\u53d1\u5b57\u8282\u5b57\u5178 conn.send(num_ret) conn.send(bytes_ret) # \u767b\u9646\u6210\u529fupload\u4e0edownload\u8fd8\u4f1a\u7528\u5230conn\uff0c\u5148\u4e0d\u5173\u95ed if ret['result']: #\u4ececlient\u7aef\u6536\u4e00\u4e0b \u5230\u5e95\u662f\u8fdb\u884c\u4ec0\u4e48\u64cd\u4f5c\u5427 str_operate = conn.recv(1024).decode('utf-8') # \u7528\u53cd\u5c04\u83b7\u53d6 if hasattr(sys.modules[__name__],str_operate): method = getattr(sys.modules[__name__],str_operate) method(conn) else: # \u6ce8\u610f\u8fd9\u91cc\u662f\u5355\u4e2a\u5143\u7ec4\u7684\u4f20\u53c2\uff01 print('\u5ba2\u6237\u7aef %s \u767b\u5f55\u5931\u8d25'%(addr,)) # \u767b\u5f55\u5931\u8d25\u7684\u8bdd\u65ad\u5f00\u5f53\u524d\u8fde\u63a5 conn.close() \u57fa\u4e8esocketserver\u7684\u5e76\u53d1\u7684\u6587\u4ef6\u4e0a\u4f20\u5b9e\u4f8b '''client''' # -*- coding:utf-8 -*- import os import json import struct import socket filepath = input('\u8bf7\u8f93\u5165\u6587\u4ef6\u8def\u5f84\uff1a').strip() filename = os.path.basename(filepath) filesize = os.path.getsize(filepath) # \u6784\u5efa\u5b57\u5178 \u5e76 \u6c42\u51fa\u4f20\u8f93\u6240\u9700\u7684\u53c2\u6570 dic = {'filename':filename,'filesize':filesize} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num_dic = struct.pack('i',len(bytes_dic)) # \u51c6\u5907\u5e76\u4f20\u8f93 sk_client = socket.socket() sk_client.connect(('127.0.0.1',9000)) sk_client.send(num_dic) sk_client.send(bytes_dic) # \u5f00\u59cb\u4e0a\u4f20\u6587\u4ef6 with open(filepath,'rb')as f: while filesize > 1024: content = f.read(1024) sk_client.send(content) filesize -= 1024 else: content = f.read() if content: sk_client.send(content) # \u5173\u95ed\u8d44\u6e90 sk_client.close() '''server''' # -*- coding:utf-8 -*- import json import struct import socketserver class MyServer(socketserver.BaseRequestHandler): def handle(self): while 1: conn = self.request # \u63a5\u6536\u5e26\u4fe1\u606f\u7684\u5b57\u5178 \u5148\u63a5\u6536\u957f\u5ea6 num_dic = conn.recv(4) # \u6ce8\u610f\u53d6\u5230\u7684\u662f\u5143\u7ec4 \u9700\u8981\u53d6\u7d22\u5f15\u4e3a0\u7684\u5143\u7d20\u624d\u80fd\u62ff\u5230\u6570\u5b57\uff01 num = struct.unpack('i',num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) filename = dic['filename'] filesize = dic['filesize'] # \u5f00\u59cb\u63a5\u6536\u6570\u636e with open(filename,'wb')as f: while filesize > 1024: content = conn.recv(1024) f.write(content) # \u6ce8\u610f \u6536\u5230\u7684\u4e0d\u4e00\u5b9a\u662f1024\u957f\u5ea6 \u56e0\u6b64\u8fd9\u91cc\u6bcf\u6b21\u51cfcontent\u7684\u957f\u5ea6 filesize -= len(content) else: # \u6bcf\u6b21\u6536\u5230\u4e0d\u4e00\u5b9a\u662f1024 \u56e0\u6b64\u8fd9\u91cc\u6bcf\u6b21\u51cfcontent\u7684\u957f\u5ea6 content = conn.recv(1024) if content: f.write(content) conn.close() if __name__ == '__main__': ser_obj = socketserver.ThreadingTCPServer(('127.0.0.1',9000),MyServer) ser_obj.serve_forever() \u4e0a\u4f20+\u4e0b\u8f7d+\u751f\u6210\u5668 \u76ee\u5f55\u7ed3\u6784 -download -upload -client.py -server.py userinfo client # -*- coding:utf-8 -*- import os import json import socket import struct download_path = r'E:\\practice\\old_boy_all_day\\all_days\\day31-\u4e0b\u8f7d\u4e0e\u6821\u9a8c\\download' username = input('username:').strip() password = input('password:').strip() dic = {'username':username,'password':password,'opt':'login'} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num_dic = struct.pack('i',len(bytes_dic)) sk = socket.socket() sk.connect(('127.0.0.1',9001)) sk.send(num_dic) sk.send(bytes_dic) str_ret = sk.recv(1024).decode('utf-8') ret_dic = json.loads(str_ret) if ret_dic['flag']: print('\u767b\u9646\u6210\u529f\uff01') else: print('\u767b\u9646\u5931\u8d25\uff01') #\u9009\u62e9 \u4e0a\u4f20 \u8fd8\u662f \u4e0b\u8f7d #\u9ed8\u8ba4\u53c2\u6570\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 # \u7528\u81ea\u5b9a\u4e49\u534f\u8bae\u4f20\u5b57\u5178\u5199\u4e00\u4e2a\u51fd\u6570 ############################################################ def pro_send(sk,dic,pro=True): str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') if pro: num_dic = struct.pack('i', len(bytes_dic)) sk.send(num_dic) sk.send(bytes_dic) def upload(sk): filepath = input('\u6587\u4ef6\u8def\u5f84\uff1a').strip() if os.path.isfile(filepath): filename = os.path.basename(filepath) filesize = os.path.getsize(filepath) dic = {'filename':filename,'filesize':filesize,'operate':'upload'} pro_send(sk,dic) ################################################################## with open(filepath,'rb')as f: while filesize > 2048: content = f.read(2048) sk.send(content) filesize -= 2048 else: content = f.read() if content: sk.send(content) print('\u4e0a\u4f20\u6210\u529f\uff01') def pro_recv(conn): ######################### \u6839\u636e\u534f\u8bae\u63a5\u6536################################### num_dic = conn.recv(4) # \u6ce8\u610funpack\u5f97\u5230\u7684\u662f\u5143\u7ec4\uff01\uff01\uff01 num = struct.unpack('i', num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) return dic def download(sk): # \u5148\u53d1\u9001\u8981\u4e0b\u8f7d\u6587\u4ef6\u7684\u540d\u5b57 # server\u56de\u590d\uff1a\u662f\u5426\u5b58\u5728\uff0c\u6587\u4ef6\u5927\u5c0f # \u6839\u636e\u6587\u4ef6\u5927\u5c0f\u6765\u63a5\u6536\u6587\u4ef6 \u6536\u5230\u7684\u6587\u4ef6\u5b58\u5728download\u6587\u4ef6\u4ef6\u4e0b filename = input('\u6587\u4ef6\u540d\uff1a').strip() dic = {'filename': filename, 'operate': 'download'} # \u4e0d\u7528\u81ea\u5b9a\u4e49\u534f\u8bae # \u9ed8\u8ba4\u53c2\u6570\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 pro_send(sk,dic) ret = pro_recv(sk) # dic = {'filesize':filesize,'exist':True} if ret['exist']: filepath = os.path.join('download',filename) with open(filepath, 'wb')as f: while ret['filesize']: content = sk.recv(2048) f.write(content) ret['filesize'] -= len(content) else: content = sk.recv(2048) if content: f.write(content) print('\u4e0b\u8f7d\u6210\u529f\uff01') else: print('\u6587\u4ef6\u4e0d\u5b58\u5728\uff01') operate = [('\u4e0a\u4f20',upload),('\u4e0b\u8f7d',download)] for k,v in enumerate(operate,1): print(k,v[0]) num = input('\u8bf7\u8f93\u5165\u60a8\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a').strip() opt = operate[int(num)-1][1] opt(sk) server # -*- coding:utf-8 -*- import os import sys import json import struct import socket import hashlib uploadpath = r'E:\\practice\\old_boy_all_day\\all_days\\day31-\u4e0b\u8f7d\u4e0e\u6821\u9a8c\\upload' #\u9ed8\u8ba4\u53c2\u6570\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 # \u4f4d\u81ea\u5b9a\u4e49\u534f\u8bae\u4f20\u5b57\u5178\u5199\u4e00\u4e2a\u51fd\u6570 ######## def pro_send(sk,dic,pro=True): str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') if pro: num_dic = struct.pack('i', len(bytes_dic)) sk.send(num_dic) sk.send(bytes_dic) def pro_recv(conn): ####### \u6839\u636e\u534f\u8bae\u63a5\u6536 num_dic = conn.recv(4) # \u6ce8\u610funpack\u5f97\u5230\u7684\u662f\u5143\u7ec4\uff01\uff01\uff01 num = struct.unpack('i', num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) return dic def get_md5(username,password): md5 = hashlib.md5(username.encode('utf-8')) md5.update(password.encode('utf-8')) return md5.hexdigest() def login(conn): num_dic = conn.recv(4) # \u6ce8\u610funpack\u5f97\u5230\u7684\u662f\u5143\u7ec4\uff01\uff01\uff01 num = struct.unpack('i', num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) username = dic['username'] password = dic['password'] with open('userinfo', 'r', encoding='utf-8')as f: for line in f: usr, pwd = line.strip().split('|') if usr == username and pwd == get_md5(username, password): return {'opt':'login','flag':True} else: return {'opt': 'login', 'flag': False} def upload(conn,dic): filepath = os.path.join('upload',dic['filename']) with open(filepath,'wb')as f: while dic['filesize']: content = conn.recv(2048) f.write(content) dic['filesize'] -= len(content) else: content = conn.recv(2048) if content: f.write(content) def download(conn,dic): path = os.path.join(uploadpath,dic['filename']) if os.path.isfile(path): filesize = os.path.getsize(path) dic = {'filesize':filesize,'exist':True} # \u6587\u4ef6\u5b58\u5728 # \u5148\u53d1\u5b57\u5178 \u518d\u53d1\u6587\u4ef6 pro_send(conn,dic) with open(path,'rb')as f: while filesize > 2048: content = f.read(2048) conn.send(content) filesize -= 2048 else: content = f.read() if content: conn.send(content) else: # \u6587\u4ef6\u4e0d\u5b58\u5728 # \u5148\u53d1\u5b57\u5178 \u518d\u7ed3\u675f dic = {'filesize': None, 'exist': True} pro_send(conn, dic) conn.close() if __name__ == '__main__': sk = socket.socket() sk.bind(('127.0.0.1',9001)) sk.listen() print('listening......') conn,addr = sk.accept() ret = login(conn) # \u53ef\u4ee5\u4e0d\u81ea\u5b9a\u4e49\u534f\u8bae ret_str = json.dumps(ret) conn.send(ret_str.encode('utf-8')) if ret['flag']: # \u767b\u9646\u6210\u529f dic = pro_recv(conn) ################# {'filename':filename,'filesize':filesize,'operate':'upload'} ############################### if hasattr(sys.modules[__name__],dic['operate']): method = getattr(sys.modules[__name__],dic['operate']) method(conn,dic) else: conn.close() \u81ea\u5df1\u5b9e\u73b0\u7684\u4e00\u4e2a\u5355\u8fdb\u7a0b\u7684FTP\u670d\u52a1\u5668 https://github.com/Wanghongw/FTP","title":"04 Python\u4e2d\u539f\u751fsocket\u7684\u6848\u4f8b"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#sendsendall","text":"\u5b98\u65b9\u6587\u6863\u5bf9socket\u6a21\u5757\u4e0b\u7684socket.send()\u548csocket.sendall()\u89e3\u91ca\u5982\u4e0b\uff1a socket.send(string[, flags]) Send data to the socket. The socket must be connected to a remote socket. The optional flags argument has the same meaning as for recv() above. Returns the number of bytes sent. Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. send()\u7684\u8fd4\u56de\u503c\u662f\u53d1\u9001\u7684\u5b57\u8282\u6570\u91cf\uff0c\u8fd9\u4e2a\u6570\u91cf\u503c\u53ef\u80fd\u5c0f\u4e8e\u8981\u53d1\u9001\u7684string\u7684\u5b57\u8282\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u80fd\u65e0\u6cd5\u53d1\u9001string\u4e2d\u6240\u6709\u7684\u6570\u636e\u3002 \u5982\u679c\u6709\u9519\u8bef\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 socket.sendall(string[, flags]) Send data to the socket. The socket must be connected to a remote socket. The optional flags argument has the same meaning as for recv() above. Unlike send(), this method continues to send data from string until either all data has been sent or an error occurs. None is returned on success. On error, an exception is raised, and there is no way to determine how much data, if any, was successfully sent. \u5c1d\u8bd5\u53d1\u9001string\u7684\u6240\u6709\u6570\u636e\uff0c\u6210\u529f\u5219\u8fd4\u56deNone\uff0c\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38\u3002 \u6545\uff0c\u4e0b\u9762\u4e24\u6bb5\u4ee3\u7801\u662f\u7b49\u4ef7\u7684\uff1a # 1\u3001sendall sock.sendall('Hello world\\n') # 2\u3001send buffer = 'Hello world\\n' while buffer: bytes = sock.send(buffer) buffer = buffer[bytes:]","title":"send\u4e0esendall"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#socket","text":"'''# client''' # -*- coding:utf-8 -*- import socket sk = socket.socket() # \u5bf9\u65b9\u670d\u52a1\u5668\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\u53f7 sk.connect(('192.168.16.166',8004)) while 1: send = input('>>>:').strip() if not send: continue elif send.upper() == 'Q': # \u9000\u51fa\u524d\u7ed9sever\u7aef\u53d1\u4fe1\u53f7 \u8ba9\u4ed6\u4e5f\u5173\u95ed sk.send(send.encode('utf-8')) print('\u8fde\u63a5\u5173\u95ed\uff01') break sk.send(send.encode('utf-8')) msg = sk.recv(1024).decode('utf-8') if msg.upper() == 'Q': print('\u8fde\u63a5\u5173\u95ed\uff01') break print('\u670d\u52a1\u5668\u7aef\u6570\u636e\uff1a',msg) sk.close() '''# server''' # -*- coding:utf-8 -*- import socket sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u5728\u7ed1\u5b9a\u524d\u8c03\u7528setsockopt\u8ba9\u5957\u63a5\u5b57\u5141\u8bb8\u5730\u5740\u91cd\u590d\u5229\u7528 sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # \u672c\u673a\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\u53f7 sk.bind(('192.168.16.79',9001)) sk.listen(100) print('\u6b63\u5728\u7b49\u5f85\u5ba2\u6237\u7aef\u53d1\u6765\u4fe1\u606f......') conn,addr = sk.accept() while 1: # \u5ba2\u6237\u7aef\u5f3a\u5236\u5173\u95ed\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u6240\u4ee5\u7528\u5f02\u5e38\u5904\u7406 try: ## \u901a\u4fe1\u5faa\u73af msg = conn.recv(1024).decode('utf-8') if msg.upper() == 'Q': print('\u8fde\u63a5\u5173\u95ed\uff01') break print('\u5ba2\u6237\u7aef\u6570\u636e\uff1a',msg) send = input('>>>::').strip() if not send: continue if send.upper() == 'Q': # \u9000\u51fa\u524d\u7ed9client\u7aef\u53d1\u4fe1\u53f7\uff0c\u8ba9\u4ed6\u4e5f\u5173\u95ed conn.send(send.encode('utf-8')) print('\u8fde\u63a5\u5173\u95ed\uff01') break conn.send(send.encode('utf-8')) except ConnectionResetError: print('\u5ba2\u6237\u7aef\u5f3a\u5236\u9000\u51fa\u7a0b\u5e8f\uff0c\u8fde\u63a5\u5173\u95ed\uff01') break conn.close() sk.close() ''' # \u8bf4\u660e \u603b\u662fclient\u7aef\u5148\u53d1\u9001\u6570\u636e\uff0c\u800cserver\u7aef\u5148\u63a5\u53d7\u6570\u636e\u7684\uff1b server\u7aef\u542f\u52a8\u540e\u603b\u662f\u5728\u76d1\u542c\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u4fe1\u606f\uff0c\u56e0\u6b64server\u8d77\u521d\u90fd\u662f\u5148\u63a5\u53d7\u6570\u636e\u7684\uff0c \u800c\u4e14\u4e00\u5f00\u59cb\u8ba9server\u7aef\u53d1\u9001\u7684\u8bdd\u4ed6\u4e5f\u4e0d\u77e5\u9053\u76ee\u6807\u5728\u54ea\u91cc\u3002 '''","title":"\u7b80\u5355\u7684socket\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#tcp","text":"'''# client''' # -*- coding:utf-8 -*- import socket sk_client = socket.socket() sk_client.connect(('127.0.0.1',9000)) while 1: rec = sk_client.recv(1024).decode('utf-8') # \u670d\u52a1\u7aef\u4e3b\u52a8\u65ad\u5f00\u94fe\u63a5 if rec.upper() == 'Q': break print('\u670d\u52a1\u5668\u6570\u636e\uff1a%s'%rec) msg = input('>>>:').strip() #\u5982\u679c\u8f93\u5165Q \u76f4\u63a5\u9000\u51fa \u4e5f\u4e0d\u7ed9server\u53d1\u9001\u4fe1\u606f\u4e86 if msg.upper() == 'Q': break sk_client.send(msg.encode('utf-8')) '''# server''' # -*- coding:utf-8 -*- import socket sk_server = socket.socket() sk_server.bind(('127.0.0.1',9000)) sk_server.listen() print('Listening......') while 1: conn,addr = sk_server.accept() while 1: msg = input('>>>').strip() conn.send(msg.encode('utf-8')) # \u670d\u52a1\u5668\u4e3b\u52a8\u8ddf\u6b63\u5728\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u5173\u95ed\u8fde\u63a5 if msg.upper() == 'Q': break ret = conn.recv(1024).decode('utf-8') print('\u5ba2\u6237\u7aef %s \u6570\u636e\uff1a%s'%(addr,ret)) conn.close() # \u670d\u52a1\u56687*24\u5c0f\u65f6\u8fd0\u884c\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e0d\u5173\u95ed\u670d\u52a1\u5668","title":"TCP\u6a21\u578b"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#udp","text":"'''# client''' # -*- coding:utf-8 -*- import socket sk_client = socket.socket(type=socket.SOCK_DGRAM) server_addr = ('127.0.0.1',9000) while 1: cout = input('>>>:').strip() # \u5373\u4f7f\u8f93\u5165q \u4e5f\u8981\u53d1\u7ed9\u670d\u52a1\u5668 \u670d\u52a1\u5668\u7aef\u6709\u5224\u65ad-\u4f60\u8ddf\u4ed6\u65ad\u5f00\u4e86\u8fde\u63a5 sk_client.sendto(cout.encode('utf-8'),server_addr) if cout.upper() == 'Q': break print('\u7ed9\u670d\u52a1\u5668\u53d1\u9001\u4e86\u4fe1\u606f\uff1a%s'%cout) msg = sk_client.recv(1024).decode('utf-8') if msg.upper() == 'Q': break print('\u4ece\u670d\u52a1\u5668\u7aef\u63a5\u6536\u5230\u6570\u636e\uff1a%s'%msg) sk_client.close() '''# server''' # -*- coding:utf-8 -*- import socket sk_server = socket.socket(type=socket.SOCK_DGRAM) sk_server.bind(('127.0.0.1',9000)) while 1: msg,c_addr = sk_server.recvfrom(1024) if msg.decode('utf-8').upper() == 'Q': ## \u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5143\u7ec4\u7684\u5751\uff01 print('\u5ba2\u6237\u7aef %s \u4e0e\u4f60\u65ad\u5f00\u4e86\u8fde\u63a5'%(c_addr,)) continue print('\u4ece\u5ba2\u6237\u7aef %s \u6536\u5230\u6d88\u606f\uff1a%s'%(c_addr,msg.decode('utf-8'))) cout = input('>>>:') sk_server.sendto(cout.encode('utf-8'),c_addr) if cout.upper() == 'Q': # ## \u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5143\u7ec4\u7684\u5751\uff01 print('\u5df2\u7ed9\u5ba2\u6237\u7aef %s \u53d1\u9001\u65ad\u5f00\u8fde\u63a5\u6307\u4ee4'%(c_addr,)) continue print('\u7ed9\u5ba2\u6237\u7aef %s \u53d1\u9001\u4e86\u4fe1\u606f\uff1a%s'%(c_addr,cout)) # \u670d\u52a1\u5668\u4e0d\u505c\u6b62 \u6240\u4ee5\u4e0d\u7ed9\u4ed6close","title":"UDP\u6a21\u578b"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#tcp_1","text":"'''# client''' # -*- coding:utf-8 -*- import json import socket count = 0 while count < 3: username = input('\u7528\u6237\u540d\uff1a').strip() password = input('\u5bc6 \u7801\uff1a').strip() sk_client = socket.socket() sk_client.connect(('127.0.0.1',9005)) dic = { 'operate':'login', 'username':username, 'password':password, } # \u7528json\u53d8\u6210str\u7c7b\u578b\u7684 \u65b9\u4fbf\u7f51\u7edc\u4f20\u8f93 str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') sk_client.send(bytes_dic) # \u4ece\u670d\u52a1\u5668\u7aef\u63a5\u6536\u7ed3\u679c str_dic_res = sk_client.recv(1024).decode('utf-8') dic_res = json.loads(str_dic_res) if dic_res['result']: print('\u767b\u9646\u6210\u529f\uff01') sk_client.close() break else: print('\u767b\u5f55\u5931\u8d25\uff01') sk_client.close() '''# server''' # -*- coding:utf-8 -*- import sys import json import socket import hashlib def get_md5(username,password): md5 = hashlib.md5(username.encode('utf-8')) md5.update(password.encode('utf-8')) return md5.hexdigest() def login(dic): with open('userinfo','r')as f: for line in f: usr,pwd = line.strip().split('|') if usr == dic['username'] and pwd == get_md5(dic['username'],dic['password']): return {'operate':'login','result':True} else: return {'operate':'login','result':False} if __name__ == '__main__': sk_server = socket.socket() sk_server.bind(('127.0.0.1',9005)) sk_server.listen() print('\u7b49\u5f85\u5ba2\u6237\u7aef\u5efa\u7acb\u8fde\u63a5......') while 1: conn,addr = sk_server.accept() str_dic = conn.recv(1024).decode('utf-8') dic = json.loads(str_dic) # \u53cd\u5c04 if hasattr(sys.modules[__name__],dic['operate']): l = getattr(sys.modules[__name__],dic['operate']) ret = l(dic) bytes_ret = json.dumps(ret).encode('utf-8') conn.send(bytes_ret) conn.close() # \u6a21\u62dfserver\u7aef\u4e0ddown\u673a \u4e0b\u9762\u4e0d\u4f1a\u6267\u884c sk_server.close()","title":"\u57fa\u4e8eTCP\u7684\u767b\u9646\u2014\u7528\u5230\u53cd\u5c04"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#udp_1","text":"'''# client''' # -*- coding:utf-8 -*- import json import socket sk_client = socket.socket(type=socket.SOCK_DGRAM) server_addr = ('127.0.0.1',9112) code = 1234 while 1: content = input('>>>:').strip() if not content: continue if content.upper() == 'Q': break dic = {'code':code,'content':content} str_dic = json.dumps(dic) sk_client.sendto(str_dic.encode('utf-8'),server_addr) recv = sk_client.recv(1024).decode('utf-8') if recv.upper() == 'Q': break print(recv) sk_client.close() '''# server''' # -*- coding:utf-8 -*- import json import socket sk_server = socket.socket(type=socket.SOCK_DGRAM) sk_server.bind(('127.0.0.1',9112)) user_info = { 1234:('whw','\\033[1;32m'), 5678:('wanghw','\\033[1;31m'), } while 1: msg,addr = sk_server.recvfrom(1024) str_msg = msg.decode('utf-8') dic_msg = json.loads(str_msg) code = dic_msg['code'] content = dic_msg['content'] print('%s%s:%s'%(user_info[code][1],user_info[code][0],content)) ret = input('>>>:').strip() sk_server.sendto(ret.encode('utf-8'),addr) ## \u670d\u52a1\u5668\u4e0ddown\u673a sk_server.close()","title":"\u57fa\u4e8eUDP\u7684\u804a\u5929\u2014\u52a0\u6807\u8bc6"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#_1","text":"'''# client''' # -*- coding:utf-8 -*- import os import socket import struct import json sk = socket.socket() sk.connect(('127.0.0.1',9001)) filepath = input('>>>:').strip() filename = os.path.basename(filepath) filesize = os.path.getsize(filepath) dic = {'filename':filename,'filesize':filesize} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num = struct.pack('i',len(bytes_dic)) sk.send(num) sk.send(bytes_dic) with open(filepath,'rb')as f: while filesize > 2048: content = f.read(2048) sk.send(content) filesize -= 2048 else: content = f.read(2048) if content: sk.send(content) sk.close() '''# server''' # -*- coding:utf-8 -*- import socket import struct import json sk = socket.socket() sk.bind(('127.0.0.1',9001)) sk.listen() print('Listening...') conn,addr = sk.accept() bytes_num = conn.recv(4) num = struct.unpack('i',bytes_num)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) filename = dic['filename'] filesize = dic['filesize'] with open(filename,'wb')as f: while filesize: content = conn.recv(2048) f.write(content) ## \u6536\u7aef\u51fa\u95ee\u9898\u7684\u51e0\u7387\u5927\uff01\u7531\u4e8e\u6709\u201c\u62c6\u5305\u201d\uff0c\u56e0\u6b64\u6536\u5230\u7684\u4e0d\u4e00\u5b9a\u662f2048\u4e2a\u5b57\u8282\uff01 ## \u8fd9\u91cc\u6bcf\u6b21\u51cf\u53bb\u6536\u5230\u7684content\u7684\u957f\u5ea6\uff01 filesize -= len(content) else: content = conn.recv(2048) if content: f.write(content)","title":"\u7c98\u5305\u7684\u89e3\u51b3\u2014\u4f20\u5927\u6587\u4ef6\u7684\u5b9e\u4f8b"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#socketserver","text":"'''client''' # -*- coding:utf-8 -*- import socket client = socket.socket() client.connect(('127.0.0.1',9000)) while 1: try: msg = client.recv(1024).decode('utf-8') print(msg) client.send('client1'.encode('utf-8')) except Exception as e: print(e) break client.close() '''server''' # -*- coding:utf-8 -*- import socketserver import time # \u5fc5\u987b\u7ee7\u627f\u8fd9\u4e2a\u7236\u7c7b class Myserver(socketserver.BaseRequestHandler): # \u5fc5\u987b\u6709\u4e00\u4e2a\u53ebhandle\u7684\u65b9\u6cd5 def handle(self): conn = self.request # \u5bf9\u4e8e \u201c\u5e76\u53d1\u7684\u6587\u4ef6\u4e0a\u4f20\u201d \u8fd9\u6837\u505a\u662f\u4e92\u4e0d\u5f71\u54cd\u7684\uff01 for i in range(200): conn.send(('hello%s'%i).encode('utf-8')) msg = conn.recv(1024) print(msg) time.sleep(0.5) if __name__ == '__main__': # \u683c\u5f0f\u662f\u56fa\u5b9a\u7684 # \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u7ed1\u5b9a\u7684ip\u4e0e\u7aef\u53e3 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u81ea\u5df1\u7684\u7c7b server_obj = socketserver.ThreadingTCPServer(('127.0.0.1',9001),Myserver) server_obj.serve_forever()","title":"\u5e76\u53d1\u7684socketserver"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#socket_1","text":"\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b -client_files -server_files -client.py -server.py -userinfo client\u7aef # -*- coding:utf-8 -*- import os import sys import json import struct import socket import hashlib # \u8fdb\u5ea6\u6761 def progress_bar(total_size, current_percent=0, last_percent=0): '''\u8fdb\u5ea6\u6761\u529f\u80fd''' while 1: received_size = yield current_percent current_percent = int(received_size / total_size * 100) if current_percent > last_percent: print(\"*\" * int(current_percent / 2) + \"{percent}%\".format(percent=current_percent), end='\\r', flush=True) # \u628a\u672c\u6b21\u5faa\u73af\u7684percent\u8d4b\u503c\u7ed9last last_percent = current_percent # \u5927\u6587\u4ef6\u7684MD5 def get_file_md5(filepath): filesize = os.path.getsize(filepath) md5 = hashlib.md5() with open(filepath,'rb')as f: while filesize > 1024: content = f.read(1024) md5.update(content) filesize -= 1024 else: content = f.read() if content: md5.update(content) return md5.hexdigest() # \u5148\u767b\u5f55 \u767b\u5f55\u6210\u529f\u540e\u518d\u8fdb\u884c\u6587\u4ef6\u7684\u4e0a\u4f20 def login(username,password,client): dic = {'operate':'login','username':username,'password':password} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num_dic = struct.pack('i',len(bytes_dic)) # \u53d1\u9001\u5b57\u8282\u5b57\u5178\u7684\u957f\u5ea6\u53ca\u5b57\u8282\u5b57\u5178 client.send(num_dic) client.send(bytes_dic) # \u63a5\u6536\u8fd4\u56de\u7684\u4fe1\u606f {'operate':'login','result':True} # \u5148\u63a5\u53d7\u5b57\u5178\u4fe1\u606f num_ret = client.recv(4) num = struct.unpack('i',num_ret)[0] str_ret = client.recv(num).decode('utf-8') ret_dic = json.loads(str_ret) # \u767b\u5f55\u6210\u529f\u7684\u8bdd\uff0cupload\u8fd8\u4f1a\u5229\u7528\u8d44\u6e90\uff0c\u8fd9\u91cc\u4e0d\u5173\u95ed if ret_dic['result']: return True else: # \u767b\u9646\u5931\u8d25\u8bb0\u5f97\u5173\u95ed\u8d44\u6e90 client.close() return False def upload(client): print('upload...') filepath = input('\u8bf7\u8f93\u5165\u4f60\u8981\u4e0a\u4f20\u7684\u6587\u4ef6\u8def\u5f84\uff1a').strip() filename = os.path.basename(filepath) filesize = os.path.getsize(filepath) # \u6587\u4ef6\u7684MD5 file_md5 = get_file_md5(filepath) # \u5efa\u5b57\u5178\u3001\u4f20\u5b57\u5178 dic = {'filename':filename,'filesize':filesize,'file_md5':file_md5} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num_dic = struct.pack('i',len(bytes_dic)) # \u53d1\u9001\u5b57\u5178\u4fe1\u606f\u53ca\u5b57\u5178 client.send(num_dic) client.send(bytes_dic) # \u5f00\u59cb\u53d1\u9001\u6587\u4ef6 with open(filepath,'rb')as f: while filesize > 1024: content = f.read(1024) client.send(content) filesize -= 1024 else: content = f.read() if content: client.send(content) # \u6700\u540e\u5173\u95ed\u8d44\u6e90 client.close() print('\u6587\u4ef6 %s \u4e0a\u4f20\u5b8c\u6210\uff01'%filename) def download(client): print('download...') filename = input('\u8bf7\u8f93\u5165\u4f60\u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\uff1a').strip() filepath = os.path.join('client_files',filename) # \u6587\u4ef6\u540d\u4f20\u7ed9server client.send(filename.encode('utf-8')) # \u4eceserver\u7aef\u6536\u7ed3\u679c\uff0c\u5982\u679c\u6709\u8fd9\u4e2a\u6587\u4ef6\u5c31\u8fdb\u884c\u64cd\u4f5c {'filesize':filesize,'file_md5':file_md5} ret_str = client.recv(1024).decode('utf-8') ret_dic = json.loads(ret_str) if ret_dic['filesize'] and ret_dic['file_md5']: filesize = ret_dic['filesize'] file_md5 = ret_dic['file_md5'] # \u8fdb\u5ea6\u6761 progress_generator = progress_bar(filesize) progress_generator.__next__() recv_size = 0 total = filesize with open(filepath,'wb')as f: while filesize > 1024: content = client.recv(1024) f.write(content) # \u6ce8\u610f \u6bcf\u6b21\u957f\u5ea6\u662f len(content) # \u56e0\u4e3a\u63a5\u6536\u7684\u4e0d\u4e00\u5b9a\u662f1024\u957f\u5ea6 \u53ef\u80fd\u4f1a\u5c0f\u4e8e\u8fd9\u4e2a\u503c filesize -= len(content) recv_size += 1024 # \u6253\u5370\u8fdb\u5ea6\u6761 progress_generator.send(recv_size) else: content = client.recv(1024) if content: f.write(content) print('---\u6587\u4ef6 [%s] \u63a5\u6536\u5b8c\u6210\uff01\u603b\u5927\u5c0f [%s]---' % (filename, total)) client.close() # md5\u6821\u9a8c if get_file_md5(filepath) == file_md5: print('\u6587\u4ef6\u4f20\u8f93\u5b8c\u6210\uff0c\u6821\u9a8c\u540e\u65e0\u8bef\uff01') else: print('\u8bf7\u6ce8\u610f\uff01\u6587\u4ef6\u7565\u6709\u635f\u574f\u54e6~') else: print('\u670d\u52a1\u7aef\u6ca1\u6709\u8fd9\u4e2a\u6587\u4ef6\uff01') client.close() if __name__ == '__main__': # \u64cd\u4f5c\u7684\u5b57\u5178 \u53cd\u5c04\u7528 operate_dic = { '1':['upload','\u4e0a\u4f20\u6587\u4ef6\u5230\u670d\u52a1\u5668'], '2':['download','\u4ece\u670d\u52a1\u5668\u7aef\u4e0b\u8f7d\u6587\u4ef6'], } username = input('\u7528\u6237\u540d\uff1a').strip() password = input('\u5bc6\u7801\uff1a').strip() # \u521b\u5efasocket\u7684\u8d44\u6e90 sk_client = socket.socket() sk_client.connect(('127.0.0.1', 9000)) res = login(username,password,sk_client) # \u5982\u679c\u767b\u5f55\u6210\u529f\u5c31\u5f00\u59cb\u9009\u62e9\u4e0a\u4f20\u8fd8\u662f\u4e0b\u8f7d if res: print('\u767b\u9646\u6210\u529f\uff01\u8bf7\u9009\u62e9\u4f60\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a') for i in operate_dic: print(i,':',operate_dic[i][1]) choice = input('\u8bf7\u9009\u62e9\u64cd\u4f5c\u7684\u5e8f\u53f7\uff1a').strip() # \u53cd\u5c04 if hasattr(sys.modules[__name__],operate_dic[choice][0]): # \u6ce8\u610f\uff0c\u628aclient\u7aef\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u53d1\u7ed9server\u7aef\uff0c\u8ba9\u4ed6\u505a\u597d\u5bf9\u5e94\u7684\u64cd\u4f5c\uff01 operate_str = operate_dic[choice][0] sk_client.send(operate_str.encode('utf-8')) # \u7136\u540eclient\u7aef\u8fdb\u884c\u5bf9\u5e94\u7684\u64cd\u4f5c method = getattr(sys.modules[__name__],operate_dic[choice][0]) method(sk_client) else: print('\u8bf7\u8f93\u5165\u6b63\u786e\u7684\u64cd\u4f5c\u5e8f\u53f7\uff01') else: print('\u767b\u9646\u5931\u8d25\uff01') server\u7aef # -*- coding:utf-8 -*- import os import sys import json import struct import socket import hashlib def get_md5(username,password): md5 = hashlib.md5(username.encode('utf-8')) md5.update(password.encode('utf-8')) return md5.hexdigest() # \u5927\u6587\u4ef6\u7684MD5 def get_file_md5(filepath): filesize = os.path.getsize(filepath) md5 = hashlib.md5() with open(filepath,'rb')as f: while filesize > 1024: content = f.read(1024) md5.update(content) filesize -= 1024 else: content = f.read() if content: md5.update(content) return md5.hexdigest() def login(username,password): ## whw 123 with open('userinfo','r',encoding='utf-8')as f: for line in f: user,pwd = line.strip().split('|') if user == username and pwd == get_md5(username,password): return {'operate':'login','result':True} else: return {'operate':'login','result':False} def upload(conn): print('upload...') # \u63a5\u6536\u5b57\u5178\u7684\u957f\u5ea6\u4e0e\u5b57\u5178 num_dic = conn.recv(4) num = struct.unpack('i',num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) # \u5f97\u5230\u76f8\u5173\u4fe1\u606f filename = dic['filename'] filesize = dic['filesize'] # \u5f00\u59cb\u63a5\u6536\u6587\u4ef6 with open(filename,'wb')as f: while filesize > 1024: content = conn.recv(1024) f.write(content) # \u6ce8\u610f\u6bcf\u6b21\u6536\u5230\u4e0d\u4e00\u5b9a\u662f1024\uff01 # \u56e0\u6b64\u8fd9\u91cc\u7528content\u7684\u957f\u5ea6\u505a\u51cf\u6cd5\uff01 filesize -= len(content) else: content = conn.recv(1024) if content: f.write(content) # \u8fdb\u884c\u6587\u4ef6\u7684MD5\u6821\u9a8c file_md5 = get_file_md5(filename) if file_md5 == dic['file_md5']: print('\u6587\u4ef6 %s \u4e0a\u4f20\u6210\u529f\uff01\u6821\u9a8c\u65e0\u8bef!' % filename) # \u6700\u540e\u8bb0\u5f97\u5173\u95ed\u8d44\u6e90 conn.close() def download(conn): print('download...') # \u4ececlient\u7aef\u63a5\u6536\u6587\u4ef6\u540d filename = conn.recv(1024).decode('utf-8') file_path = os.path.join('server_files', filename) filesize = None if filename in os.listdir('server_files'): filesize = os.path.getsize(file_path) file_md5 = get_file_md5(file_path) dic = {'filesize': filesize, 'file_md5': file_md5} else: dic = {'filesize':None,'file_md5':None} # \u628a\u8fd9\u4e2a\u5b57\u5178\u4f20\u7ed9client\uff0c\u8ba9\u5b83\u786e\u8ba4\u662f\u5426\u53ef\u4ee5\u8fdb\u884c\u4e0b\u8f7d\u4e86 str_dic = json.dumps(dic) conn.send(str_dic.encode('utf-8')) # \u5982\u679c\u6709\u8fd9\u4e2a\u6587\u4ef6\u8868\u793a\u53ef\u4ee5\u4e0b\u8f7d\u4e86\uff0cserver\u5f00\u59cb\u7ed9\u4ed6\u4f20 if dic['filesize'] and dic['file_md5']: with open(file_path,'rb')as f: while filesize > 1024: content = f.read(1024) conn.send(content) else: content = f.read() if content: conn.send(content) # \u6700\u540e\u8bb0\u5f97\u5173\u95edconn conn.close() else: print('\u5ba2\u6237\u7aef %s \u8bd5\u56fe\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25'%(addr,)) conn.close() if __name__ == '__main__': server = socket.socket() server.bind(('127.0.0.1',9000)) server.listen() print('listening......') while 1: conn,addr = server.accept() # \u5148\u6536\u5b57\u5178\u957f\u5ea6\u518d\u6536\u5b57\u5178 bytes_num = conn.recv(4) num = struct.unpack('i',bytes_num)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) ret = login(dic['username'],dic['password']) # \u8fd4\u56de\u7ed9client str_ret = json.dumps(ret) bytes_ret = str_ret.encode('utf-8') num_ret = struct.pack('i',len(bytes_ret)) # \u5148\u53d1\u5b57\u8282\u5b57\u5178\u7684\u957f\u5ea6\u518d\u53d1\u5b57\u8282\u5b57\u5178 conn.send(num_ret) conn.send(bytes_ret) # \u767b\u9646\u6210\u529fupload\u4e0edownload\u8fd8\u4f1a\u7528\u5230conn\uff0c\u5148\u4e0d\u5173\u95ed if ret['result']: #\u4ececlient\u7aef\u6536\u4e00\u4e0b \u5230\u5e95\u662f\u8fdb\u884c\u4ec0\u4e48\u64cd\u4f5c\u5427 str_operate = conn.recv(1024).decode('utf-8') # \u7528\u53cd\u5c04\u83b7\u53d6 if hasattr(sys.modules[__name__],str_operate): method = getattr(sys.modules[__name__],str_operate) method(conn) else: # \u6ce8\u610f\u8fd9\u91cc\u662f\u5355\u4e2a\u5143\u7ec4\u7684\u4f20\u53c2\uff01 print('\u5ba2\u6237\u7aef %s \u767b\u5f55\u5931\u8d25'%(addr,)) # \u767b\u5f55\u5931\u8d25\u7684\u8bdd\u65ad\u5f00\u5f53\u524d\u8fde\u63a5 conn.close()","title":"\u57fa\u4e8e\u539f\u751fsocket\u5b9e\u73b0\u7684\u767b\u9646\u4e0e\u5927\u6587\u4ef6\u52a0\u5bc6\u4e0a\u4f20\u5b9e\u4f8b"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#socketserver_1","text":"'''client''' # -*- coding:utf-8 -*- import os import json import struct import socket filepath = input('\u8bf7\u8f93\u5165\u6587\u4ef6\u8def\u5f84\uff1a').strip() filename = os.path.basename(filepath) filesize = os.path.getsize(filepath) # \u6784\u5efa\u5b57\u5178 \u5e76 \u6c42\u51fa\u4f20\u8f93\u6240\u9700\u7684\u53c2\u6570 dic = {'filename':filename,'filesize':filesize} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num_dic = struct.pack('i',len(bytes_dic)) # \u51c6\u5907\u5e76\u4f20\u8f93 sk_client = socket.socket() sk_client.connect(('127.0.0.1',9000)) sk_client.send(num_dic) sk_client.send(bytes_dic) # \u5f00\u59cb\u4e0a\u4f20\u6587\u4ef6 with open(filepath,'rb')as f: while filesize > 1024: content = f.read(1024) sk_client.send(content) filesize -= 1024 else: content = f.read() if content: sk_client.send(content) # \u5173\u95ed\u8d44\u6e90 sk_client.close() '''server''' # -*- coding:utf-8 -*- import json import struct import socketserver class MyServer(socketserver.BaseRequestHandler): def handle(self): while 1: conn = self.request # \u63a5\u6536\u5e26\u4fe1\u606f\u7684\u5b57\u5178 \u5148\u63a5\u6536\u957f\u5ea6 num_dic = conn.recv(4) # \u6ce8\u610f\u53d6\u5230\u7684\u662f\u5143\u7ec4 \u9700\u8981\u53d6\u7d22\u5f15\u4e3a0\u7684\u5143\u7d20\u624d\u80fd\u62ff\u5230\u6570\u5b57\uff01 num = struct.unpack('i',num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) filename = dic['filename'] filesize = dic['filesize'] # \u5f00\u59cb\u63a5\u6536\u6570\u636e with open(filename,'wb')as f: while filesize > 1024: content = conn.recv(1024) f.write(content) # \u6ce8\u610f \u6536\u5230\u7684\u4e0d\u4e00\u5b9a\u662f1024\u957f\u5ea6 \u56e0\u6b64\u8fd9\u91cc\u6bcf\u6b21\u51cfcontent\u7684\u957f\u5ea6 filesize -= len(content) else: # \u6bcf\u6b21\u6536\u5230\u4e0d\u4e00\u5b9a\u662f1024 \u56e0\u6b64\u8fd9\u91cc\u6bcf\u6b21\u51cfcontent\u7684\u957f\u5ea6 content = conn.recv(1024) if content: f.write(content) conn.close() if __name__ == '__main__': ser_obj = socketserver.ThreadingTCPServer(('127.0.0.1',9000),MyServer) ser_obj.serve_forever()","title":"\u57fa\u4e8esocketserver\u7684\u5e76\u53d1\u7684\u6587\u4ef6\u4e0a\u4f20\u5b9e\u4f8b"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#_2","text":"\u76ee\u5f55\u7ed3\u6784 -download -upload -client.py -server.py userinfo client # -*- coding:utf-8 -*- import os import json import socket import struct download_path = r'E:\\practice\\old_boy_all_day\\all_days\\day31-\u4e0b\u8f7d\u4e0e\u6821\u9a8c\\download' username = input('username:').strip() password = input('password:').strip() dic = {'username':username,'password':password,'opt':'login'} str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') num_dic = struct.pack('i',len(bytes_dic)) sk = socket.socket() sk.connect(('127.0.0.1',9001)) sk.send(num_dic) sk.send(bytes_dic) str_ret = sk.recv(1024).decode('utf-8') ret_dic = json.loads(str_ret) if ret_dic['flag']: print('\u767b\u9646\u6210\u529f\uff01') else: print('\u767b\u9646\u5931\u8d25\uff01') #\u9009\u62e9 \u4e0a\u4f20 \u8fd8\u662f \u4e0b\u8f7d #\u9ed8\u8ba4\u53c2\u6570\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 # \u7528\u81ea\u5b9a\u4e49\u534f\u8bae\u4f20\u5b57\u5178\u5199\u4e00\u4e2a\u51fd\u6570 ############################################################ def pro_send(sk,dic,pro=True): str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') if pro: num_dic = struct.pack('i', len(bytes_dic)) sk.send(num_dic) sk.send(bytes_dic) def upload(sk): filepath = input('\u6587\u4ef6\u8def\u5f84\uff1a').strip() if os.path.isfile(filepath): filename = os.path.basename(filepath) filesize = os.path.getsize(filepath) dic = {'filename':filename,'filesize':filesize,'operate':'upload'} pro_send(sk,dic) ################################################################## with open(filepath,'rb')as f: while filesize > 2048: content = f.read(2048) sk.send(content) filesize -= 2048 else: content = f.read() if content: sk.send(content) print('\u4e0a\u4f20\u6210\u529f\uff01') def pro_recv(conn): ######################### \u6839\u636e\u534f\u8bae\u63a5\u6536################################### num_dic = conn.recv(4) # \u6ce8\u610funpack\u5f97\u5230\u7684\u662f\u5143\u7ec4\uff01\uff01\uff01 num = struct.unpack('i', num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) return dic def download(sk): # \u5148\u53d1\u9001\u8981\u4e0b\u8f7d\u6587\u4ef6\u7684\u540d\u5b57 # server\u56de\u590d\uff1a\u662f\u5426\u5b58\u5728\uff0c\u6587\u4ef6\u5927\u5c0f # \u6839\u636e\u6587\u4ef6\u5927\u5c0f\u6765\u63a5\u6536\u6587\u4ef6 \u6536\u5230\u7684\u6587\u4ef6\u5b58\u5728download\u6587\u4ef6\u4ef6\u4e0b filename = input('\u6587\u4ef6\u540d\uff1a').strip() dic = {'filename': filename, 'operate': 'download'} # \u4e0d\u7528\u81ea\u5b9a\u4e49\u534f\u8bae # \u9ed8\u8ba4\u53c2\u6570\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 pro_send(sk,dic) ret = pro_recv(sk) # dic = {'filesize':filesize,'exist':True} if ret['exist']: filepath = os.path.join('download',filename) with open(filepath, 'wb')as f: while ret['filesize']: content = sk.recv(2048) f.write(content) ret['filesize'] -= len(content) else: content = sk.recv(2048) if content: f.write(content) print('\u4e0b\u8f7d\u6210\u529f\uff01') else: print('\u6587\u4ef6\u4e0d\u5b58\u5728\uff01') operate = [('\u4e0a\u4f20',upload),('\u4e0b\u8f7d',download)] for k,v in enumerate(operate,1): print(k,v[0]) num = input('\u8bf7\u8f93\u5165\u60a8\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\uff1a').strip() opt = operate[int(num)-1][1] opt(sk) server # -*- coding:utf-8 -*- import os import sys import json import struct import socket import hashlib uploadpath = r'E:\\practice\\old_boy_all_day\\all_days\\day31-\u4e0b\u8f7d\u4e0e\u6821\u9a8c\\upload' #\u9ed8\u8ba4\u53c2\u6570\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 # \u4f4d\u81ea\u5b9a\u4e49\u534f\u8bae\u4f20\u5b57\u5178\u5199\u4e00\u4e2a\u51fd\u6570 ######## def pro_send(sk,dic,pro=True): str_dic = json.dumps(dic) bytes_dic = str_dic.encode('utf-8') if pro: num_dic = struct.pack('i', len(bytes_dic)) sk.send(num_dic) sk.send(bytes_dic) def pro_recv(conn): ####### \u6839\u636e\u534f\u8bae\u63a5\u6536 num_dic = conn.recv(4) # \u6ce8\u610funpack\u5f97\u5230\u7684\u662f\u5143\u7ec4\uff01\uff01\uff01 num = struct.unpack('i', num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) return dic def get_md5(username,password): md5 = hashlib.md5(username.encode('utf-8')) md5.update(password.encode('utf-8')) return md5.hexdigest() def login(conn): num_dic = conn.recv(4) # \u6ce8\u610funpack\u5f97\u5230\u7684\u662f\u5143\u7ec4\uff01\uff01\uff01 num = struct.unpack('i', num_dic)[0] str_dic = conn.recv(num).decode('utf-8') dic = json.loads(str_dic) username = dic['username'] password = dic['password'] with open('userinfo', 'r', encoding='utf-8')as f: for line in f: usr, pwd = line.strip().split('|') if usr == username and pwd == get_md5(username, password): return {'opt':'login','flag':True} else: return {'opt': 'login', 'flag': False} def upload(conn,dic): filepath = os.path.join('upload',dic['filename']) with open(filepath,'wb')as f: while dic['filesize']: content = conn.recv(2048) f.write(content) dic['filesize'] -= len(content) else: content = conn.recv(2048) if content: f.write(content) def download(conn,dic): path = os.path.join(uploadpath,dic['filename']) if os.path.isfile(path): filesize = os.path.getsize(path) dic = {'filesize':filesize,'exist':True} # \u6587\u4ef6\u5b58\u5728 # \u5148\u53d1\u5b57\u5178 \u518d\u53d1\u6587\u4ef6 pro_send(conn,dic) with open(path,'rb')as f: while filesize > 2048: content = f.read(2048) conn.send(content) filesize -= 2048 else: content = f.read() if content: conn.send(content) else: # \u6587\u4ef6\u4e0d\u5b58\u5728 # \u5148\u53d1\u5b57\u5178 \u518d\u7ed3\u675f dic = {'filesize': None, 'exist': True} pro_send(conn, dic) conn.close() if __name__ == '__main__': sk = socket.socket() sk.bind(('127.0.0.1',9001)) sk.listen() print('listening......') conn,addr = sk.accept() ret = login(conn) # \u53ef\u4ee5\u4e0d\u81ea\u5b9a\u4e49\u534f\u8bae ret_str = json.dumps(ret) conn.send(ret_str.encode('utf-8')) if ret['flag']: # \u767b\u9646\u6210\u529f dic = pro_recv(conn) ################# {'filename':filename,'filesize':filesize,'operate':'upload'} ############################### if hasattr(sys.modules[__name__],dic['operate']): method = getattr(sys.modules[__name__],dic['operate']) method(conn,dic) else: conn.close()","title":"\u4e0a\u4f20+\u4e0b\u8f7d+\u751f\u6210\u5668"},{"location":"python\u8fdb\u9636/socket\u7f16\u7a0b/#ftp","text":"https://github.com/Wanghongw/FTP","title":"\u81ea\u5df1\u5b9e\u73b0\u7684\u4e00\u4e2a\u5355\u8fdb\u7a0b\u7684FTP\u670d\u52a1\u5668"},{"location":"python\u8fdb\u9636/with/","text":"\u5b9e\u9645\u5e94\u7528 \u4e2a\u4eba\u535a\u5ba2 pymysql\u94fe\u63a5\u6c60\u3001\u4e8b\u7269\u7684\u4f7f\u7528\u6d45\u8c08 \u81ea\u5b9a\u4e49\u6587\u4ef6\u64cd\u4f5c\u7684\u7c7b class myopen: def __init__(self,path,mode='r'): self.path = path self.mode = mode def __enter__(self): print('start') self.f = open(self.path,mode=self.mode) return self.f def __exit__(self, exc_type, exc_val, exc_tb): self.f.close() print('exit') with myopen('userinfo','a') as f: f.write('hello,world') \u5b9e\u4f8b\uff1apickle\u7684dump\u4e0eload\u7684\u7c7b import pickle # dump class MypickleDump: def __init__(self,path,mode = 'ab'): self.path = path self.mode = mode def __enter__(self): self.f = open(self.path,self.mode) return self def dump(self,obj): pickle.dump(obj,self.f) def __exit__(self, exc_type, exc_val, exc_tb): self.f.close() with MypickleDump('pickle_file') as pickle_obj: pickle_obj.dump({1,2,3}) # load class MypickelLoad: def __init__(self,path,mode='rb'): self.path = path self.mode = mode def __enter__(self): self.f = open(self.path,self.mode) return self def loaditer(self): while True: try: # \u751f\u6210\u5668 ret = pickle.load(self.f) yield ret except EOFError: break def __exit__(self, exc_type, exc_val, exc_tb): self.f.close() with MypickelLoad(\"pickle_file\") as p2: content = p2.loaditer() for i in content: print(i) \u5728\u4e00\u4e2a\u51fd\u6570\u524d\u540e\u6dfb\u52a0\u529f\u80fd import time class Timer: def __enter__(self): self.start = time.time() def __exit__(self, exc_type, exc_val, exc_tb): print(time.time() - self.start) def func(): print('wahaha') time.sleep(1) print('qqxing') with Timer(): func()","title":"07 with\u4e0a\u4e0b\u6587"},{"location":"python\u8fdb\u9636/with/#_1","text":"\u4e2a\u4eba\u535a\u5ba2 pymysql\u94fe\u63a5\u6c60\u3001\u4e8b\u7269\u7684\u4f7f\u7528\u6d45\u8c08 \u81ea\u5b9a\u4e49\u6587\u4ef6\u64cd\u4f5c\u7684\u7c7b class myopen: def __init__(self,path,mode='r'): self.path = path self.mode = mode def __enter__(self): print('start') self.f = open(self.path,mode=self.mode) return self.f def __exit__(self, exc_type, exc_val, exc_tb): self.f.close() print('exit') with myopen('userinfo','a') as f: f.write('hello,world') \u5b9e\u4f8b\uff1apickle\u7684dump\u4e0eload\u7684\u7c7b import pickle # dump class MypickleDump: def __init__(self,path,mode = 'ab'): self.path = path self.mode = mode def __enter__(self): self.f = open(self.path,self.mode) return self def dump(self,obj): pickle.dump(obj,self.f) def __exit__(self, exc_type, exc_val, exc_tb): self.f.close() with MypickleDump('pickle_file') as pickle_obj: pickle_obj.dump({1,2,3}) # load class MypickelLoad: def __init__(self,path,mode='rb'): self.path = path self.mode = mode def __enter__(self): self.f = open(self.path,self.mode) return self def loaditer(self): while True: try: # \u751f\u6210\u5668 ret = pickle.load(self.f) yield ret except EOFError: break def __exit__(self, exc_type, exc_val, exc_tb): self.f.close() with MypickelLoad(\"pickle_file\") as p2: content = p2.loaditer() for i in content: print(i) \u5728\u4e00\u4e2a\u51fd\u6570\u524d\u540e\u6dfb\u52a0\u529f\u80fd import time class Timer: def __enter__(self): self.start = time.time() def __exit__(self, exc_type, exc_val, exc_tb): print(time.time() - self.start) def func(): print('wahaha') time.sleep(1) print('qqxing') with Timer(): func()","title":"\u5b9e\u9645\u5e94\u7528"},{"location":"python\u8fdb\u9636/\u538b\u6d4b/","text":"Siege Mac/Linux\u538b\u529b\u6d4b\u8bd5\u795e\u5668Siege\u7684\u5b89\u88c5\u8fc7\u7a0b\u4e0e\u4f7f\u7528\u8bb2\u89e3","title":"04 Mac/Linux\u538b\u529b\u6d4b\u8bd5\u795e\u5668Siege"},{"location":"python\u8fdb\u9636/\u538b\u6d4b/#siege","text":"Mac/Linux\u538b\u529b\u6d4b\u8bd5\u795e\u5668Siege\u7684\u5b89\u88c5\u8fc7\u7a0b\u4e0e\u4f7f\u7528\u8bb2\u89e3","title":"Siege"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/","text":"\u4e94\u5c42\u7f51\u7edc\u6a21\u578b \u64cd\u4f5c\u7cfb\u7edf\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2asocket\u63a5\u53e3, \u7528\u4e8e\u5b9e\u73b0TCP\u548cUDP, \u5b83\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u534f\u8bae\uff01 socket\u7f16\u7a0b django\u7684socket\u662f\u5b58\u5728\u4e8euwsgi\u4e2d\uff01 \u4f7f\u7528\u591a\u7ebf\u7a0b\u5b9e\u73b0\u591a\u7528\u6237\u8fde\u63a5 \"\"\" client\u7aef \"\"\" import socket client = socket.socket(socket.AF_INET,socket.SOCK_STREAM) client.connect(('127.0.0.1', 8001)) while True: re_data = input() client.send(re_data.encode(\"utf8\")) data = client.recv(1024) print(data.decode(\"utf8\")) # client.send(\"whw\".encode(\"utf8\")) # data = client.recv(1024) # print (data.decode(\"utf8\")) # client.close() \"\"\" server\u7aef \"\"\" import socket import threading server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) # \u5728\u7ed1\u5b9a\u524d\u8c03\u7528setsockopt\u8ba9\u5957\u63a5\u5b57\u5141\u8bb8\u5730\u5740\u91cd\u590d\u5229\u7528 server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server.bind(('0.0.0.0', 8001)) server.listen() def handle_sock(sock, addr): while True: data = sock.recv(1024) print(data.decode(\"utf8\")) re_data = input() sock.send(re_data.encode(\"utf8\")) #\u83b7\u53d6\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e #\u4e00\u6b21\u83b7\u53d61k\u7684\u6570\u636e while True: sock, addr = server.accept() # \u7528\u7ebf\u7a0b\u53bb\u5904\u7406\u65b0\u63a5\u6536\u7684\u8fde\u63a5(\u7528\u6237) client_thread = threading.Thread(target=handle_sock, args=(sock, addr)) client_thread.start() # data = sock.recv(1024) # print(data.decode(\"utf8\")) # re_data = input() # sock.send(re_data.encode(\"utf8\")) # server.close() # sock.close() socket\u6a21\u62dfhttp\u8bf7\u6c42 \u5bf9url\u89e3\u6790\u5f97\u5230host\u548cpath(\u8c03\u7528urllib) \u4f7f\u7528socket\u8fdb\u884c\u8fde\u63a5 \u53d1\u9001get\u8bf7\u6c42, \u7136\u540e\u63a5\u53d7\u6570\u636e \u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u6790\u5904\u7406 \u6700\u540e\u65ad\u5f00socket\u8fde\u63a5 # requests -> urlib -> socket import socket from urllib.parse import urlparse def get_url(url): # \u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # client.setblocking(False) client.connect((host, 80)) #\u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu # \u4e0d\u505c\u7684\u8be2\u95ee\u8fde\u63a5\u662f\u5426\u5efa\u7acb\u597d\uff0c \u9700\u8981while\u5faa\u73af\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u72b6\u6001 # \u505a\u8ba1\u7b97\u4efb\u52a1\u6216\u8005\u518d\u6b21\u53d1\u8d77\u5176\u4ed6\u7684\u8fde\u63a5\u8bf7\u6c42 client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) data = b\"\" while True: d = client.recv(1024) if d: data += d else: break data = data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) client.close() if __name__ == \"__main__\": import time start_time = time.time() for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) get_url(url) print(time.time()-start_time) \u5168\u5c40\u89e3\u91ca\u5668\u9501\u2014\u2014GIL GIL\u7684\u5168\u79f0\u662fGlobal Interpreter Lock python\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5e94\u4e8ec\u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b GIL\u4f7f\u5f97\u540c\u4e00\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4e00\u4e2acpu\u4e0a\u6267\u884c\u5b57\u8282\u7801, \u65e0\u6cd5\u5c06\u591a\u4e2a\u7ebf\u7a0b\u6620\u5c04\u5230\u591a\u4e2acpu\u4e0a\u6267\u884c GIL\u4f1a\u6839\u636e\u6267\u884c\u7684\u5b57\u8282\u7801\u884c\u6570\u4ee5\u53ca\u65f6\u95f4\u7247\u91ca\u653egil, gil\u5728\u9047\u5230io\u7684\u64cd\u4f5c\u65f6\u5019\u4e3b\u52a8\u91ca\u653e \u2014\u2014 GIL\u65e0\u6cd5\u4fdd\u8bc1\u7ebf\u7a0b\u7edd\u5bf9\u5b89\u5168 GIL\u7684\u7279\u70b9 Python\u5728\u591a\u7ebf\u7a0b\u4e0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6267\u884c\u65b9\u5f0f\u4e3a\uff1a \u83b7\u53d6GIL \u6267\u884c\u4ee3\u7801\u76f4\u5230sleep\u6216\u8005\u662fpython\u865a\u62df\u673a\u5c06\u5176\u6302\u8d77 \u91ca\u653eGIL \u4e00\u4e2aCPU\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b, \u4f8b\u5982\u4e00\u4e2aCPU \u6709\u4e09\u4e2a\u7ebf\u7a0b, \u9996\u5148\u7ebf\u7a0bA\u6267\u884c, \u7136\u540e\u7ebf\u7a0bA\u8fbe\u5230\u91ca\u653e\u6761\u4ef6\u8fdb\u884c\u91ca\u653eGIL, \u7ebf\u7a0bB\u548c\u7ebf\u7a0bC\u8fdb\u884c\u7ade\u4e89GIL, \u8c01\u62a2\u5230GIL, \u7ee7\u7eed\u6267\u884c\u3002 GIL\u65e0\u6cd5\u4fdd\u8bc1\u7ebf\u7a0b\u7edd\u5bf9\u5b89\u5168 total = 0 def add(): global total for i in range(1000000): total += 1 def desc(): global total for i in range(1000000): total -= 1 import threading thread1 = threading.Thread(target=add) thread2 = threading.Thread(target=desc) thread1.start() thread2.start() thread1.join() thread2.join() print(total) \"\"\" \u6bcf\u6b21\u7684\u7ed3\u679c\u90fd\u4e0d\u4e00\u6837:GIL\u4f1a\u5728\u6267\u884c\u5b8c\u4e00\u5b9a\u957f\u5ea6\u7684\u5b57\u8282\u7801\u540e\u81ea\u52a8\u91ca\u653e\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4e0d\u4e00\u5b9a\u4f1a\u4e00\u76f4\u5360GIL \"\"\" \u591a\u7ebf\u7a0b\u7f16\u7a0b \u5b9e\u73b0\u7ebf\u7a0b\u76842\u79cd\u65b9\u5f0f\uff1a # \u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u548c\u591a\u8fdb\u7a0b\u6027\u80fd\u5dee\u522b\u4e0d\u5927 import time import threading # \u5b9e\u73b0\u65b9\u5f0f1.\u901a\u8fc7Thread\u7c7b\u5b9e\u4f8b\u5316 def get_detail_html(url): print(\"get detail html started\") time.sleep(2) print(\"get detail html end\") def get_detail_url(url): print(\"get detail url started\") time.sleep(4) print(\"get detail url end\") # \u5b9e\u73b0\u65b9\u5f0f2. \u901a\u8fc7\u7ee7\u627fThread\u6765\u5b9e\u73b0\u591a\u7ebf\u7a0b class GetDetailHtml(threading.Thread): def __init__(self, name): super().__init__(name=name) def run(self): print(\"get detail html started\") time.sleep(2) print(\"get detail html end\") class GetDetailUrl(threading.Thread): def __init__(self, name): super().__init__(name=name) def run(self): print(\"get detail url started\") time.sleep(4) print(\"get detail url end\") if __name__ == \"__main__\": # \u65b9\u5f0f1 # thread1 = threading.Thread(target=get_detail_html,args=(\"\",)) # thread2 = threading.Thread(target=get_detail_html,args=(\"\",)) # \u65b9\u5f0f2 thread1 = GetDetailHtml(\"get_detail_html\") thread2 = GetDetailUrl(\"get_detail_url\") # \u5f53\u4e3b\u7ebf\u7a0b\u9000\u51fa\u7684\u65f6\u5019\uff0c \u5b50\u7ebf\u7a0bkill\u6389 \u2014\u2014 \u8bbe\u7f6e\u5b88\u62a4\u7ebf\u7a0b\uff01\u5728start\u4e4b\u524d\u5199\uff01 # \u53ea\u5c06thread2\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u7ebf\u7a0b\u7684\u8bdd\uff0c\u4e0d\u4f1a\u4e3b\u7ebf\u7a0b\u6267\u884c\u5b8c\u4e5f\u4f1a\u628athread2\u505c\u6389\uff01thread2\u7684end\u4e0d\u4f1a\u6253\u5370\uff01 thread2.setDaemon(True) # \u5b88\u62a4\u7ebf\u7a0b start_time = time.time() thread1.start() thread2.start() # \u7b49\u5f852\u4e2a\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\u6700\u540e\u624d\u6267\u884c\u6253\u5370 thread1.join() thread2.join() print (\"last time: {}\".format(time.time()-start_time)) \u7ebf\u7a0b\u95f4\u901a\u4fe1:\u5171\u4eab\u53d8\u91cf\u4e0eQueue * \u7ebf\u7a0b\u95f4\u901a\u4fe11\uff1a\u5171\u4eab\u53d8\u91cf\u2014\u2014\u4e0d\u63a8\u8350 \u5171\u4eab\u53d8\u91cf \u4f7f\u7528\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf, \u7136\u540e\u4e0d\u540c\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u5e76\u4fee\u6539\u8fd9\u4e2a\u53d8\u91cf\uff01\u2014\u2014 \u8bb0\u5f97\u52a0\u9501\uff01 # 1. \u7ebf\u7a0b\u901a\u4fe1\u65b9\u5f0f- \u5171\u4eab\u53d8\u91cf import time from threading import Thread,RLock # \u5168\u5c40\u7684\u53d8\u91cf detail_url_list = list() # 1. \u751f\u4ea7\u8005\u5f53\u751f\u4ea710\u4e2aurl\u4ee5\u540e\u5c31\u5c31\u7b49\u5f85\uff0c\u4fdd\u8bc1detail_url_list\u4e2d\u6700\u591a\u53ea\u6709\u5341\u4e2aurl # 2. \u5f53url_list\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u6d88\u8d39\u8005\u5c31\u6682\u505c def get_detail_html(lock): # \u722c\u53d6\u6587\u7ae0\u8be6\u60c5\u9875 # \u4e00\u76f4\u722c\u53d6 while True: if len(detail_url_list): lock.acquire() if len(detail_url_list): url = detail_url_list.pop() lock.release() # for url in detail_url_list: print(\"get detail html started\") time.sleep(2) print(\"get detail html end\") else: lock.release() time.sleep(1) def get_detail_url(lock): # \u4e00\u76f4\u722c\u53d6 while True: print(\"get detail url started\") time.sleep(4) for i in range(20): lock.acquire() if len(detail_url_list) >= 10: lock.release() time.sleep(1) else: detail_url_list.append(\"http://projectsedu.com/{id}\".format(id=i)) lock.release() print(\"get detail url end\") if __name__ == \"__main__\": lock = RLock() thread_detail_url = Thread(target=get_detail_url, args=(lock,)) for i in range(10): html_thread = Thread(target=get_detail_html, args=(lock,)) html_thread.start() start_time = time.time() \u7ebf\u7a0b\u95f4\u901a\u4fe12\uff1a\u901a\u8fc7queue\u8fdb\u884c\u7ebf\u7a0b\u95f4\u540c\u6b65\u2014\u2014\u63a8\u8350 # \u901a\u8fc7queue\u7684\u65b9\u5f0f\u8fdb\u884c\u7ebf\u7a0b\u95f4\u540c\u6b65 import time import threading from queue import Queue def get_detail_html(queue): #\u722c\u53d6\u6587\u7ae0\u8be6\u60c5\u9875 while True: # \u5982\u679c\u961f\u5217\u4e3a\u7a7a\u4f1a\u4e00\u76f4\u963b\u585e # get \u2014\u2014 \u7ebf\u7a0b\u5b89\u5168\uff1a\u6bcf\u5bb6\u9501\u4f46\u662f\u5b9e\u9645\u4f7f\u7528\u7684\u662fdeque\uff0cdeque\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 url = queue.get() # for url in detail_url_list: print(\"get detail html started\") time.sleep(2) print(\"get detail html end\") def get_detail_url(queue): # \u722c\u53d6\u6587\u7ae0\u5217\u8868\u9875 while True: print(\"get detail url started\") time.sleep(4) for i in range(20): # put \u2014\u2014 \u7ebf\u7a0b\u5b89\u5168\uff1a\u52a0\u4e86\u9501 queue.put(\"http://projectsedu.com/{id}\".format(id=i)) print(\"get detail url end\") if __name__ == \"__main__\": # \u8bbe\u7f6e\u4e00\u4e2a\u6700\u5927\u503c detail_url_queue = Queue(maxsize=1000) thread_detail_url = threading.Thread(target=get_detail_url, args=(detail_url_queue,)) for i in range(10): html_thread = threading.Thread(target=get_detail_html, args=(detail_url_queue,)) html_thread.start() start_time = time.time() # \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6210\u5bf9\u4f7f\u7528 detail_url_queue.task_done() detail_url_queue.join() #\u5f53\u4e3b\u7ebf\u7a0b\u9000\u51fa\u7684\u65f6\u5019\uff0c \u5b50\u7ebf\u7a0bkill\u6389 print (\"last time: {}\".format(time.time()-start_time)) \u7ebf\u7a0b\u540c\u6b65 * \u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898 ### \u5047\u8bbe\u67092\u4e2a\u7ebf\u7a0b\uff01\u4e00\u4e2a\u52a0\u4e00\u4e2a\u51cf\uff01 def add(a): a += 1 def desc(a): a -= 1 # add\u7684\u8fc7\u7a0b \"\"\" 1\u3001load a a = 0 2\u3001load 1 1 3\u3001+ +1 4\u3001\u8d4b\u503c\u7ed9a \u2014\u2014 a=1 \"\"\" # desc\u7684\u8fc7\u7a0b \"\"\" 1\u3001load a a = 0 2\u3001load 1 1 3\u3001- -1 4\u3001\u8d4b\u503c\u7ed9a \u2014\u2014 a=-1 \"\"\" # \u95ee\u9898 \"\"\" \u7b2c4\u6b65\uff1a\u4e24\u4e2a\u8d4b\u503c\u8bed\u53e5\u6709\u4e00\u4e2a\u5148\u8fd0\u884c\u4e00\u4e2a\u540e\u8fd0\u884c\uff0ca\u8981\u4e48\u662f1\u8981\u4e48\u662f-1\uff0c\u4f46\u662f\u5c31\u662f\u4e0d\u7b49\u4e8e0\uff01 \u4f46\u662f\u6211\u4eec\u671f\u671b\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c\u540e\u7ed3\u679c\u4e3a0\uff01 \"\"\" import dis print(dis.dis(add)) print(dis.dis(desc)) \"\"\" 4 0 LOAD_FAST 0 (a) 2 LOAD_CONST 1 (1) 4 INPLACE_ADD 6 STORE_FAST 0 (a) 8 LOAD_CONST 0 (None) 10 RETURN_VALUE None 7 0 LOAD_FAST 0 (a) 2 LOAD_CONST 1 (1) 4 INPLACE_SUBTRACT 6 STORE_FAST 0 (a) 8 LOAD_CONST 0 (None) 10 RETURN_VALUE None \"\"\" Lock\u4e0eRlock \u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\uff0c\u53ef\u4ee5\u8fde\u7eed\u8c03\u7528\u591a\u6b21acquire\uff0c \u4e00\u5b9a\u8981\u6ce8\u610facquire\u7684\u6b21\u6570\u8981\u548crelease\u7684\u6b21\u6570\u76f8\u7b49\uff01 \u83b7\u53d6\u9501\u4e0e\u91ca\u653e\u9501\u9700\u8981\u65f6\u95f4\uff0c\u4f1a\u5f71\u54cd\u6027\u80fd\u3002 \u9501\u4f1a\u5f15\u8d77\u6b7b\u9501acquire\u591a\u6b21\u4f46\u662f\u4e0d\u91ca\u653e(release)\u3002 import threading from threading import Lock, RLock, Condition # \u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\uff0c\u53ef\u4ee5\u8fde\u7eed\u8c03\u7528\u591a\u6b21acquire\uff0c \u4e00\u5b9a\u8981\u6ce8\u610facquire\u7684\u6b21\u6570\u8981\u548crelease\u7684\u6b21\u6570\u76f8\u7b49 total = 0 lock = RLock() def add(): # 1. dosomething1 # 2. io\u64cd\u4f5c # 1. dosomething3 global lock global total for i in range(1000000): # \u83b7\u53d6\u9501 lock.acquire() lock.acquire() total += 1 # \u91ca\u653e\u9501 lock.release() lock.release() def desc(): global total global lock for i in range(1000000): # \u83b7\u53d6\u9501 lock.acquire() total -= 1 # \u91ca\u653e\u9501 lock.release() thread1 = threading.Thread(target=add) thread2 = threading.Thread(target=desc) thread1.start() thread2.start() thread1.join() thread2.join() print(total) # 0 # 1. \u7528\u9501\u4f1a\u5f71\u54cd\u6027\u80fd # 2. \u9501\u4f1a\u5f15\u8d77\u6b7b\u9501 # \u6b7b\u9501\u7684\u60c5\u51b5 A\uff08a\uff0cb\uff09 \"\"\" A(a\u3001b) acquire (a) acquire (b) B(a\u3001b) acquire (a) acquire (b) \"\"\" threading.Condition \u7528\u4e8e\u590d\u6742\u7684\u7ebf\u7a0b\u95f4\u540c\u6b65\u7684\u9501\uff1a \u6761\u4ef6\u53d8\u91cf import threading # \u901a\u8fc7condition\u5b8c\u6210\u534f\u540c\u8bfb\u8bd7 class XiaoAi(threading.Thread): def __init__(self, cond): super().__init__(name=\"\u5c0f\u7231\") self.cond = cond def run(self): with self.cond: self.cond.wait() print(\"{} : \u5728 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u597d\u554a \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u541b\u4f4f\u957f\u6c5f\u5c3e \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u5171\u996e\u957f\u6c5f\u6c34 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u6b64\u6068\u4f55\u65f6\u5df2 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u5b9a\u4e0d\u8d1f\u76f8\u601d\u610f \".format(self.name)) self.cond.notify() class TianMao(threading.Thread): def __init__(self, cond): super().__init__(name=\"\u5929\u732b\u7cbe\u7075\") self.cond = cond def run(self): with self.cond: print(\"{} : \u5c0f\u7231\u540c\u5b66 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u6211\u4eec\u6765\u5bf9\u53e4\u8bd7\u5427 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u6211\u4f4f\u957f\u6c5f\u5934 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u65e5\u65e5\u601d\u541b\u4e0d\u89c1\u541b \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u6b64\u6c34\u51e0\u65f6\u4f11 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u53ea\u613f\u541b\u5fc3\u4f3c\u6211\u5fc3 \".format(self.name)) self.cond.notify() self.cond.wait() if __name__ == \"__main__\": # from concurrent import futures cond = threading.Condition() xiaoai = XiaoAi(cond) tianmao = TianMao(cond) # \u542f\u52a8\u987a\u5e8f\u5f88\u91cd\u8981 # \u5728\u8c03\u7528with cond\u4e4b\u540e\u624d\u80fd\u8c03\u7528wait\u6216\u8005notify\u65b9\u6cd5 # condition\u6709\u4e24\u5c42\u9501\uff0c \u4e00\u628a\u5e95\u5c42\u9501\u4f1a\u5728\u7ebf\u7a0b\u8c03\u7528\u4e86wait\u65b9\u6cd5\u7684\u65f6\u5019\u91ca\u653e\uff0c \u4e0a\u9762\u7684\u9501\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528wait\u7684\u65f6\u5019\u5206\u914d\u4e00\u628a\u5e76\u653e\u5165\u5230cond\u7684\u7b49\u5f85\u961f\u5217\u4e2d\uff0c\u7b49\u5230notify\u65b9\u6cd5\u7684\u5524\u9192 xiaoai.start() tianmao.start() threading.Semaphore \u7528\u4e8e\u63a7\u5236\u8fdb\u5165\u6570\u91cf\u7684\u9501\uff1a \u4fe1\u53f7\u91cf # Semaphore \u662f\u7528\u4e8e\u63a7\u5236\u8fdb\u5165\u6570\u91cf\u7684\u9501 # \u6587\u4ef6\uff0c \u8bfb\u3001\u5199\uff0c \u5199\u4e00\u822c\u53ea\u662f\u7528\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u5199\uff0c\u8bfb\u53ef\u4ee5\u5141\u8bb8\u6709\u591a\u4e2a # \u505a\u722c\u866b\uff1a\u9650\u5236\u722c\u866b\u7684\u5e76\u53d1\u6570\u91cf import threading import time class HtmlSpider(threading.Thread): def __init__(self, url, sem): super().__init__() self.url = url self.sem = sem def run(self): time.sleep(2) print(\"got html text success\") self.sem.release() class UrlProducer(threading.Thread): def __init__(self, sem): super().__init__() self.sem = sem def run(self): for i in range(20): self.sem.acquire() html_thread = HtmlSpider(\"https://baidu.com/{}\".format(i), self.sem) html_thread.start() if __name__ == \"__main__\": sem = threading.Semaphore(3) url_producer = UrlProducer(sem) url_producer.start() \u7ebf\u7a0b\u6c60 \u4e3a\u4ec0\u4e48\u8981\u7528\u7ebf\u7a0b\u6c60 1\u3001\u4e3b\u7ebf\u7a0b\u4e2d\u53ef\u4ee5\u83b7\u53d6\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u7684\u72b6\u6001\u6216\u8005\u67d0\u4e00\u4e2a\u4efb\u52a1\u7684\u72b6\u6001\uff0c\u4ee5\u53ca\u8fd4\u56de\u503c 2\u3001\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u5b8c\u6210\u7684\u65f6\u5019\u6211\u4eec\u4e3b\u7ebf\u7a0b\u80fd\u7acb\u5373\u77e5\u9053 3\u3001futures\u53ef\u4ee5\u8ba9\u591a\u7ebf\u7a0b\u548c\u591a\u8fdb\u7a0b\u7f16\u7801\u63a5\u53e3\u4e00\u81f4 \u521d\u7ea7\u7684\u5199\u6cd5 from concurrent.futures import ThreadPoolExecutor import time def get_html(times): time.sleep(times) print(\"get page {} success\".format(times)) return times executor = ThreadPoolExecutor(max_workers=2) # \u901a\u8fc7submit\u51fd\u6570\u63d0\u4ea4\u6267\u884c\u7684\u51fd\u6570\u5230\u7ebf\u7a0b\u6c60\u4e2d, submit \u662f\u7acb\u5373\u8fd4\u56de task1 = executor.submit(get_html, (3)) task2 = executor.submit(get_html, (2)) # done\u65b9\u6cd5\u7528\u4e8e\u5224\u5b9a\u67d0\u4e2a\u4efb\u52a1\u662f\u5426\u5b8c\u6210 print(task1.done()) print(task2.cancel()) # \u56e0\u4e3a\u4e0a\u9762\u7ebf\u7a0b\u6c60\u8bbe\u7f6e\u7684\u662f2\u6b63\u597d\u80fd\u540c\u65f6\u653e\u5728\u7ebf\u7a0b\u6c60\u4e2d\uff0c\u6240\u4ee5\u8fd9\u91cccancel\u7684\u8bdd\u662fFalse time.sleep(3) print(task1.done()) #result\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6task\u7684\u6267\u884c\u7ed3\u679c print(task1.result()) \u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de\u2014\u2014as_completed\uff1a\u63a8\u8350 import time from concurrent.futures import ThreadPoolExecutor, as_completed def get_html(times): time.sleep(times) print(\"get page {} success\".format(times)) return times executor = ThreadPoolExecutor(max_workers=2) urls = [3,2,4] # \u5217\u8868\u63a8\u5bfc\u5f0f all_task = [executor.submit(get_html, (url)) for url in urls] # wait(all_task, return_when=FIRST_COMPLETED) # \u8981\u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de for future in as_completed(all_task): data = future.result() print(\"get {} page\".format(data)) \u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de\u2014\u2014\u7ebf\u7a0b\u6c60\u5bf9\u8c61\u7684map import time from concurrent.futures import ThreadPoolExecutor def get_html(times): time.sleep(times) print(\"get page {} success\".format(times)) return times executor = ThreadPoolExecutor(max_workers=2) # \u8981\u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de urls = [3,2,4] # \u5217\u8868\u63a8\u5bfc\u5f0f all_task = [executor.submit(get_html, (url)) for url in urls] # \u901a\u8fc7executor\u7684map\u83b7\u53d6\u5df2\u7ecf\u5b8c\u6210\u7684task\u7684\u503c for data in executor.map(get_html, urls): print(\"get {} page\".format(data)) wait\u2014\u2014\u7b49\u5f85\u67d0\u4e9b\u4e8b\u4ef6\u53d1\u751f\u5b8c\u518d\u6267\u884c import time from concurrent.futures import ThreadPoolExecutor,wait,FIRST_COMPLETED def get_html(times): time.sleep(times) print(\"get page {} success\".format(times)) return times executor = ThreadPoolExecutor(max_workers=2) # \u8981\u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de urls = [3,2,4] # \u5217\u8868\u63a8\u5bfc\u5f0f all_task = [executor.submit(get_html, (url)) for url in urls] # \u963b\u585e\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5230\u6240\u6709\u7684\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\u540e\u6267\u884c\u4e0b\u9762\u7684 wait(all_task) \"\"\" # \u7b2c\u4e00\u4e2atask\u6267\u884c\u5b8c\u4e4b\u540e\u6267\u884c\u4e0b\u9762\u7684\uff01 wait(all_task,return_when=FIRST_COMPLETED) \"\"\" print(\"main\") # \u901a\u8fc7executor\u7684map\u83b7\u53d6\u5df2\u7ecf\u5b8c\u6210\u7684task\u7684\u503c for data in executor.map(get_html, urls): print(\"get {} page\".format(data)) \u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b\u7684\u5bf9\u6bd4 \u8017cpu\u7684\u64cd\u4f5c\uff0c\u7528\u591a\u8fdb\u7a0b\u7f16\u7a0b\u3002 \u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c \u4f7f\u7528\u591a\u7ebf\u7a0b\u7f16\u7a0b\u3002 \u8fdb\u7a0b\u5207\u6362\u4ee3\u4ef7\u8981\u9ad8\u4e8e\u7ebf\u7a0b\uff01 1\u3001\u5bf9\u4e8e\u8017\u8d39cpu\u7684\u64cd\u4f5c\uff0c\u591a\u8fdb\u7a0b\u4f18\u4e8e\u591a\u7ebf\u7a0b \u591a\u8fdb\u7a0b import time from concurrent.futures import ThreadPoolExecutor, as_completed from concurrent.futures import ProcessPoolExecutor # 1. \u5bf9\u4e8e\u8017\u8d39cpu\u7684\u64cd\u4f5c\uff0c\u591a\u8fdb\u7a0b\u4f18\u4e8e\u591a\u7ebf\u7a0b def fib(n): if n<=2: return 1 return fib(n-1)+fib(n-2) if __name__ == \"__main__\": \"\"\" \u591a\u8fdb\u7a0b \"\"\" ### with\u4e0a\u4e0b\u6587\u7ba1\u7406 \u2014\u2014\u2014\u2014 \u8fdb\u57ce\u6c60 with ProcessPoolExecutor(3) as executor: all_task = [executor.submit(fib, (num)) for num in range(25,35)] start_time = time.time() # as_completed\u65b9\u6cd5 for future in as_completed(all_task): data = future.result() print(\"exe result: {}\".format(data)) print(\"last time is: {}\".format(time.time()-start_time)) \"\"\" last time is: 2.5451011657714844 \"\"\" \u591a\u7ebf\u7a0b import time from concurrent.futures import ThreadPoolExecutor, as_completed from concurrent.futures import ProcessPoolExecutor # 1. \u5bf9\u4e8e\u8017\u8d39cpu\u7684\u64cd\u4f5c\uff0c\u591a\u8fdb\u7a0b\u4f18\u4e8e\u591a\u7ebf\u7a0b def fib(n): if n<=2: return 1 return fib(n-1)+fib(n-2) if __name__ == \"__main__\": \"\"\" \u591a\u8fdb\u7a0b \"\"\" ### with\u4e0a\u4e0b\u6587\u7ba1\u7406 \u2014\u2014\u2014\u2014 \u7ebf\u7a0b\u6c60 with ThreadPoolExecutor(3) as executor: all_task = [executor.submit(fib, (num)) for num in range(25,35)] start_time = time.time() # as_completed\u65b9\u6cd5 for future in as_completed(all_task): data = future.result() print(\"exe result: {}\".format(data)) print(\"last time is: {}\".format(time.time()-start_time)) \"\"\" last time is: 3.895350217819214 \"\"\" 2\u3001\u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u4f18\u4e8e\u591a\u8fdb\u7a0b\u2014\u2014\u670d\u52a1\u5668\u5f00\u591a\u7ebf\u7a0b\u7684\u5f00\u9500\u8981\u8fdc\u8fdc\u5c0f\u4e8e\u5f00\u591a\u8fdb\u7a0b\u7684\u5f00\u9500\uff01 \u591a\u8fdb\u7a0b import time from concurrent.futures import ThreadPoolExecutor, as_completed from concurrent.futures import ProcessPoolExecutor # 2. \u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u4f18\u4e8e\u591a\u8fdb\u7a0b def random_sleep(n): # \u4f7f\u7528sleep\u6a21\u62dfio\u64cd\u4f5c time.sleep(n) return n if __name__ == \"__main__\": ### with\u4e0a\u4e0b\u6587\u7ba1\u7406 \u2014\u2014\u2014\u2014 \u591a\u8fdb\u7a0b with ProcessPoolExecutor(3) as executor: all_task = [executor.submit(random_sleep, (num)) for num in [2]*30] start_time = time.time() # as_completed\u65b9\u6cd5 for future in as_completed(all_task): data = future.result() print(\"exe result: {}\".format(data)) print(\"last time is: {}\".format(time.time()-start_time)) \"\"\" last time is: 20.01831293106079 \"\"\" \u591a\u7ebf\u7a0b import time from concurrent.futures import ThreadPoolExecutor, as_completed from concurrent.futures import ProcessPoolExecutor # 2. \u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u4f18\u4e8e\u591a\u8fdb\u7a0b def random_sleep(n): # \u4f7f\u7528sleep\u6a21\u62dfio\u64cd\u4f5c time.sleep(n) return n if __name__ == \"__main__\": ### with\u4e0a\u4e0b\u6587\u7ba1\u7406 \u2014\u2014\u2014\u2014 \u591a\u8fdb\u7a0b with ThreadPoolExecutor(3) as executor: all_task = [executor.submit(random_sleep, (num)) for num in [2]*30] start_time = time.time() # as_completed\u65b9\u6cd5 for future in as_completed(all_task): data = future.result() print(\"exe result: {}\".format(data)) print(\"last time is: {}\".format(time.time()-start_time)) \"\"\" last time is: 20.006372890472412 \"\"\" \u591a\u8fdb\u7a0b\u7f16\u7a0b fork import os # fork\u53ea\u80fd\u7528\u4e8elinux/unix\u4e2d # \u8fd0\u884cfork\u4f1a\u76f4\u63a5fork\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff01\u2014\u2014 \u6240\u4ee5\u4f1a\u6253\u53702\u6b21whw\uff01\u2014\u2014 \u5b50\u8fdb\u7a0b\u4f1a\u628a\u592b\u8fdb\u7a0b\u7684\u6570\u636e\u5b8c\u5168\u62f7\u8d1d\u4e00\u4efd\uff01 # \u5982\u679c\u628a\u6253\u5370\u653e\u5728fork\u4e4b\u524d\u53ea\u4f1a\u6253\u53701\u6b21 pid = os.fork() print(\"whw\") if pid == 0: print('\u5b50\u8fdb\u7a0b {} \uff0c\u7236\u8fdb\u7a0b\u662f\uff1a {}.' .format(os.getpid(), os.getppid())) else: print('\u6211\u662f\u7236\u8fdb\u7a0b\uff1a{}.'.format(pid)) \"\"\" whw \u6211\u662f\u7236\u8fdb\u7a0b\uff1a3001. whw \u5b50\u8fdb\u7a0b 3001 \uff0c\u7236\u8fdb\u7a0b\u662f\uff1a 3000. \"\"\" \u91cd\u8981\u57fa\u7840\u77e5\u8bc6\u70b9 \u81ea\u5df1\u4e4b\u524d\u603b\u7ed3\u8fc7\u7684\u535a\u5ba2\uff1a \u5e76\u53d1\u7f16\u7a0b\u4e4b\u2014\u2014\u591a\u8fdb\u7a0b \u8fdb\u7a0b\u6c60 \u2014\u2014 \u591a\u8fdb\u7a0b\u7f16\u7a0b\u7684\u9996\u9009 \u4e0e\u7ebf\u7a0b\u6c60\u7684\u7528\u6cd5\u51e0\u4e4e\u4e00\u81f4\uff01 multiprocessing\u6a21\u5757\u2014\u2014\u504f\u5411\u5e95\u5c42 \u7b80\u5355\u7528\u6cd5 import multiprocessing # \u591a\u8fdb\u7a0b\u7f16\u7a0b import time def get_html(n): time.sleep(n) print(\"sub_progress success\") return n if __name__ == \"__main__\": # \u6ce8\u610f2\u540e\u9762\u52a0\u9017\u53f7\uff01 progress = multiprocessing.Process(target=get_html, args=(2,)) print(progress.pid) # start\u4e4b\u524d\u4e3aNone progress.start() print(progress.pid) # 3036 progress.join() print(\"main progress end\") multiprocessing\u7684\u8fdb\u7a0b\u6c60 import multiprocessing # \u591a\u8fdb\u7a0b\u7f16\u7a0b import time def get_html(n): time.sleep(n) print(\"sub_progress success\") return n if __name__ == \"__main__\": # \u4f7f\u7528\u8fdb\u7a0b\u6c60 pool = multiprocessing.Pool(multiprocessing.cpu_count()) # \u63d0\u4ea4\u4efb\u52a1 \u2014\u2014 \u4f1a\u6709\u4e00\u4e2a\u8fd4\u56de\u503c result = pool.apply_async(get_html, args=(3,)) # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210 pool.close() # \u8c03\u7528join\u4e4b\u524d\u5fc5\u987bclose\uff0c\u4f7fpool\u4e0d\u518d\u63a5\u6536\u4efb\u4f55\u4efb\u52a1 pool.join() print(result.get()) \"\"\" sub_progress success 3 \"\"\" imap\u4e0eimap_unordered\u65b9\u6cd5 import multiprocessing # \u591a\u8fdb\u7a0b\u7f16\u7a0b import time def get_html(n): time.sleep(n) print(\"sub_progress success\") return n if __name__ == \"__main__\": # \u4f7f\u7528\u8fdb\u7a0b\u6c60 pool = multiprocessing.Pool(multiprocessing.cpu_count()) \"\"\" # imap\u65b9\u6cd5\uff1a\u6309\u7167\u6307\u5b9a\u987a\u5e8f\u6253\u5370 \"\"\" # for result in pool.imap(get_html, [1,5,3]): # print(\"{} sleep success\".format(result)) \"\"\" sub_progress success 1 sleep success sub_progress success sub_progress success 5 sleep success 3 sleep success \"\"\" \"\"\" # imap_unordered\u65b9\u6cd5\uff1a\u8c01\u5148\u5b8c\u6210\u5c31\u5148\u6253\u5370\u8c01 \"\"\" for result in pool.imap_unordered(get_html, [1,5,3]): print(\"{} sleep success\".format(result)) \"\"\" sub_progress success 1 sleep success sub_progress success 3 sleep success sub_progress success 5 sleep success \"\"\" \u8fdb\u7a0b\u95f4\u901a\u4fe1\u2014Queue/Pipe/Manager \u7531\u4e8e\u591a\u8fdb\u7a0b\u4e4b\u95f4\u6570\u636e\u662f\u4e0d\u5171\u4eab\u800c\u662f\u5b8c\u5168\u9694\u79bb\u7684\uff01 \u6240\u4ee5 \u5171\u4eab\u5168\u5c40\u53d8\u91cf\u4e0d\u80fd\u9002\u7528\u4e8e\u591a\u8fdb\u7a0b\u7f16\u7a0b\uff0c\u53ef\u4ee5\u9002\u7528\u4e8e\u591a\u7ebf\u7a0b\uff01 Queue\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1 import time from multiprocessing import Process, Queue # \u751f\u4ea7\u8005 def producer(queue): queue.put(\"a\") time.sleep(2) # \u6d88\u8d39\u8005 def consumer(queue): time.sleep(2) data = queue.get() print(data) if __name__ == \"__main__\": queue = Queue(10) my_producer = Process(target=producer, args=(queue,)) my_consumer = Process(target=consumer, args=(queue,)) my_producer.start() my_consumer.start() my_producer.join() my_consumer.join() \"\"\" a \"\"\" multiprocessing\u4e2d\u7684Queue\u4e0d\u80fd\u7528\u4e8ePool\u8fdb\u7a0b\u6c60! import time from multiprocessing import Process, Queue, Pool def producer(queue): queue.put(\"a\") time.sleep(2) def consumer(queue): time.sleep(2) data = queue.get() print(data) if __name__ == \"__main__\": queue = Queue(10) # Pool\u7684\u8fdb\u7a0b\u6c60 pool = Pool(2) pool.apply_async(producer, args=(queue,)) pool.apply_async(consumer, args=(queue,)) pool.close() pool.join() \"\"\" \u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff01\uff01\uff01 \"\"\" Pool\u4e2d\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u9700\u8981\u4f7f\u7528manager\u4e2d\u7684queue\uff01 import time from multiprocessing import Pool, Manager def producer(queue): queue.put(\"a\") time.sleep(2) def consumer(queue): time.sleep(2) data = queue.get() print(data) if __name__ == \"__main__\": queue = Manager().Queue(10) # Pool\u7684\u8fdb\u7a0b\u6c60 pool = Pool(2) pool.apply_async(producer, args=(queue,)) pool.apply_async(consumer, args=(queue,)) pool.close() pool.join() \"\"\" a \"\"\" \u901a\u8fc7Pipe\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\u2014\u2014Pipe\u53ea\u80fd\u9002\u7528\u4e8e\u4e24\u4e2a\u8fdb\u7a0b\u4f46\u5b83\u7684\u6027\u80fd\u9ad8\u4e8eQueue import time from multiprocessing import Process,Pipe def producer(pipe): pipe.send(\"whw\") def consumer(pipe): print(pipe.recv()) if __name__ == \"__main__\": # \u5b9e\u4f8b\u5316 recevie_pipe, send_pipe = Pipe() # pipe\u53ea\u80fd\u9002\u7528\u4e8e\u4e24\u4e2a\u8fdb\u7a0b my_producer= Process(target=producer, args=(send_pipe, )) my_consumer = Process(target=consumer, args=(recevie_pipe,)) my_producer.start() my_consumer.start() my_producer.join() my_consumer.join() \"\"\" whw \"\"\" \u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5176\u4ed6\u65b9\u5f0f\u2014\u2014\u5171\u4eab\u5185\u5b58\uff1a\u4f46\u4e00\u5b9a\u8981\u6ce8\u610f\u6570\u636e\u7684\u540c\u6b65\uff01 from multiprocessing import Process, Manager # \u5171\u4eab\u4e00\u4e2a\u5b57\u5178 def add_data(p_dict, key, value): p_dict[key] = value if __name__ == \"__main__\": progress_dict = Manager().dict() from queue import PriorityQueue first_progress = Process(target=add_data, args=(progress_dict, \"whw\", 22)) second_progress = Process(target=add_data, args=(progress_dict, \"naruto\", 23)) first_progress.start() second_progress.start() first_progress.join() second_progress.join() print(progress_dict) \"\"\" {'whw': 22, 'naruto': 23} \"\"\"","title":"05 Python\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347\u7bc7"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#_1","text":"\u64cd\u4f5c\u7cfb\u7edf\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2asocket\u63a5\u53e3, \u7528\u4e8e\u5b9e\u73b0TCP\u548cUDP, \u5b83\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u534f\u8bae\uff01","title":"\u4e94\u5c42\u7f51\u7edc\u6a21\u578b"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#socket","text":"django\u7684socket\u662f\u5b58\u5728\u4e8euwsgi\u4e2d\uff01","title":"socket\u7f16\u7a0b"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#_2","text":"\"\"\" client\u7aef \"\"\" import socket client = socket.socket(socket.AF_INET,socket.SOCK_STREAM) client.connect(('127.0.0.1', 8001)) while True: re_data = input() client.send(re_data.encode(\"utf8\")) data = client.recv(1024) print(data.decode(\"utf8\")) # client.send(\"whw\".encode(\"utf8\")) # data = client.recv(1024) # print (data.decode(\"utf8\")) # client.close() \"\"\" server\u7aef \"\"\" import socket import threading server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) # \u5728\u7ed1\u5b9a\u524d\u8c03\u7528setsockopt\u8ba9\u5957\u63a5\u5b57\u5141\u8bb8\u5730\u5740\u91cd\u590d\u5229\u7528 server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server.bind(('0.0.0.0', 8001)) server.listen() def handle_sock(sock, addr): while True: data = sock.recv(1024) print(data.decode(\"utf8\")) re_data = input() sock.send(re_data.encode(\"utf8\")) #\u83b7\u53d6\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e #\u4e00\u6b21\u83b7\u53d61k\u7684\u6570\u636e while True: sock, addr = server.accept() # \u7528\u7ebf\u7a0b\u53bb\u5904\u7406\u65b0\u63a5\u6536\u7684\u8fde\u63a5(\u7528\u6237) client_thread = threading.Thread(target=handle_sock, args=(sock, addr)) client_thread.start() # data = sock.recv(1024) # print(data.decode(\"utf8\")) # re_data = input() # sock.send(re_data.encode(\"utf8\")) # server.close() # sock.close()","title":"\u4f7f\u7528\u591a\u7ebf\u7a0b\u5b9e\u73b0\u591a\u7528\u6237\u8fde\u63a5"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#sockethttp","text":"\u5bf9url\u89e3\u6790\u5f97\u5230host\u548cpath(\u8c03\u7528urllib) \u4f7f\u7528socket\u8fdb\u884c\u8fde\u63a5 \u53d1\u9001get\u8bf7\u6c42, \u7136\u540e\u63a5\u53d7\u6570\u636e \u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u6790\u5904\u7406 \u6700\u540e\u65ad\u5f00socket\u8fde\u63a5 # requests -> urlib -> socket import socket from urllib.parse import urlparse def get_url(url): # \u901a\u8fc7socket\u8bf7\u6c42html url = urlparse(url) host = url.netloc path = url.path if path == \"\": path = \"/\" # \u5efa\u7acbsocket\u8fde\u63a5 client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # client.setblocking(False) client.connect((host, 80)) #\u963b\u585e\u4e0d\u4f1a\u6d88\u8017cpu # \u4e0d\u505c\u7684\u8be2\u95ee\u8fde\u63a5\u662f\u5426\u5efa\u7acb\u597d\uff0c \u9700\u8981while\u5faa\u73af\u4e0d\u505c\u7684\u53bb\u68c0\u67e5\u72b6\u6001 # \u505a\u8ba1\u7b97\u4efb\u52a1\u6216\u8005\u518d\u6b21\u53d1\u8d77\u5176\u4ed6\u7684\u8fde\u63a5\u8bf7\u6c42 client.send(\"GET {} HTTP/1.1\\r\\nHost:{}\\r\\nConnection:close\\r\\n\\r\\n\".format(path, host).encode(\"utf8\")) data = b\"\" while True: d = client.recv(1024) if d: data += d else: break data = data.decode(\"utf8\") html_data = data.split(\"\\r\\n\\r\\n\")[1] print(html_data) client.close() if __name__ == \"__main__\": import time start_time = time.time() for url in range(20): url = \"http://shop.projectsedu.com/goods/{}/\".format(url) get_url(url) print(time.time()-start_time)","title":"socket\u6a21\u62dfhttp\u8bf7\u6c42"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#gil","text":"GIL\u7684\u5168\u79f0\u662fGlobal Interpreter Lock python\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5e94\u4e8ec\u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b GIL\u4f7f\u5f97\u540c\u4e00\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4e00\u4e2acpu\u4e0a\u6267\u884c\u5b57\u8282\u7801, \u65e0\u6cd5\u5c06\u591a\u4e2a\u7ebf\u7a0b\u6620\u5c04\u5230\u591a\u4e2acpu\u4e0a\u6267\u884c GIL\u4f1a\u6839\u636e\u6267\u884c\u7684\u5b57\u8282\u7801\u884c\u6570\u4ee5\u53ca\u65f6\u95f4\u7247\u91ca\u653egil, gil\u5728\u9047\u5230io\u7684\u64cd\u4f5c\u65f6\u5019\u4e3b\u52a8\u91ca\u653e \u2014\u2014 GIL\u65e0\u6cd5\u4fdd\u8bc1\u7ebf\u7a0b\u7edd\u5bf9\u5b89\u5168 GIL\u7684\u7279\u70b9 Python\u5728\u591a\u7ebf\u7a0b\u4e0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6267\u884c\u65b9\u5f0f\u4e3a\uff1a \u83b7\u53d6GIL \u6267\u884c\u4ee3\u7801\u76f4\u5230sleep\u6216\u8005\u662fpython\u865a\u62df\u673a\u5c06\u5176\u6302\u8d77 \u91ca\u653eGIL \u4e00\u4e2aCPU\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b, \u4f8b\u5982\u4e00\u4e2aCPU \u6709\u4e09\u4e2a\u7ebf\u7a0b, \u9996\u5148\u7ebf\u7a0bA\u6267\u884c, \u7136\u540e\u7ebf\u7a0bA\u8fbe\u5230\u91ca\u653e\u6761\u4ef6\u8fdb\u884c\u91ca\u653eGIL, \u7ebf\u7a0bB\u548c\u7ebf\u7a0bC\u8fdb\u884c\u7ade\u4e89GIL, \u8c01\u62a2\u5230GIL, \u7ee7\u7eed\u6267\u884c\u3002 GIL\u65e0\u6cd5\u4fdd\u8bc1\u7ebf\u7a0b\u7edd\u5bf9\u5b89\u5168 total = 0 def add(): global total for i in range(1000000): total += 1 def desc(): global total for i in range(1000000): total -= 1 import threading thread1 = threading.Thread(target=add) thread2 = threading.Thread(target=desc) thread1.start() thread2.start() thread1.join() thread2.join() print(total) \"\"\" \u6bcf\u6b21\u7684\u7ed3\u679c\u90fd\u4e0d\u4e00\u6837:GIL\u4f1a\u5728\u6267\u884c\u5b8c\u4e00\u5b9a\u957f\u5ea6\u7684\u5b57\u8282\u7801\u540e\u81ea\u52a8\u91ca\u653e\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4e0d\u4e00\u5b9a\u4f1a\u4e00\u76f4\u5360GIL \"\"\"","title":"\u5168\u5c40\u89e3\u91ca\u5668\u9501\u2014\u2014GIL"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#_3","text":"\u5b9e\u73b0\u7ebf\u7a0b\u76842\u79cd\u65b9\u5f0f\uff1a # \u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u548c\u591a\u8fdb\u7a0b\u6027\u80fd\u5dee\u522b\u4e0d\u5927 import time import threading # \u5b9e\u73b0\u65b9\u5f0f1.\u901a\u8fc7Thread\u7c7b\u5b9e\u4f8b\u5316 def get_detail_html(url): print(\"get detail html started\") time.sleep(2) print(\"get detail html end\") def get_detail_url(url): print(\"get detail url started\") time.sleep(4) print(\"get detail url end\") # \u5b9e\u73b0\u65b9\u5f0f2. \u901a\u8fc7\u7ee7\u627fThread\u6765\u5b9e\u73b0\u591a\u7ebf\u7a0b class GetDetailHtml(threading.Thread): def __init__(self, name): super().__init__(name=name) def run(self): print(\"get detail html started\") time.sleep(2) print(\"get detail html end\") class GetDetailUrl(threading.Thread): def __init__(self, name): super().__init__(name=name) def run(self): print(\"get detail url started\") time.sleep(4) print(\"get detail url end\") if __name__ == \"__main__\": # \u65b9\u5f0f1 # thread1 = threading.Thread(target=get_detail_html,args=(\"\",)) # thread2 = threading.Thread(target=get_detail_html,args=(\"\",)) # \u65b9\u5f0f2 thread1 = GetDetailHtml(\"get_detail_html\") thread2 = GetDetailUrl(\"get_detail_url\") # \u5f53\u4e3b\u7ebf\u7a0b\u9000\u51fa\u7684\u65f6\u5019\uff0c \u5b50\u7ebf\u7a0bkill\u6389 \u2014\u2014 \u8bbe\u7f6e\u5b88\u62a4\u7ebf\u7a0b\uff01\u5728start\u4e4b\u524d\u5199\uff01 # \u53ea\u5c06thread2\u8bbe\u7f6e\u4e3a\u5b88\u62a4\u7ebf\u7a0b\u7684\u8bdd\uff0c\u4e0d\u4f1a\u4e3b\u7ebf\u7a0b\u6267\u884c\u5b8c\u4e5f\u4f1a\u628athread2\u505c\u6389\uff01thread2\u7684end\u4e0d\u4f1a\u6253\u5370\uff01 thread2.setDaemon(True) # \u5b88\u62a4\u7ebf\u7a0b start_time = time.time() thread1.start() thread2.start() # \u7b49\u5f852\u4e2a\u7ebf\u7a0b\u6267\u884c\u5b8c\u6210\u6700\u540e\u624d\u6267\u884c\u6253\u5370 thread1.join() thread2.join() print (\"last time: {}\".format(time.time()-start_time))","title":"\u591a\u7ebf\u7a0b\u7f16\u7a0b"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#queue","text":"\u7ebf\u7a0b\u95f4\u901a\u4fe11\uff1a\u5171\u4eab\u53d8\u91cf\u2014\u2014\u4e0d\u63a8\u8350 \u5171\u4eab\u53d8\u91cf \u4f7f\u7528\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf, \u7136\u540e\u4e0d\u540c\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u5e76\u4fee\u6539\u8fd9\u4e2a\u53d8\u91cf\uff01\u2014\u2014 \u8bb0\u5f97\u52a0\u9501\uff01 # 1. \u7ebf\u7a0b\u901a\u4fe1\u65b9\u5f0f- \u5171\u4eab\u53d8\u91cf import time from threading import Thread,RLock # \u5168\u5c40\u7684\u53d8\u91cf detail_url_list = list() # 1. \u751f\u4ea7\u8005\u5f53\u751f\u4ea710\u4e2aurl\u4ee5\u540e\u5c31\u5c31\u7b49\u5f85\uff0c\u4fdd\u8bc1detail_url_list\u4e2d\u6700\u591a\u53ea\u6709\u5341\u4e2aurl # 2. \u5f53url_list\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u6d88\u8d39\u8005\u5c31\u6682\u505c def get_detail_html(lock): # \u722c\u53d6\u6587\u7ae0\u8be6\u60c5\u9875 # \u4e00\u76f4\u722c\u53d6 while True: if len(detail_url_list): lock.acquire() if len(detail_url_list): url = detail_url_list.pop() lock.release() # for url in detail_url_list: print(\"get detail html started\") time.sleep(2) print(\"get detail html end\") else: lock.release() time.sleep(1) def get_detail_url(lock): # \u4e00\u76f4\u722c\u53d6 while True: print(\"get detail url started\") time.sleep(4) for i in range(20): lock.acquire() if len(detail_url_list) >= 10: lock.release() time.sleep(1) else: detail_url_list.append(\"http://projectsedu.com/{id}\".format(id=i)) lock.release() print(\"get detail url end\") if __name__ == \"__main__\": lock = RLock() thread_detail_url = Thread(target=get_detail_url, args=(lock,)) for i in range(10): html_thread = Thread(target=get_detail_html, args=(lock,)) html_thread.start() start_time = time.time() \u7ebf\u7a0b\u95f4\u901a\u4fe12\uff1a\u901a\u8fc7queue\u8fdb\u884c\u7ebf\u7a0b\u95f4\u540c\u6b65\u2014\u2014\u63a8\u8350 # \u901a\u8fc7queue\u7684\u65b9\u5f0f\u8fdb\u884c\u7ebf\u7a0b\u95f4\u540c\u6b65 import time import threading from queue import Queue def get_detail_html(queue): #\u722c\u53d6\u6587\u7ae0\u8be6\u60c5\u9875 while True: # \u5982\u679c\u961f\u5217\u4e3a\u7a7a\u4f1a\u4e00\u76f4\u963b\u585e # get \u2014\u2014 \u7ebf\u7a0b\u5b89\u5168\uff1a\u6bcf\u5bb6\u9501\u4f46\u662f\u5b9e\u9645\u4f7f\u7528\u7684\u662fdeque\uff0cdeque\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 url = queue.get() # for url in detail_url_list: print(\"get detail html started\") time.sleep(2) print(\"get detail html end\") def get_detail_url(queue): # \u722c\u53d6\u6587\u7ae0\u5217\u8868\u9875 while True: print(\"get detail url started\") time.sleep(4) for i in range(20): # put \u2014\u2014 \u7ebf\u7a0b\u5b89\u5168\uff1a\u52a0\u4e86\u9501 queue.put(\"http://projectsedu.com/{id}\".format(id=i)) print(\"get detail url end\") if __name__ == \"__main__\": # \u8bbe\u7f6e\u4e00\u4e2a\u6700\u5927\u503c detail_url_queue = Queue(maxsize=1000) thread_detail_url = threading.Thread(target=get_detail_url, args=(detail_url_queue,)) for i in range(10): html_thread = threading.Thread(target=get_detail_html, args=(detail_url_queue,)) html_thread.start() start_time = time.time() # \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6210\u5bf9\u4f7f\u7528 detail_url_queue.task_done() detail_url_queue.join() #\u5f53\u4e3b\u7ebf\u7a0b\u9000\u51fa\u7684\u65f6\u5019\uff0c \u5b50\u7ebf\u7a0bkill\u6389 print (\"last time: {}\".format(time.time()-start_time))","title":"\u7ebf\u7a0b\u95f4\u901a\u4fe1:\u5171\u4eab\u53d8\u91cf\u4e0eQueue *"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#_4","text":"\u4e00\u4e2a\u7ecf\u5178\u7684\u95ee\u9898 ### \u5047\u8bbe\u67092\u4e2a\u7ebf\u7a0b\uff01\u4e00\u4e2a\u52a0\u4e00\u4e2a\u51cf\uff01 def add(a): a += 1 def desc(a): a -= 1 # add\u7684\u8fc7\u7a0b \"\"\" 1\u3001load a a = 0 2\u3001load 1 1 3\u3001+ +1 4\u3001\u8d4b\u503c\u7ed9a \u2014\u2014 a=1 \"\"\" # desc\u7684\u8fc7\u7a0b \"\"\" 1\u3001load a a = 0 2\u3001load 1 1 3\u3001- -1 4\u3001\u8d4b\u503c\u7ed9a \u2014\u2014 a=-1 \"\"\" # \u95ee\u9898 \"\"\" \u7b2c4\u6b65\uff1a\u4e24\u4e2a\u8d4b\u503c\u8bed\u53e5\u6709\u4e00\u4e2a\u5148\u8fd0\u884c\u4e00\u4e2a\u540e\u8fd0\u884c\uff0ca\u8981\u4e48\u662f1\u8981\u4e48\u662f-1\uff0c\u4f46\u662f\u5c31\u662f\u4e0d\u7b49\u4e8e0\uff01 \u4f46\u662f\u6211\u4eec\u671f\u671b\u4e24\u4e2a\u7ebf\u7a0b\u6267\u884c\u540e\u7ed3\u679c\u4e3a0\uff01 \"\"\" import dis print(dis.dis(add)) print(dis.dis(desc)) \"\"\" 4 0 LOAD_FAST 0 (a) 2 LOAD_CONST 1 (1) 4 INPLACE_ADD 6 STORE_FAST 0 (a) 8 LOAD_CONST 0 (None) 10 RETURN_VALUE None 7 0 LOAD_FAST 0 (a) 2 LOAD_CONST 1 (1) 4 INPLACE_SUBTRACT 6 STORE_FAST 0 (a) 8 LOAD_CONST 0 (None) 10 RETURN_VALUE None \"\"\" Lock\u4e0eRlock \u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\uff0c\u53ef\u4ee5\u8fde\u7eed\u8c03\u7528\u591a\u6b21acquire\uff0c \u4e00\u5b9a\u8981\u6ce8\u610facquire\u7684\u6b21\u6570\u8981\u548crelease\u7684\u6b21\u6570\u76f8\u7b49\uff01 \u83b7\u53d6\u9501\u4e0e\u91ca\u653e\u9501\u9700\u8981\u65f6\u95f4\uff0c\u4f1a\u5f71\u54cd\u6027\u80fd\u3002 \u9501\u4f1a\u5f15\u8d77\u6b7b\u9501acquire\u591a\u6b21\u4f46\u662f\u4e0d\u91ca\u653e(release)\u3002 import threading from threading import Lock, RLock, Condition # \u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u9762\uff0c\u53ef\u4ee5\u8fde\u7eed\u8c03\u7528\u591a\u6b21acquire\uff0c \u4e00\u5b9a\u8981\u6ce8\u610facquire\u7684\u6b21\u6570\u8981\u548crelease\u7684\u6b21\u6570\u76f8\u7b49 total = 0 lock = RLock() def add(): # 1. dosomething1 # 2. io\u64cd\u4f5c # 1. dosomething3 global lock global total for i in range(1000000): # \u83b7\u53d6\u9501 lock.acquire() lock.acquire() total += 1 # \u91ca\u653e\u9501 lock.release() lock.release() def desc(): global total global lock for i in range(1000000): # \u83b7\u53d6\u9501 lock.acquire() total -= 1 # \u91ca\u653e\u9501 lock.release() thread1 = threading.Thread(target=add) thread2 = threading.Thread(target=desc) thread1.start() thread2.start() thread1.join() thread2.join() print(total) # 0 # 1. \u7528\u9501\u4f1a\u5f71\u54cd\u6027\u80fd # 2. \u9501\u4f1a\u5f15\u8d77\u6b7b\u9501 # \u6b7b\u9501\u7684\u60c5\u51b5 A\uff08a\uff0cb\uff09 \"\"\" A(a\u3001b) acquire (a) acquire (b) B(a\u3001b) acquire (a) acquire (b) \"\"\" threading.Condition \u7528\u4e8e\u590d\u6742\u7684\u7ebf\u7a0b\u95f4\u540c\u6b65\u7684\u9501\uff1a \u6761\u4ef6\u53d8\u91cf import threading # \u901a\u8fc7condition\u5b8c\u6210\u534f\u540c\u8bfb\u8bd7 class XiaoAi(threading.Thread): def __init__(self, cond): super().__init__(name=\"\u5c0f\u7231\") self.cond = cond def run(self): with self.cond: self.cond.wait() print(\"{} : \u5728 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u597d\u554a \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u541b\u4f4f\u957f\u6c5f\u5c3e \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u5171\u996e\u957f\u6c5f\u6c34 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u6b64\u6068\u4f55\u65f6\u5df2 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u5b9a\u4e0d\u8d1f\u76f8\u601d\u610f \".format(self.name)) self.cond.notify() class TianMao(threading.Thread): def __init__(self, cond): super().__init__(name=\"\u5929\u732b\u7cbe\u7075\") self.cond = cond def run(self): with self.cond: print(\"{} : \u5c0f\u7231\u540c\u5b66 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u6211\u4eec\u6765\u5bf9\u53e4\u8bd7\u5427 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u6211\u4f4f\u957f\u6c5f\u5934 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u65e5\u65e5\u601d\u541b\u4e0d\u89c1\u541b \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u6b64\u6c34\u51e0\u65f6\u4f11 \".format(self.name)) self.cond.notify() self.cond.wait() print(\"{} : \u53ea\u613f\u541b\u5fc3\u4f3c\u6211\u5fc3 \".format(self.name)) self.cond.notify() self.cond.wait() if __name__ == \"__main__\": # from concurrent import futures cond = threading.Condition() xiaoai = XiaoAi(cond) tianmao = TianMao(cond) # \u542f\u52a8\u987a\u5e8f\u5f88\u91cd\u8981 # \u5728\u8c03\u7528with cond\u4e4b\u540e\u624d\u80fd\u8c03\u7528wait\u6216\u8005notify\u65b9\u6cd5 # condition\u6709\u4e24\u5c42\u9501\uff0c \u4e00\u628a\u5e95\u5c42\u9501\u4f1a\u5728\u7ebf\u7a0b\u8c03\u7528\u4e86wait\u65b9\u6cd5\u7684\u65f6\u5019\u91ca\u653e\uff0c \u4e0a\u9762\u7684\u9501\u4f1a\u5728\u6bcf\u6b21\u8c03\u7528wait\u7684\u65f6\u5019\u5206\u914d\u4e00\u628a\u5e76\u653e\u5165\u5230cond\u7684\u7b49\u5f85\u961f\u5217\u4e2d\uff0c\u7b49\u5230notify\u65b9\u6cd5\u7684\u5524\u9192 xiaoai.start() tianmao.start() threading.Semaphore \u7528\u4e8e\u63a7\u5236\u8fdb\u5165\u6570\u91cf\u7684\u9501\uff1a \u4fe1\u53f7\u91cf # Semaphore \u662f\u7528\u4e8e\u63a7\u5236\u8fdb\u5165\u6570\u91cf\u7684\u9501 # \u6587\u4ef6\uff0c \u8bfb\u3001\u5199\uff0c \u5199\u4e00\u822c\u53ea\u662f\u7528\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u5199\uff0c\u8bfb\u53ef\u4ee5\u5141\u8bb8\u6709\u591a\u4e2a # \u505a\u722c\u866b\uff1a\u9650\u5236\u722c\u866b\u7684\u5e76\u53d1\u6570\u91cf import threading import time class HtmlSpider(threading.Thread): def __init__(self, url, sem): super().__init__() self.url = url self.sem = sem def run(self): time.sleep(2) print(\"got html text success\") self.sem.release() class UrlProducer(threading.Thread): def __init__(self, sem): super().__init__() self.sem = sem def run(self): for i in range(20): self.sem.acquire() html_thread = HtmlSpider(\"https://baidu.com/{}\".format(i), self.sem) html_thread.start() if __name__ == \"__main__\": sem = threading.Semaphore(3) url_producer = UrlProducer(sem) url_producer.start()","title":"\u7ebf\u7a0b\u540c\u6b65 *"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#_5","text":"\u4e3a\u4ec0\u4e48\u8981\u7528\u7ebf\u7a0b\u6c60 1\u3001\u4e3b\u7ebf\u7a0b\u4e2d\u53ef\u4ee5\u83b7\u53d6\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u7684\u72b6\u6001\u6216\u8005\u67d0\u4e00\u4e2a\u4efb\u52a1\u7684\u72b6\u6001\uff0c\u4ee5\u53ca\u8fd4\u56de\u503c 2\u3001\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u5b8c\u6210\u7684\u65f6\u5019\u6211\u4eec\u4e3b\u7ebf\u7a0b\u80fd\u7acb\u5373\u77e5\u9053 3\u3001futures\u53ef\u4ee5\u8ba9\u591a\u7ebf\u7a0b\u548c\u591a\u8fdb\u7a0b\u7f16\u7801\u63a5\u53e3\u4e00\u81f4 \u521d\u7ea7\u7684\u5199\u6cd5 from concurrent.futures import ThreadPoolExecutor import time def get_html(times): time.sleep(times) print(\"get page {} success\".format(times)) return times executor = ThreadPoolExecutor(max_workers=2) # \u901a\u8fc7submit\u51fd\u6570\u63d0\u4ea4\u6267\u884c\u7684\u51fd\u6570\u5230\u7ebf\u7a0b\u6c60\u4e2d, submit \u662f\u7acb\u5373\u8fd4\u56de task1 = executor.submit(get_html, (3)) task2 = executor.submit(get_html, (2)) # done\u65b9\u6cd5\u7528\u4e8e\u5224\u5b9a\u67d0\u4e2a\u4efb\u52a1\u662f\u5426\u5b8c\u6210 print(task1.done()) print(task2.cancel()) # \u56e0\u4e3a\u4e0a\u9762\u7ebf\u7a0b\u6c60\u8bbe\u7f6e\u7684\u662f2\u6b63\u597d\u80fd\u540c\u65f6\u653e\u5728\u7ebf\u7a0b\u6c60\u4e2d\uff0c\u6240\u4ee5\u8fd9\u91cccancel\u7684\u8bdd\u662fFalse time.sleep(3) print(task1.done()) #result\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6task\u7684\u6267\u884c\u7ed3\u679c print(task1.result()) \u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de\u2014\u2014as_completed\uff1a\u63a8\u8350 import time from concurrent.futures import ThreadPoolExecutor, as_completed def get_html(times): time.sleep(times) print(\"get page {} success\".format(times)) return times executor = ThreadPoolExecutor(max_workers=2) urls = [3,2,4] # \u5217\u8868\u63a8\u5bfc\u5f0f all_task = [executor.submit(get_html, (url)) for url in urls] # wait(all_task, return_when=FIRST_COMPLETED) # \u8981\u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de for future in as_completed(all_task): data = future.result() print(\"get {} page\".format(data)) \u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de\u2014\u2014\u7ebf\u7a0b\u6c60\u5bf9\u8c61\u7684map import time from concurrent.futures import ThreadPoolExecutor def get_html(times): time.sleep(times) print(\"get page {} success\".format(times)) return times executor = ThreadPoolExecutor(max_workers=2) # \u8981\u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de urls = [3,2,4] # \u5217\u8868\u63a8\u5bfc\u5f0f all_task = [executor.submit(get_html, (url)) for url in urls] # \u901a\u8fc7executor\u7684map\u83b7\u53d6\u5df2\u7ecf\u5b8c\u6210\u7684task\u7684\u503c for data in executor.map(get_html, urls): print(\"get {} page\".format(data)) wait\u2014\u2014\u7b49\u5f85\u67d0\u4e9b\u4e8b\u4ef6\u53d1\u751f\u5b8c\u518d\u6267\u884c import time from concurrent.futures import ThreadPoolExecutor,wait,FIRST_COMPLETED def get_html(times): time.sleep(times) print(\"get page {} success\".format(times)) return times executor = ThreadPoolExecutor(max_workers=2) # \u8981\u83b7\u53d6\u5df2\u7ecf\u6210\u529f\u7684task\u7684\u8fd4\u56de urls = [3,2,4] # \u5217\u8868\u63a8\u5bfc\u5f0f all_task = [executor.submit(get_html, (url)) for url in urls] # \u963b\u585e\u4e3b\u7ebf\u7a0b\uff0c\u7b49\u5230\u6240\u6709\u7684\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\u540e\u6267\u884c\u4e0b\u9762\u7684 wait(all_task) \"\"\" # \u7b2c\u4e00\u4e2atask\u6267\u884c\u5b8c\u4e4b\u540e\u6267\u884c\u4e0b\u9762\u7684\uff01 wait(all_task,return_when=FIRST_COMPLETED) \"\"\" print(\"main\") # \u901a\u8fc7executor\u7684map\u83b7\u53d6\u5df2\u7ecf\u5b8c\u6210\u7684task\u7684\u503c for data in executor.map(get_html, urls): print(\"get {} page\".format(data))","title":"\u7ebf\u7a0b\u6c60"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#_6","text":"\u8017cpu\u7684\u64cd\u4f5c\uff0c\u7528\u591a\u8fdb\u7a0b\u7f16\u7a0b\u3002 \u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c \u4f7f\u7528\u591a\u7ebf\u7a0b\u7f16\u7a0b\u3002 \u8fdb\u7a0b\u5207\u6362\u4ee3\u4ef7\u8981\u9ad8\u4e8e\u7ebf\u7a0b\uff01 1\u3001\u5bf9\u4e8e\u8017\u8d39cpu\u7684\u64cd\u4f5c\uff0c\u591a\u8fdb\u7a0b\u4f18\u4e8e\u591a\u7ebf\u7a0b \u591a\u8fdb\u7a0b import time from concurrent.futures import ThreadPoolExecutor, as_completed from concurrent.futures import ProcessPoolExecutor # 1. \u5bf9\u4e8e\u8017\u8d39cpu\u7684\u64cd\u4f5c\uff0c\u591a\u8fdb\u7a0b\u4f18\u4e8e\u591a\u7ebf\u7a0b def fib(n): if n<=2: return 1 return fib(n-1)+fib(n-2) if __name__ == \"__main__\": \"\"\" \u591a\u8fdb\u7a0b \"\"\" ### with\u4e0a\u4e0b\u6587\u7ba1\u7406 \u2014\u2014\u2014\u2014 \u8fdb\u57ce\u6c60 with ProcessPoolExecutor(3) as executor: all_task = [executor.submit(fib, (num)) for num in range(25,35)] start_time = time.time() # as_completed\u65b9\u6cd5 for future in as_completed(all_task): data = future.result() print(\"exe result: {}\".format(data)) print(\"last time is: {}\".format(time.time()-start_time)) \"\"\" last time is: 2.5451011657714844 \"\"\" \u591a\u7ebf\u7a0b import time from concurrent.futures import ThreadPoolExecutor, as_completed from concurrent.futures import ProcessPoolExecutor # 1. \u5bf9\u4e8e\u8017\u8d39cpu\u7684\u64cd\u4f5c\uff0c\u591a\u8fdb\u7a0b\u4f18\u4e8e\u591a\u7ebf\u7a0b def fib(n): if n<=2: return 1 return fib(n-1)+fib(n-2) if __name__ == \"__main__\": \"\"\" \u591a\u8fdb\u7a0b \"\"\" ### with\u4e0a\u4e0b\u6587\u7ba1\u7406 \u2014\u2014\u2014\u2014 \u7ebf\u7a0b\u6c60 with ThreadPoolExecutor(3) as executor: all_task = [executor.submit(fib, (num)) for num in range(25,35)] start_time = time.time() # as_completed\u65b9\u6cd5 for future in as_completed(all_task): data = future.result() print(\"exe result: {}\".format(data)) print(\"last time is: {}\".format(time.time()-start_time)) \"\"\" last time is: 3.895350217819214 \"\"\" 2\u3001\u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u4f18\u4e8e\u591a\u8fdb\u7a0b\u2014\u2014\u670d\u52a1\u5668\u5f00\u591a\u7ebf\u7a0b\u7684\u5f00\u9500\u8981\u8fdc\u8fdc\u5c0f\u4e8e\u5f00\u591a\u8fdb\u7a0b\u7684\u5f00\u9500\uff01 \u591a\u8fdb\u7a0b import time from concurrent.futures import ThreadPoolExecutor, as_completed from concurrent.futures import ProcessPoolExecutor # 2. \u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u4f18\u4e8e\u591a\u8fdb\u7a0b def random_sleep(n): # \u4f7f\u7528sleep\u6a21\u62dfio\u64cd\u4f5c time.sleep(n) return n if __name__ == \"__main__\": ### with\u4e0a\u4e0b\u6587\u7ba1\u7406 \u2014\u2014\u2014\u2014 \u591a\u8fdb\u7a0b with ProcessPoolExecutor(3) as executor: all_task = [executor.submit(random_sleep, (num)) for num in [2]*30] start_time = time.time() # as_completed\u65b9\u6cd5 for future in as_completed(all_task): data = future.result() print(\"exe result: {}\".format(data)) print(\"last time is: {}\".format(time.time()-start_time)) \"\"\" last time is: 20.01831293106079 \"\"\" \u591a\u7ebf\u7a0b import time from concurrent.futures import ThreadPoolExecutor, as_completed from concurrent.futures import ProcessPoolExecutor # 2. \u5bf9\u4e8eio\u64cd\u4f5c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u4f18\u4e8e\u591a\u8fdb\u7a0b def random_sleep(n): # \u4f7f\u7528sleep\u6a21\u62dfio\u64cd\u4f5c time.sleep(n) return n if __name__ == \"__main__\": ### with\u4e0a\u4e0b\u6587\u7ba1\u7406 \u2014\u2014\u2014\u2014 \u591a\u8fdb\u7a0b with ThreadPoolExecutor(3) as executor: all_task = [executor.submit(random_sleep, (num)) for num in [2]*30] start_time = time.time() # as_completed\u65b9\u6cd5 for future in as_completed(all_task): data = future.result() print(\"exe result: {}\".format(data)) print(\"last time is: {}\".format(time.time()-start_time)) \"\"\" last time is: 20.006372890472412 \"\"\"","title":"\u591a\u8fdb\u7a0b\u4e0e\u591a\u7ebf\u7a0b\u7684\u5bf9\u6bd4"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#_7","text":"fork import os # fork\u53ea\u80fd\u7528\u4e8elinux/unix\u4e2d # \u8fd0\u884cfork\u4f1a\u76f4\u63a5fork\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff01\u2014\u2014 \u6240\u4ee5\u4f1a\u6253\u53702\u6b21whw\uff01\u2014\u2014 \u5b50\u8fdb\u7a0b\u4f1a\u628a\u592b\u8fdb\u7a0b\u7684\u6570\u636e\u5b8c\u5168\u62f7\u8d1d\u4e00\u4efd\uff01 # \u5982\u679c\u628a\u6253\u5370\u653e\u5728fork\u4e4b\u524d\u53ea\u4f1a\u6253\u53701\u6b21 pid = os.fork() print(\"whw\") if pid == 0: print('\u5b50\u8fdb\u7a0b {} \uff0c\u7236\u8fdb\u7a0b\u662f\uff1a {}.' .format(os.getpid(), os.getppid())) else: print('\u6211\u662f\u7236\u8fdb\u7a0b\uff1a{}.'.format(pid)) \"\"\" whw \u6211\u662f\u7236\u8fdb\u7a0b\uff1a3001. whw \u5b50\u8fdb\u7a0b 3001 \uff0c\u7236\u8fdb\u7a0b\u662f\uff1a 3000. \"\"\" \u91cd\u8981\u57fa\u7840\u77e5\u8bc6\u70b9 \u81ea\u5df1\u4e4b\u524d\u603b\u7ed3\u8fc7\u7684\u535a\u5ba2\uff1a \u5e76\u53d1\u7f16\u7a0b\u4e4b\u2014\u2014\u591a\u8fdb\u7a0b \u8fdb\u7a0b\u6c60 \u2014\u2014 \u591a\u8fdb\u7a0b\u7f16\u7a0b\u7684\u9996\u9009 \u4e0e\u7ebf\u7a0b\u6c60\u7684\u7528\u6cd5\u51e0\u4e4e\u4e00\u81f4\uff01 multiprocessing\u6a21\u5757\u2014\u2014\u504f\u5411\u5e95\u5c42 \u7b80\u5355\u7528\u6cd5 import multiprocessing # \u591a\u8fdb\u7a0b\u7f16\u7a0b import time def get_html(n): time.sleep(n) print(\"sub_progress success\") return n if __name__ == \"__main__\": # \u6ce8\u610f2\u540e\u9762\u52a0\u9017\u53f7\uff01 progress = multiprocessing.Process(target=get_html, args=(2,)) print(progress.pid) # start\u4e4b\u524d\u4e3aNone progress.start() print(progress.pid) # 3036 progress.join() print(\"main progress end\") multiprocessing\u7684\u8fdb\u7a0b\u6c60 import multiprocessing # \u591a\u8fdb\u7a0b\u7f16\u7a0b import time def get_html(n): time.sleep(n) print(\"sub_progress success\") return n if __name__ == \"__main__\": # \u4f7f\u7528\u8fdb\u7a0b\u6c60 pool = multiprocessing.Pool(multiprocessing.cpu_count()) # \u63d0\u4ea4\u4efb\u52a1 \u2014\u2014 \u4f1a\u6709\u4e00\u4e2a\u8fd4\u56de\u503c result = pool.apply_async(get_html, args=(3,)) # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210 pool.close() # \u8c03\u7528join\u4e4b\u524d\u5fc5\u987bclose\uff0c\u4f7fpool\u4e0d\u518d\u63a5\u6536\u4efb\u4f55\u4efb\u52a1 pool.join() print(result.get()) \"\"\" sub_progress success 3 \"\"\" imap\u4e0eimap_unordered\u65b9\u6cd5 import multiprocessing # \u591a\u8fdb\u7a0b\u7f16\u7a0b import time def get_html(n): time.sleep(n) print(\"sub_progress success\") return n if __name__ == \"__main__\": # \u4f7f\u7528\u8fdb\u7a0b\u6c60 pool = multiprocessing.Pool(multiprocessing.cpu_count()) \"\"\" # imap\u65b9\u6cd5\uff1a\u6309\u7167\u6307\u5b9a\u987a\u5e8f\u6253\u5370 \"\"\" # for result in pool.imap(get_html, [1,5,3]): # print(\"{} sleep success\".format(result)) \"\"\" sub_progress success 1 sleep success sub_progress success sub_progress success 5 sleep success 3 sleep success \"\"\" \"\"\" # imap_unordered\u65b9\u6cd5\uff1a\u8c01\u5148\u5b8c\u6210\u5c31\u5148\u6253\u5370\u8c01 \"\"\" for result in pool.imap_unordered(get_html, [1,5,3]): print(\"{} sleep success\".format(result)) \"\"\" sub_progress success 1 sleep success sub_progress success 3 sleep success sub_progress success 5 sleep success \"\"\"","title":"\u591a\u8fdb\u7a0b\u7f16\u7a0b"},{"location":"python\u8fdb\u9636/\u5e76\u53d1\u7f16\u7a0b\u63d0\u5347/#queuepipemanager","text":"\u7531\u4e8e\u591a\u8fdb\u7a0b\u4e4b\u95f4\u6570\u636e\u662f\u4e0d\u5171\u4eab\u800c\u662f\u5b8c\u5168\u9694\u79bb\u7684\uff01 \u6240\u4ee5 \u5171\u4eab\u5168\u5c40\u53d8\u91cf\u4e0d\u80fd\u9002\u7528\u4e8e\u591a\u8fdb\u7a0b\u7f16\u7a0b\uff0c\u53ef\u4ee5\u9002\u7528\u4e8e\u591a\u7ebf\u7a0b\uff01 Queue\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1 import time from multiprocessing import Process, Queue # \u751f\u4ea7\u8005 def producer(queue): queue.put(\"a\") time.sleep(2) # \u6d88\u8d39\u8005 def consumer(queue): time.sleep(2) data = queue.get() print(data) if __name__ == \"__main__\": queue = Queue(10) my_producer = Process(target=producer, args=(queue,)) my_consumer = Process(target=consumer, args=(queue,)) my_producer.start() my_consumer.start() my_producer.join() my_consumer.join() \"\"\" a \"\"\" multiprocessing\u4e2d\u7684Queue\u4e0d\u80fd\u7528\u4e8ePool\u8fdb\u7a0b\u6c60! import time from multiprocessing import Process, Queue, Pool def producer(queue): queue.put(\"a\") time.sleep(2) def consumer(queue): time.sleep(2) data = queue.get() print(data) if __name__ == \"__main__\": queue = Queue(10) # Pool\u7684\u8fdb\u7a0b\u6c60 pool = Pool(2) pool.apply_async(producer, args=(queue,)) pool.apply_async(consumer, args=(queue,)) pool.close() pool.join() \"\"\" \u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff01\uff01\uff01 \"\"\" Pool\u4e2d\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u9700\u8981\u4f7f\u7528manager\u4e2d\u7684queue\uff01 import time from multiprocessing import Pool, Manager def producer(queue): queue.put(\"a\") time.sleep(2) def consumer(queue): time.sleep(2) data = queue.get() print(data) if __name__ == \"__main__\": queue = Manager().Queue(10) # Pool\u7684\u8fdb\u7a0b\u6c60 pool = Pool(2) pool.apply_async(producer, args=(queue,)) pool.apply_async(consumer, args=(queue,)) pool.close() pool.join() \"\"\" a \"\"\" \u901a\u8fc7Pipe\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\u2014\u2014Pipe\u53ea\u80fd\u9002\u7528\u4e8e\u4e24\u4e2a\u8fdb\u7a0b\u4f46\u5b83\u7684\u6027\u80fd\u9ad8\u4e8eQueue import time from multiprocessing import Process,Pipe def producer(pipe): pipe.send(\"whw\") def consumer(pipe): print(pipe.recv()) if __name__ == \"__main__\": # \u5b9e\u4f8b\u5316 recevie_pipe, send_pipe = Pipe() # pipe\u53ea\u80fd\u9002\u7528\u4e8e\u4e24\u4e2a\u8fdb\u7a0b my_producer= Process(target=producer, args=(send_pipe, )) my_consumer = Process(target=consumer, args=(recevie_pipe,)) my_producer.start() my_consumer.start() my_producer.join() my_consumer.join() \"\"\" whw \"\"\" \u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684\u5176\u4ed6\u65b9\u5f0f\u2014\u2014\u5171\u4eab\u5185\u5b58\uff1a\u4f46\u4e00\u5b9a\u8981\u6ce8\u610f\u6570\u636e\u7684\u540c\u6b65\uff01 from multiprocessing import Process, Manager # \u5171\u4eab\u4e00\u4e2a\u5b57\u5178 def add_data(p_dict, key, value): p_dict[key] = value if __name__ == \"__main__\": progress_dict = Manager().dict() from queue import PriorityQueue first_progress = Process(target=add_data, args=(progress_dict, \"whw\", 22)) second_progress = Process(target=add_data, args=(progress_dict, \"naruto\", 23)) first_progress.start() second_progress.start() first_progress.join() second_progress.join() print(progress_dict) \"\"\" {'whw': 22, 'naruto': 23} \"\"\"","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1\u2014Queue/Pipe/Manager"},{"location":"python\u8fdb\u9636/\u63cf\u8ff0\u7b26/","text":"\u63cf\u8ff0\u7b26\u7684\u5b9a\u4e49 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\"\u5047\u8bbe\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u88ab\u7ed1\u5b9a\u4e86( __get__ , __set__ , __delete__ )\u8fd9\u4e09\u4e2a\u65b9\u6cd5\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u65b9\u6cd5\"\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8be5\u5c5e\u6027\u4e3a\"\u63cf\u8ff0\u7b26\" class Foo(object): def __init__(self, name, age): self.name = name self.age = age foo = Foo(\"Wanghw\", 18) \u6211\u4eec\u4e0d\u80fd\u79f0 foo.name, foo.age \u8fd9\u4e24\u4e2a\u5c5e\u6027\u4e3a\u63cf\u8ff0\u7b26\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6ca1\u6709\u7ed1\u5b9a\u4e0a\u9762\u4e09\u4e2a\u65b9\u6cd5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5bf9\u8c61\u7684\u5c5e\u6027\u8bbf\u95ee\u662f\u901a\u8fc7get, set, delete\u8fd9\u4e09\u4e2a\u65b9\u6cd5\u8bbf\u95ee\u5c5e\u6027\u7684\u5b57\u5178__dict__\u6765\u5b9e\u73b0\u7684\u3002 \u6bd4\u5982\u8bf4\uff0ca.x\u4f1a\u9996\u5148\u67e5\u627ea.__dict__['x'], \u5982\u679c\u6ca1\u6709\u627e\u5230\u5219\u67e5\u627etype(a).__dict__['x'], \u7136\u540e\u4e0d\u65ad\u7684\u5f80\u4e0a\u67e5\u627e\u76f4\u5230metaclass(\u4e0d\u5305\u62ecmetaclass)\u3002 \u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Foo(object): country = \"China\" def __init__(self, name, age): self.name = name self.age = age foo = Foo(\"Wanghw\", 18) print(foo.__dict__) # {'name': 'Wanghw', 'age': 18} print(type(foo).__dict__) # {'__module__': '__main__', 'country': 'China', '__init__': <function Foo.__init__ at 0x103802488>, '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None} \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5982\u679cprint(foo.name)\u6216\u8005print(foo.age)\u6216\u67e5\u627e foo.__dict__ , \u5982\u679cprint(foo.country)\u5219\u4f1a\u67e5\u627etype(foo)\u65e2 Foo.__dict__ \u3002 \u5982\u679c\u67e5\u627e\u8fc7\u7a0b\u4e2d\u9047\u5230\u63cf\u8ff0\u7b26\uff0c\u90a3\u4e48Python\u89e3\u91ca\u5668\u5c31\u4f1a\u7528\u63cf\u8ff0\u7b26\u4e2d\u7684\u65b9\u6cd5\u6765\u66ff\u4ee3\u67e5\u627e\u987a\u5e8f\uff0c\u5230\u5e95\u662f\u5148\u67e5\u627e\u5bf9\u8c61\u7684__dict__\u8fd8\u662f\u63cf\u8ff0\u7b26\uff0c\u53d6\u51b3\u4e8e\u63cf\u8ff0\u7b26\u7c7b\u578b\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u5c0f\u8282\u4e2d\u6f14\u793a\u3002 \u63cf\u8ff0\u7b26\u534f\u8bae descr.__get__(self, obj, type=None) --> value descr.__set__(self, obj, value) --> None descr.__delete__(self, obj) --> None \u5982\u679c\u5b9a\u4e49\u4e86\u4ee5\u4e0a\u4e09\u4e2a\u65b9\u6cd5\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u8be5\u5bf9\u8c61\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\u5bf9\u8c61\uff0c\u5b83\u4f1a\u8986\u76d6\u5bf9\u8c61\u5c5e\u6027\u7684\u67e5\u627e\u987a\u5e8f\u3002 \u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Bar(object): def __get__(self, instance, owner): print(\"__get__\") def __set__(self, instance, value): print(\"__set__\") def __delete__(self, instance, value): print(\"__delete__\") class Foo(object): bar = Bar() foo = Foo() \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u7684bar\u5c5e\u6027\u5c31\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\u3002 \u4e0a\u6587\u63d0\u5230\u4e86\u63cf\u8ff0\u7b26\u7c7b\u578b\uff0c\u63cf\u8ff0\u7b26\u5206\u4e3a\uff0cData Descriptor\u548cNon-data Descriptor\u3002 \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4e49\u4e86 __get__ ()\u548c __set__ ()\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u8be5\u5bf9\u8c61\u662f\u4e00\u4e2aData Descriptor\u3002\u5982\u679c\u53ea\u5b9a\u4e49\u4e86 __get__ ()\u65b9\u6cd5\uff0c\u90a3\u5c31\u662fNon-data Descriptor\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a Data Descriptor class Bar(object): def __get__(self, instance, owner): print(\"get\") def __set__(self, instance, value): print(\"__set__\") def __delete__(self, instance, value): print(\"__delete__\") class Foo(object): bar = Bar() foo = Foo() \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u7684bar\u5c5e\u6027\u5c31\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\uff0c\u800c\u4e14\u662fData Descriptor\u3002 Non-data Descriptor class Bar(object): def __get__(self, instance, owner): print(\"__get__\") class Foo(object): bar = Bar() foo = Foo() \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u7684bar\u5c5e\u6027\u5c31\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\uff0c\u800c\u4e14\u662fNon-data Descriptor\u3002 Data and non-data descriptors\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\u8bbf\u95ee\u5bf9\u8c61\u5c5e\u6027\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u5bf9\u8c61\u7684\u5b57\u5178 __dict__ \u4e2d\u6709\u4e00\u4e2a\u8ddfData Descriptor\u540c\u540d\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\uff0cData Descriptor\u4f1a\u8986\u76d6 __dict__ \u7684\u67e5\u627e\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Bar(object): def __get__(self, instance, owner): print(\"__get__\") def __set__(self, obj, value): print(\"__set__\") class Foo(object): bar = Bar() def __init__(self, name, age): self.name = name self.age = age self.bar = \"bar\" foo = Foo(\"Wanghw\", 18) foo.bar # __get__ \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u5bf9\u8c61\u7684bar\u5c5e\u6027\u67e5\u627e\u4f1a\u6267\u884c\u5bf9\u8c61\u7684 __get__ \u65b9\u6cd5\u3002\u56e0\u4e3a\uff0cData Descriptor\u4f1a\u8986\u76d6 __dict__ \u7684\u67e5\u627e\u3002 \u5982\u679c\u5bf9\u8c61\u7684\u5b57\u5178 __dict__ \u4e2d\u6709\u4e00\u4e2a\u8ddfNon-data Descriptor\u540c\u540d\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\uff0c\u5bf9\u8c61\u7684 __dict__ \u67e5\u627e\u4f1a\u8986\u76d6Non-data Descriptor\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Bar(object): def __get__(self, instance, owner): print(\"__get__\") class Foo(object): bar = Bar() def __init__(self, name, age): self.name = name self.age = age self.bar = \"bar\" foo = Foo(\"Wanghw\", 18) foo.bar # \"bar\" \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u5bf9\u8c61\u7684bar\u5c5e\u6027\u67e5\u627e\u4f1a\u6253\u5370\u201cbar\u201d\uff0c\u56e0\u4e3a\uff0c\u5bf9\u8c61\u7684 __dict__ \u67e5\u627e\u4f1a\u8986\u76d6Non-data Descriptor\u3002 Python\u4e2d\u9ed8\u8ba4\u7684property \u5728Python\u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u8ba1\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u53eb\u505aproperty\uff0c\u5b83\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u591a\u79cd\uff0c\u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u5176\u4e2d\u4e00\u79cd\uff1a class Foo(object): def __init__(self, name): self._name = name @property def name(self): return self._name foo = Foo(\"Wanghw\") print(foo._name) # \"Wanghw\" print(foo.name) # \"Wanghw\" \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528foo._name\u80fd\u591f\u627e\u5230\u8be5\u5c5e\u6027\u7684\u503c\u201dWanghw\u201c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7foo.name\u627e\u5230\u8be5\u5c5e\u6027\u7684\u503c\u201dWanghw\u201c\uff08\u56e0\u4e3a\u8be5\u5c5e\u6027\u8fd4\u56de self._name )\u3002 \u6211\u4eec\u901a\u8fc7\u5728Foo\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2aname\u65b9\u6cd5\uff0c\u7136\u540e\u901a\u8fc7\u9ed8\u8ba4\u7684\u88c5\u9970\u5668property\u5b9e\u73b0\u8bbf\u95ee\u65b9\u6cd5\u65f6\uff0c\u4e0d\u8fdb\u884c\u5e38\u7528\u7684\u51fd\u6570\u8c03\u7528\u65b9\u5f0f\u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u7591\u95ee\uff0c\u65e2\u7136\u5e0c\u671b\u901a\u8fc7\u5c5e\u6027\u7684\u65b9\u5f0f\u8bbf\u95ee\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u4e14\u8fd4\u56de\u503c\u5c31\u662f\u67d0\u4e2a\u5c5e\u6027\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5728 __init__ \u91cc\u9762\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u3002 \u5176\u5b9e\uff0c\u5c5e\u6027\u7684\u66f4\u591a\u7684\u65f6\u5019\uff0c\u662f\u52a8\u6001\u7684\u83b7\u53d6\u67d0\u4e2a\u503c\uff0c\u5e76\u4fdd\u7559\u5c5e\u6027\u7684\u8bbf\u95ee\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u8fd4\u56de\u5df2\u5b58\u5728\u7684\u5c5e\u6027\u7684\u503c\uff0c\u6bd4\u5982\uff1a class Foo(object): def __init__(self, name): self._name = name @property def stock(self): return 100 + 100 foo = Foo(\"Wanghw\") print(foo._name) # \"Wanghw\" print(foo.stock) # 200 \u6211\u4eec\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u63d0\u5230\u8fc7\uff0cPython\u4e2d\u7684property\uff0cstatic method\uff0cclass method\u7684\u5b9e\u73b0\u90fd\u4f9d\u8d56\u4e8edescriptor\u7684\u673a\u5236\u6765\u5b9e\u73b0\u3002 \u90a3\u4e48\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u81ea\u5b9a\u4e49\u4e00\u4e2aproperty\u3002 \u4f7f\u7528Descriptor\u81ea\u5b9a\u4e49property \u4ece\u4e0a\u4e00\u5c0f\u8282\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5c06\u7c7b\u4e2d\u7684\u65b9\u6cd5\u4fee\u6539\u4e3a\u4e00\u4e2aproperty\uff0c\u5c31\u662f\u5229\u7528\u4e86\u88c5\u9970\u5668@property\u3002\u6211\u4eec\u77e5\u9053\u88c5\u9970\u5668\u8bed\u6cd5\u7cd6@decorator\uff0c\u7b49\u4ef7\u4e8e func = decorator(func)\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Foo(object): def stock(self): return 100 + 100 print(stock) # <function Foo.stock at 0x101a57048> class Foo(object): @property def stock(self): return 100 + 100 print(stock) # <property object at 0x103811c78> \u4e0a\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0cprint(stock)\u7684\u6253\u5370\u7ed3\u679c\u662f <property object at 0x103811c78> \u548c <function Foo.stock at 0x101a57048> \uff0c\u65e2\uff0c\u5728stock\u65b9\u6cd5\u4e0a\u9762\u52a0\u4e0a@property\u4e4b\u540e\uff0cstock\u8fd9\u4e2a\u65b9\u6cd5\u53d8\u4e3a\u4e86property\u7684\u5bf9\u8c61\uff0c\u4e0e\u7b2c\u4e00\u4e2aprint(stock)\u7684 <function Foo.stock at 0x101a57048> \u4e0d\u540c\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\u901a\u8fc7descriptor\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49property\u3002 \u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49property\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u5047\u8bbe\u6709\u4e00\u4e2a\u7c7b\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Foo(object): def stock(self): return 100 + 100 foo = Foo() foo.stock \u6211\u4eec\u5df2\u77e5\u5982\u4e0b\u51e0\u70b9\uff1a \u88c5\u9970\u5668\u8bed\u6cd5\u7cd6 @property\u7b49\u4ef7\u4e8e stock = property(stock)\uff1b \u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5982 bar = Bar()\uff0c\u7136\u540e\u5728Bar\u8fd9\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86 __get__, __set__, __delete__ \uff1b \u6211\u4eec\u7684\u76ee\u7684\u662f\uff0c\u901a\u8fc7\u7c7b\u4f3c\u5c5e\u6027\u8bbf\u95ee\u7684\u65b9\u5f0f(foo.stock)\u800c\u975e\u65b9\u6cd5\u8c03\u7528\u7684\u65b9\u5f0f(foo.stock())\uff0c\u83b7\u5f97\u8fd4\u56de\u503c200\u3002\u9996\u9009\uff0c\u6211\u4eec\u901a\u8fc7\u63cf\u8ff0\u7b26\u7684\u65b9\u5f0f\uff0c\u6765\u5b9e\u73b0\u7b80\u5355\u7684\u5c5e\u6027\u8bbf\u95ee\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Stock(object): def __get__(self, instance, owner): print(\"__get__\") return 100 + 100 class Foo(object): stock = Stock() foo = Foo() foo.stock \u6b64\u65f6\uff0c\u901a\u8fc7\u8bbf\u95eefoo.stock\u4f1a\u5148\u6253\u5370 __get__ , \u7136\u540e\u663e\u793a200\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5c06stock\u53d8\u4e3a\u7c7b\u4e2d\u7684\u4e00\u4e2a\u65b9\u6cd5\u5462\uff1f\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Stock(object): def __get__(self, instance, owner): print(\"__get__\") return 100 + 100 class Foo(object): def stock(self): print(\"stock\") \u5982\u679c\u80fd\u5c06stock\u65b9\u6cd5\u53d8\u4e3a\u4e00\u4e2adescriptor\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7foo.stock\u8bbf\u95ee\u8be5descriptor\u7684 __get__ \u65b9\u6cd5\uff0c\u7136\u540e\u83b7\u53d6\u5176\u8fd4\u56de\u503c\uff0c\u65e2\uff0c200\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u5c06\u5c5e\u6027\u53d8\u4e3adescriptor\uff0c\u76f4\u63a5\u901a\u8fc7\u7ed9\u8be5\u5c5e\u6027\u7ed1\u5b9a __get__ \u65b9\u6cd5\u5373\u53ef\uff0c\u5982\uff1astock = Stock()\uff0c\u4f46\u662f\uff0c\u5982\u4f55\u5229\u7528\u88c5\u9970\u5668\u8bed\u6cd5\u7cd6\u5462\uff1f\u6211\u4eec\u77e5\u9053\uff0c\u88c5\u9970\u5668\u8bed\u6cd5\u7cd6@Stock\u7b49\u4ef7\u4e8estock = Stock(stock)\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\uff0c\u5728Stock\u8fd9\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a __init__ \u65b9\u6cd5\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u5f62\u53c2\u6765\u63a5\u6536Stock\u7c7b\u5b9e\u4f8b\u5316\u65f6\u4f20\u5165\u7684stock\u51fd\u6570\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Stock(object): def __init__(self, stock): self.stock = stock def __get__(self, instance, owner): print(\"__get__\") return 100 + 100 class Foo(object): @Stock # stock = Stock(stock) def stock(self): print(\"stock\") \u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u5c06Foo\u7c7b\u4e2d\u7684stock\u65b9\u6cd5\uff0c\u6210\u529f\u7684\u53d8\u6210\u4e86\u4e00\u4e2adescriptor\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Foo\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u6765\u8bbf\u95eestock\u65b9\u6cd5\uff0c\u5e76\u4e14\u4f7f\u7528\u666e\u901a\u7684\u5c5e\u6027\u8c03\u7528\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6b64\u65f6Foo\u7c7b\u4e2d\u7684stock\u65b9\u6cd5\u5df2\u7ecf\u662f\u4e00\u4e2adescriptor\u4e86\u3002 foo = Foo() foo.stock \u4ee5\u4e0a\u4ee3\u7801\u4f1a\u5148\u6253\u5370 __get__ , \u7136\u540e\u663e\u793a200\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u7ec6\u5fc3\u7684\u540c\u5b66\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u91c7\u7528\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u81ea\u5b9a\u4e49\u7684property\uff0c\u4f46\u662f\uff0c\u4e0e\u5b98\u65b9\u6b63\u7248\u7684property\u8fd8\u6709\u5dee\u8ddd\uff0c\u8fd9\u4e2a\u5dee\u8ddd\u5728\u4e8e\uff0c\u8bbf\u95eefoo.stock\u7684\u65f6\u5019\uff0cFoo\u7c7b\u4e2d\u7684stock\u5e76\u6ca1\u6709\u88ab\u6267\u884c\uff0c\u800c\u6b63\u7248\u7684property\u4e2d\u7684\u5c5e\u6027\u662f\u88ab\u6267\u884c\u4e86\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6700\u540e\u9700\u8981\u83b7\u53d6\u7684\u503c\uff0c\u662f\u76f4\u63a5\u4ece\u8be5\u5c5e\u6027\u4e2d\u8ba1\u7b97\u6765\u83b7\u5f97\u7684\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Foo(object): @property def stock(self): return 100 + 100 foo = Foo() foo.stock \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7foo.stock\u83b7\u53d6\u5230\u7684\u7ed3\u679c200\uff0c\u662f\u901a\u8fc7Foo\u7c7b\u4e2d\u7684stock\u8fd9\u4e2a\u65b9\u6cd5\u6765\u8ba1\u7b97\u83b7\u5f97\u7684\u3002\u5982\u679c\u6211\u5e0c\u671b\u5728\u81ea\u5b9a\u4e49\u7684property\u4e2d\u4e5f\u91c7\u7528\u540c\u6837\u7684\u65b9\u5f0f\uff0c\u8be5\u5982\u4f55\u505a\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u5728\u5b9a\u4e49 __get__ \u65b9\u6cd5\u65f6\uff0c\u5b83\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2aself\u8868\u793adescriptor\uff0c\u4e0b\u9762\u6211\u4eec\uff0c\u5206\u522bprint\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u770b\u770b\u5b83\u4eec\u5206\u522b\u8868\u793a\u4ec0\u4e48\uff1a class Stock(object): def __init__(self, stock): self.stock = stock def __get__(self, instance, owner): print(\"__get__\") print(\"instance: \", instance) print(\"owner:\", owner) return 100 + 100 class Foo(object): @Stock def stock(self): print(\"stock\") foo = Foo() foo.stock \u4ee5\u4e0a\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a __get__ instance: <__main__.Foo object at 0x106c2b9b0> owner: <class '__main__.Foo'> 200 \u4ece\u4ee5\u4e0a\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0cinstance\u548cowner\u8fd9\u4e24\u4e2a\u5f62\u53c2\uff0c\u5206\u522b\u88ab\u4f20\u5165\u4e86foo\u548cFoo\u8fd9\u4e24\u4e2a\u5bf9\u8c61\uff0c\u4e00\u4e2a\u662fFoo\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u4e00\u4e2a\u662fFoo\u7c7b\u672c\u8eab\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u4f7f\u7528foo\u6216\u8005Foo\u5728 __get__ \u65b9\u6cd5\u4e2d\uff0c\u8c03\u7528stock\u5462\uff1f \u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684stock\u5df2\u7ecf\u662f\u4e00\u4e2adescriptor\u4e86\uff0c\u5982\u679c\u5728 __get__ \u65b9\u6cd5\u4e2d\u8c03\u7528\uff0c\u90a3\u4e48\u5c31\u8fdb\u5165\u6b7b\u5faa\u73af\u4e86\uff0c\u4e00\u76f4\u91cd\u590d\u7684\u6267\u884c __get__ \u65b9\u6cd5\u3002 \u6700\u539f\u59cb\u7684\u90a3\u4e2aFoo\u7c7b\u4e2d\u7684stock\u65b9\u6cd5\uff0c\u5728\u8fdb\u884c@Stock\u65f6\uff0c\u88ab\u4f20\u5165\u4e86Stock\u7c7b\u4e2d\u7684 __init__ \u65b9\u6cd5\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u6b64\uff0c\u6b64\u65f6\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u65b9\u5f0f\uff0c\u8fdb\u884c\u8c03\u7528\uff1a class Stock(object): def __init__(self, stock): self.stock = stock def __get__(self, instance, owner): return self.stock(instance) class Foo(object): @Stock def stock(self): return 100 + 100 foo = Foo() foo.stock \u4ee5\u4e0a\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a 200 \u901a\u8fc7\u7ed3\u679c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u4e0e\u4e4b\u524d\u7684\u6267\u884c\u7ed3\u679c\u662f\u4e00\u81f4\u7684\u3002\u7b80\u5355\u4fee\u6539\u4e3a\u66f4\u80fd\u7406\u89e3\u7684\u4ee3\u7801\u793a\u4f8b\uff0c\u5982\u4e0b\u6240\u793a\uff1a class myproperty(object): def __init__(self, stock): self.stock = stock def __get__(self, instance, owner): return self.stock(instance) class Foo(object): @myproperty def stock(self): return 100 + 100 foo = Foo() foo.stock \u81f3\u6b64\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u81ea\u5b9a\u4e49\u7684property\u3002","title":"09 Python\u4e2d\u7684\u63cf\u8ff0\u7b26"},{"location":"python\u8fdb\u9636/\u63cf\u8ff0\u7b26/#_1","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\"\u5047\u8bbe\u5bf9\u8c61\u7684\u67d0\u4e2a\u5c5e\u6027\u88ab\u7ed1\u5b9a\u4e86( __get__ , __set__ , __delete__ )\u8fd9\u4e09\u4e2a\u65b9\u6cd5\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u65b9\u6cd5\"\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8be5\u5c5e\u6027\u4e3a\"\u63cf\u8ff0\u7b26\" class Foo(object): def __init__(self, name, age): self.name = name self.age = age foo = Foo(\"Wanghw\", 18) \u6211\u4eec\u4e0d\u80fd\u79f0 foo.name, foo.age \u8fd9\u4e24\u4e2a\u5c5e\u6027\u4e3a\u63cf\u8ff0\u7b26\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6ca1\u6709\u7ed1\u5b9a\u4e0a\u9762\u4e09\u4e2a\u65b9\u6cd5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b, \u5bf9\u8c61\u7684\u5c5e\u6027\u8bbf\u95ee\u662f\u901a\u8fc7get, set, delete\u8fd9\u4e09\u4e2a\u65b9\u6cd5\u8bbf\u95ee\u5c5e\u6027\u7684\u5b57\u5178__dict__\u6765\u5b9e\u73b0\u7684\u3002 \u6bd4\u5982\u8bf4\uff0ca.x\u4f1a\u9996\u5148\u67e5\u627ea.__dict__['x'], \u5982\u679c\u6ca1\u6709\u627e\u5230\u5219\u67e5\u627etype(a).__dict__['x'], \u7136\u540e\u4e0d\u65ad\u7684\u5f80\u4e0a\u67e5\u627e\u76f4\u5230metaclass(\u4e0d\u5305\u62ecmetaclass)\u3002 \u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Foo(object): country = \"China\" def __init__(self, name, age): self.name = name self.age = age foo = Foo(\"Wanghw\", 18) print(foo.__dict__) # {'name': 'Wanghw', 'age': 18} print(type(foo).__dict__) # {'__module__': '__main__', 'country': 'China', '__init__': <function Foo.__init__ at 0x103802488>, '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None} \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u5982\u679cprint(foo.name)\u6216\u8005print(foo.age)\u6216\u67e5\u627e foo.__dict__ , \u5982\u679cprint(foo.country)\u5219\u4f1a\u67e5\u627etype(foo)\u65e2 Foo.__dict__ \u3002 \u5982\u679c\u67e5\u627e\u8fc7\u7a0b\u4e2d\u9047\u5230\u63cf\u8ff0\u7b26\uff0c\u90a3\u4e48Python\u89e3\u91ca\u5668\u5c31\u4f1a\u7528\u63cf\u8ff0\u7b26\u4e2d\u7684\u65b9\u6cd5\u6765\u66ff\u4ee3\u67e5\u627e\u987a\u5e8f\uff0c\u5230\u5e95\u662f\u5148\u67e5\u627e\u5bf9\u8c61\u7684__dict__\u8fd8\u662f\u63cf\u8ff0\u7b26\uff0c\u53d6\u51b3\u4e8e\u63cf\u8ff0\u7b26\u7c7b\u578b\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u5c0f\u8282\u4e2d\u6f14\u793a\u3002","title":"\u63cf\u8ff0\u7b26\u7684\u5b9a\u4e49"},{"location":"python\u8fdb\u9636/\u63cf\u8ff0\u7b26/#_2","text":"descr.__get__(self, obj, type=None) --> value descr.__set__(self, obj, value) --> None descr.__delete__(self, obj) --> None \u5982\u679c\u5b9a\u4e49\u4e86\u4ee5\u4e0a\u4e09\u4e2a\u65b9\u6cd5\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u8be5\u5bf9\u8c61\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\u5bf9\u8c61\uff0c\u5b83\u4f1a\u8986\u76d6\u5bf9\u8c61\u5c5e\u6027\u7684\u67e5\u627e\u987a\u5e8f\u3002 \u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Bar(object): def __get__(self, instance, owner): print(\"__get__\") def __set__(self, instance, value): print(\"__set__\") def __delete__(self, instance, value): print(\"__delete__\") class Foo(object): bar = Bar() foo = Foo() \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u7684bar\u5c5e\u6027\u5c31\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\u3002 \u4e0a\u6587\u63d0\u5230\u4e86\u63cf\u8ff0\u7b26\u7c7b\u578b\uff0c\u63cf\u8ff0\u7b26\u5206\u4e3a\uff0cData Descriptor\u548cNon-data Descriptor\u3002 \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u5b9a\u4e49\u4e86 __get__ ()\u548c __set__ ()\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u8be5\u5bf9\u8c61\u662f\u4e00\u4e2aData Descriptor\u3002\u5982\u679c\u53ea\u5b9a\u4e49\u4e86 __get__ ()\u65b9\u6cd5\uff0c\u90a3\u5c31\u662fNon-data Descriptor\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a","title":"\u63cf\u8ff0\u7b26\u534f\u8bae"},{"location":"python\u8fdb\u9636/\u63cf\u8ff0\u7b26/#data-descriptor","text":"class Bar(object): def __get__(self, instance, owner): print(\"get\") def __set__(self, instance, value): print(\"__set__\") def __delete__(self, instance, value): print(\"__delete__\") class Foo(object): bar = Bar() foo = Foo() \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u7684bar\u5c5e\u6027\u5c31\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\uff0c\u800c\u4e14\u662fData Descriptor\u3002","title":"Data Descriptor"},{"location":"python\u8fdb\u9636/\u63cf\u8ff0\u7b26/#non-data-descriptor","text":"class Bar(object): def __get__(self, instance, owner): print(\"__get__\") class Foo(object): bar = Bar() foo = Foo() \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u7684bar\u5c5e\u6027\u5c31\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26\uff0c\u800c\u4e14\u662fNon-data Descriptor\u3002 Data and non-data descriptors\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\u8bbf\u95ee\u5bf9\u8c61\u5c5e\u6027\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u5bf9\u8c61\u7684\u5b57\u5178 __dict__ \u4e2d\u6709\u4e00\u4e2a\u8ddfData Descriptor\u540c\u540d\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\uff0cData Descriptor\u4f1a\u8986\u76d6 __dict__ \u7684\u67e5\u627e\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Bar(object): def __get__(self, instance, owner): print(\"__get__\") def __set__(self, obj, value): print(\"__set__\") class Foo(object): bar = Bar() def __init__(self, name, age): self.name = name self.age = age self.bar = \"bar\" foo = Foo(\"Wanghw\", 18) foo.bar # __get__ \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u5bf9\u8c61\u7684bar\u5c5e\u6027\u67e5\u627e\u4f1a\u6267\u884c\u5bf9\u8c61\u7684 __get__ \u65b9\u6cd5\u3002\u56e0\u4e3a\uff0cData Descriptor\u4f1a\u8986\u76d6 __dict__ \u7684\u67e5\u627e\u3002 \u5982\u679c\u5bf9\u8c61\u7684\u5b57\u5178 __dict__ \u4e2d\u6709\u4e00\u4e2a\u8ddfNon-data Descriptor\u540c\u540d\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\uff0c\u5bf9\u8c61\u7684 __dict__ \u67e5\u627e\u4f1a\u8986\u76d6Non-data Descriptor\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Bar(object): def __get__(self, instance, owner): print(\"__get__\") class Foo(object): bar = Bar() def __init__(self, name, age): self.name = name self.age = age self.bar = \"bar\" foo = Foo(\"Wanghw\", 18) foo.bar # \"bar\" \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0cfoo\u5bf9\u8c61\u7684bar\u5c5e\u6027\u67e5\u627e\u4f1a\u6253\u5370\u201cbar\u201d\uff0c\u56e0\u4e3a\uff0c\u5bf9\u8c61\u7684 __dict__ \u67e5\u627e\u4f1a\u8986\u76d6Non-data Descriptor\u3002","title":"Non-data Descriptor"},{"location":"python\u8fdb\u9636/\u63cf\u8ff0\u7b26/#pythonproperty","text":"\u5728Python\u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u8ba1\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\uff0c\u53eb\u505aproperty\uff0c\u5b83\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u591a\u79cd\uff0c\u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u5176\u4e2d\u4e00\u79cd\uff1a class Foo(object): def __init__(self, name): self._name = name @property def name(self): return self._name foo = Foo(\"Wanghw\") print(foo._name) # \"Wanghw\" print(foo.name) # \"Wanghw\" \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528foo._name\u80fd\u591f\u627e\u5230\u8be5\u5c5e\u6027\u7684\u503c\u201dWanghw\u201c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7foo.name\u627e\u5230\u8be5\u5c5e\u6027\u7684\u503c\u201dWanghw\u201c\uff08\u56e0\u4e3a\u8be5\u5c5e\u6027\u8fd4\u56de self._name )\u3002 \u6211\u4eec\u901a\u8fc7\u5728Foo\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2aname\u65b9\u6cd5\uff0c\u7136\u540e\u901a\u8fc7\u9ed8\u8ba4\u7684\u88c5\u9970\u5668property\u5b9e\u73b0\u8bbf\u95ee\u65b9\u6cd5\u65f6\uff0c\u4e0d\u8fdb\u884c\u5e38\u7528\u7684\u51fd\u6570\u8c03\u7528\u65b9\u5f0f\u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u7591\u95ee\uff0c\u65e2\u7136\u5e0c\u671b\u901a\u8fc7\u5c5e\u6027\u7684\u65b9\u5f0f\u8bbf\u95ee\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u4e14\u8fd4\u56de\u503c\u5c31\u662f\u67d0\u4e2a\u5c5e\u6027\uff0c\u90a3\u4e48\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5728 __init__ \u91cc\u9762\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u3002 \u5176\u5b9e\uff0c\u5c5e\u6027\u7684\u66f4\u591a\u7684\u65f6\u5019\uff0c\u662f\u52a8\u6001\u7684\u83b7\u53d6\u67d0\u4e2a\u503c\uff0c\u5e76\u4fdd\u7559\u5c5e\u6027\u7684\u8bbf\u95ee\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u8fd4\u56de\u5df2\u5b58\u5728\u7684\u5c5e\u6027\u7684\u503c\uff0c\u6bd4\u5982\uff1a class Foo(object): def __init__(self, name): self._name = name @property def stock(self): return 100 + 100 foo = Foo(\"Wanghw\") print(foo._name) # \"Wanghw\" print(foo.stock) # 200 \u6211\u4eec\u5728\u524d\u9762\u7684\u7ae0\u8282\u4e2d\u63d0\u5230\u8fc7\uff0cPython\u4e2d\u7684property\uff0cstatic method\uff0cclass method\u7684\u5b9e\u73b0\u90fd\u4f9d\u8d56\u4e8edescriptor\u7684\u673a\u5236\u6765\u5b9e\u73b0\u3002 \u90a3\u4e48\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u81ea\u5b9a\u4e49\u4e00\u4e2aproperty\u3002","title":"Python\u4e2d\u9ed8\u8ba4\u7684property"},{"location":"python\u8fdb\u9636/\u63cf\u8ff0\u7b26/#descriptorproperty","text":"\u4ece\u4e0a\u4e00\u5c0f\u8282\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5c06\u7c7b\u4e2d\u7684\u65b9\u6cd5\u4fee\u6539\u4e3a\u4e00\u4e2aproperty\uff0c\u5c31\u662f\u5229\u7528\u4e86\u88c5\u9970\u5668@property\u3002\u6211\u4eec\u77e5\u9053\u88c5\u9970\u5668\u8bed\u6cd5\u7cd6@decorator\uff0c\u7b49\u4ef7\u4e8e func = decorator(func)\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Foo(object): def stock(self): return 100 + 100 print(stock) # <function Foo.stock at 0x101a57048> class Foo(object): @property def stock(self): return 100 + 100 print(stock) # <property object at 0x103811c78> \u4e0a\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0cprint(stock)\u7684\u6253\u5370\u7ed3\u679c\u662f <property object at 0x103811c78> \u548c <function Foo.stock at 0x101a57048> \uff0c\u65e2\uff0c\u5728stock\u65b9\u6cd5\u4e0a\u9762\u52a0\u4e0a@property\u4e4b\u540e\uff0cstock\u8fd9\u4e2a\u65b9\u6cd5\u53d8\u4e3a\u4e86property\u7684\u5bf9\u8c61\uff0c\u4e0e\u7b2c\u4e00\u4e2aprint(stock)\u7684 <function Foo.stock at 0x101a57048> \u4e0d\u540c\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\u901a\u8fc7descriptor\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49property\u3002 \u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49property\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u5047\u8bbe\u6709\u4e00\u4e2a\u7c7b\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Foo(object): def stock(self): return 100 + 100 foo = Foo() foo.stock \u6211\u4eec\u5df2\u77e5\u5982\u4e0b\u51e0\u70b9\uff1a \u88c5\u9970\u5668\u8bed\u6cd5\u7cd6 @property\u7b49\u4ef7\u4e8e stock = property(stock)\uff1b \u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5982 bar = Bar()\uff0c\u7136\u540e\u5728Bar\u8fd9\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86 __get__, __set__, __delete__ \uff1b \u6211\u4eec\u7684\u76ee\u7684\u662f\uff0c\u901a\u8fc7\u7c7b\u4f3c\u5c5e\u6027\u8bbf\u95ee\u7684\u65b9\u5f0f(foo.stock)\u800c\u975e\u65b9\u6cd5\u8c03\u7528\u7684\u65b9\u5f0f(foo.stock())\uff0c\u83b7\u5f97\u8fd4\u56de\u503c200\u3002\u9996\u9009\uff0c\u6211\u4eec\u901a\u8fc7\u63cf\u8ff0\u7b26\u7684\u65b9\u5f0f\uff0c\u6765\u5b9e\u73b0\u7b80\u5355\u7684\u5c5e\u6027\u8bbf\u95ee\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Stock(object): def __get__(self, instance, owner): print(\"__get__\") return 100 + 100 class Foo(object): stock = Stock() foo = Foo() foo.stock \u6b64\u65f6\uff0c\u901a\u8fc7\u8bbf\u95eefoo.stock\u4f1a\u5148\u6253\u5370 __get__ , \u7136\u540e\u663e\u793a200\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5c06stock\u53d8\u4e3a\u7c7b\u4e2d\u7684\u4e00\u4e2a\u65b9\u6cd5\u5462\uff1f\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Stock(object): def __get__(self, instance, owner): print(\"__get__\") return 100 + 100 class Foo(object): def stock(self): print(\"stock\") \u5982\u679c\u80fd\u5c06stock\u65b9\u6cd5\u53d8\u4e3a\u4e00\u4e2adescriptor\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7foo.stock\u8bbf\u95ee\u8be5descriptor\u7684 __get__ \u65b9\u6cd5\uff0c\u7136\u540e\u83b7\u53d6\u5176\u8fd4\u56de\u503c\uff0c\u65e2\uff0c200\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u5c06\u5c5e\u6027\u53d8\u4e3adescriptor\uff0c\u76f4\u63a5\u901a\u8fc7\u7ed9\u8be5\u5c5e\u6027\u7ed1\u5b9a __get__ \u65b9\u6cd5\u5373\u53ef\uff0c\u5982\uff1astock = Stock()\uff0c\u4f46\u662f\uff0c\u5982\u4f55\u5229\u7528\u88c5\u9970\u5668\u8bed\u6cd5\u7cd6\u5462\uff1f\u6211\u4eec\u77e5\u9053\uff0c\u88c5\u9970\u5668\u8bed\u6cd5\u7cd6@Stock\u7b49\u4ef7\u4e8estock = Stock(stock)\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\uff0c\u5728Stock\u8fd9\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a __init__ \u65b9\u6cd5\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u5f62\u53c2\u6765\u63a5\u6536Stock\u7c7b\u5b9e\u4f8b\u5316\u65f6\u4f20\u5165\u7684stock\u51fd\u6570\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Stock(object): def __init__(self, stock): self.stock = stock def __get__(self, instance, owner): print(\"__get__\") return 100 + 100 class Foo(object): @Stock # stock = Stock(stock) def stock(self): print(\"stock\") \u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u5c31\u5c06Foo\u7c7b\u4e2d\u7684stock\u65b9\u6cd5\uff0c\u6210\u529f\u7684\u53d8\u6210\u4e86\u4e00\u4e2adescriptor\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Foo\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u6765\u8bbf\u95eestock\u65b9\u6cd5\uff0c\u5e76\u4e14\u4f7f\u7528\u666e\u901a\u7684\u5c5e\u6027\u8c03\u7528\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6b64\u65f6Foo\u7c7b\u4e2d\u7684stock\u65b9\u6cd5\u5df2\u7ecf\u662f\u4e00\u4e2adescriptor\u4e86\u3002 foo = Foo() foo.stock \u4ee5\u4e0a\u4ee3\u7801\u4f1a\u5148\u6253\u5370 __get__ , \u7136\u540e\u663e\u793a200\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u7ec6\u5fc3\u7684\u540c\u5b66\u4f1a\u53d1\u73b0\uff0c\u5982\u679c\u91c7\u7528\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u81ea\u5b9a\u4e49\u7684property\uff0c\u4f46\u662f\uff0c\u4e0e\u5b98\u65b9\u6b63\u7248\u7684property\u8fd8\u6709\u5dee\u8ddd\uff0c\u8fd9\u4e2a\u5dee\u8ddd\u5728\u4e8e\uff0c\u8bbf\u95eefoo.stock\u7684\u65f6\u5019\uff0cFoo\u7c7b\u4e2d\u7684stock\u5e76\u6ca1\u6709\u88ab\u6267\u884c\uff0c\u800c\u6b63\u7248\u7684property\u4e2d\u7684\u5c5e\u6027\u662f\u88ab\u6267\u884c\u4e86\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6700\u540e\u9700\u8981\u83b7\u53d6\u7684\u503c\uff0c\u662f\u76f4\u63a5\u4ece\u8be5\u5c5e\u6027\u4e2d\u8ba1\u7b97\u6765\u83b7\u5f97\u7684\uff0c\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a class Foo(object): @property def stock(self): return 100 + 100 foo = Foo() foo.stock \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7foo.stock\u83b7\u53d6\u5230\u7684\u7ed3\u679c200\uff0c\u662f\u901a\u8fc7Foo\u7c7b\u4e2d\u7684stock\u8fd9\u4e2a\u65b9\u6cd5\u6765\u8ba1\u7b97\u83b7\u5f97\u7684\u3002\u5982\u679c\u6211\u5e0c\u671b\u5728\u81ea\u5b9a\u4e49\u7684property\u4e2d\u4e5f\u91c7\u7528\u540c\u6837\u7684\u65b9\u5f0f\uff0c\u8be5\u5982\u4f55\u505a\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u5728\u5b9a\u4e49 __get__ \u65b9\u6cd5\u65f6\uff0c\u5b83\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2aself\u8868\u793adescriptor\uff0c\u4e0b\u9762\u6211\u4eec\uff0c\u5206\u522bprint\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u770b\u770b\u5b83\u4eec\u5206\u522b\u8868\u793a\u4ec0\u4e48\uff1a class Stock(object): def __init__(self, stock): self.stock = stock def __get__(self, instance, owner): print(\"__get__\") print(\"instance: \", instance) print(\"owner:\", owner) return 100 + 100 class Foo(object): @Stock def stock(self): print(\"stock\") foo = Foo() foo.stock \u4ee5\u4e0a\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a __get__ instance: <__main__.Foo object at 0x106c2b9b0> owner: <class '__main__.Foo'> 200 \u4ece\u4ee5\u4e0a\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0cinstance\u548cowner\u8fd9\u4e24\u4e2a\u5f62\u53c2\uff0c\u5206\u522b\u88ab\u4f20\u5165\u4e86foo\u548cFoo\u8fd9\u4e24\u4e2a\u5bf9\u8c61\uff0c\u4e00\u4e2a\u662fFoo\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u4e00\u4e2a\u662fFoo\u7c7b\u672c\u8eab\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u4f7f\u7528foo\u6216\u8005Foo\u5728 __get__ \u65b9\u6cd5\u4e2d\uff0c\u8c03\u7528stock\u5462\uff1f \u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6\u7684stock\u5df2\u7ecf\u662f\u4e00\u4e2adescriptor\u4e86\uff0c\u5982\u679c\u5728 __get__ \u65b9\u6cd5\u4e2d\u8c03\u7528\uff0c\u90a3\u4e48\u5c31\u8fdb\u5165\u6b7b\u5faa\u73af\u4e86\uff0c\u4e00\u76f4\u91cd\u590d\u7684\u6267\u884c __get__ \u65b9\u6cd5\u3002 \u6700\u539f\u59cb\u7684\u90a3\u4e2aFoo\u7c7b\u4e2d\u7684stock\u65b9\u6cd5\uff0c\u5728\u8fdb\u884c@Stock\u65f6\uff0c\u88ab\u4f20\u5165\u4e86Stock\u7c7b\u4e2d\u7684 __init__ \u65b9\u6cd5\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u6b64\uff0c\u6b64\u65f6\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u793a\u4f8b\u4e2d\u4f7f\u7528\u7684\u65b9\u5f0f\uff0c\u8fdb\u884c\u8c03\u7528\uff1a class Stock(object): def __init__(self, stock): self.stock = stock def __get__(self, instance, owner): return self.stock(instance) class Foo(object): @Stock def stock(self): return 100 + 100 foo = Foo() foo.stock \u4ee5\u4e0a\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a 200 \u901a\u8fc7\u7ed3\u679c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u4e0e\u4e4b\u524d\u7684\u6267\u884c\u7ed3\u679c\u662f\u4e00\u81f4\u7684\u3002\u7b80\u5355\u4fee\u6539\u4e3a\u66f4\u80fd\u7406\u89e3\u7684\u4ee3\u7801\u793a\u4f8b\uff0c\u5982\u4e0b\u6240\u793a\uff1a class myproperty(object): def __init__(self, stock): self.stock = stock def __get__(self, instance, owner): return self.stock(instance) class Foo(object): @myproperty def stock(self): return 100 + 100 foo = Foo() foo.stock \u81f3\u6b64\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u81ea\u5b9a\u4e49\u7684property\u3002","title":"\u4f7f\u7528Descriptor\u81ea\u5b9a\u4e49property"},{"location":"python\u8fdb\u9636/\u6587\u4ef6\u64cd\u4f5c/","text":"\u4e2a\u4eba\u535a\u5ba2 \u6587\u4ef6\u4fee\u6539\u7684\u4e24\u79cd\u65b9\u5f0f \u5173\u4e8e\u6587\u4ef6\u8def\u5f84\u7684\u751f\u6210 Python3 \u6587\u4ef6\u7684\u91cd\u547d\u540d iter\u65b9\u6cd5\u8bfb\u53d6\u6587\u4ef6\u7684\u4f8b\u5b50 \u4f7f\u7528optparse\u6a21\u5757\u6839\u636e\u4e0d\u540c\u7684\u53c2\u6570\u521b\u5efa\u4e0d\u540c\u7684csv\u6587\u4ef6 Python\u6587\u4ef6\u8bfb\u53d6\u4e2df.seek\u7684\u53c2\u6570\u8bf4\u660e\u53ca\u201c\u65e5\u5fd7\u4fe1\u606f\u5b9e\u65f6\u5c55\u793a\u201d\u7684\u5b9e\u4f8b","title":"06 \u6587\u4ef6\u64cd\u4f5c"},{"location":"python\u8fdb\u9636/\u6587\u4ef6\u64cd\u4f5c/#_1","text":"\u6587\u4ef6\u4fee\u6539\u7684\u4e24\u79cd\u65b9\u5f0f \u5173\u4e8e\u6587\u4ef6\u8def\u5f84\u7684\u751f\u6210 Python3 \u6587\u4ef6\u7684\u91cd\u547d\u540d iter\u65b9\u6cd5\u8bfb\u53d6\u6587\u4ef6\u7684\u4f8b\u5b50 \u4f7f\u7528optparse\u6a21\u5757\u6839\u636e\u4e0d\u540c\u7684\u53c2\u6570\u521b\u5efa\u4e0d\u540c\u7684csv\u6587\u4ef6 Python\u6587\u4ef6\u8bfb\u53d6\u4e2df.seek\u7684\u53c2\u6570\u8bf4\u660e\u53ca\u201c\u65e5\u5fd7\u4fe1\u606f\u5b9e\u65f6\u5c55\u793a\u201d\u7684\u5b9e\u4f8b","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/","text":"\u8fed\u4ee3\u5668 \u4ec0\u4e48\u662f\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u662f\u8bbf\u95ee\u96c6\u5408\u5185\u5143\u7d20\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4e00\u822c\u7528\u6765\u904d\u5386\u6570\u636e \u8fed\u4ee3\u5668\u548c\u4ee5\u4e0b\u6807\u7684\u8bbf\u95ee\u65b9\u5f0f\u4e0d\u4e00\u6837\uff0c\u8fed\u4ee3\u5668\u662f\u4e0d\u80fd\u540e\u9000\u7684, \u8fed\u4ee3\u5668\u63d0\u4f9b\u4e86\u4e00\u79cd\u60f0\u6027\u65b9\u5f0f\u6570\u636e\u7684\u65b9\u5f0f list\u53ef\u4ee5\u5148\u53d6\u7b2c1\u4e2a\u7136\u540e\u518d\u53d6\u7b2c0\u4e2a, \u4f46\u662f\u8fed\u4ee3\u5668\u4e0d\u53ef\u4ee5. \u53ef\u8fed\u4ee3\u5bf9\u8c61\u5fc5\u987b\u5b9e\u73b0 __iter__ , \u8fed\u4ee3\u5668\u5fc5\u987b\u5b9e\u73b0 __iter__ \u548c __next__ list\u4e2d\u6709 __iter__ , \u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61, \u4f46\u4e0d\u662f\u8fed\u4ee3\u5668 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u8c03\u7528 iter(a) \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 for\u5faa\u73af \u5728\u8c03\u7528for\u5faa\u73af\u7684\u65f6\u5019\u4f1a\u5c1d\u8bd5\u8c03\u7528 iter() , \u7136\u540e iter() \u9996\u5148\u4f1a\u53bb\u627e\u6709\u6ca1\u6709 __iter__ , \u5982\u679c\u6709\u5c06\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668, \u5982\u679c\u6ca1\u6709\u5c06\u67e5\u770b\u6709\u6ca1\u6709 __getitem__ , \u5982\u679c\u6709\u5c06\u521b\u5efa\u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u4f7f\u7528 __getitem__ \u8fdb\u884c\u8fed\u4ee3\u8f93\u51fa. \u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u8fed\u4ee3\u5668\u4e0e\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u628a\u8fed\u4ee3\u5668\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5206\u5f00, \u628a\u7ef4\u62a4\u53d6\u503c\u653e\u5728\u8fed\u4ee3\u5668\u4e2d\uff01 from collections.abc import Iterator class Company(object): def __init__(self, employee_list): self.employee = employee_list # \u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684__iter__\u8fd4\u56de\u8fed\u4ee3\u5668 def __iter__(self): return MyIterator(self.employee) class MyIterator(Iterator): def __init__(self, employee_list): self.iter_list = employee_list self.index = 0 # \u9700\u8981\u5728\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a\u53d6\u503c\u4f4d\u7f6e # \u7ee7\u627f\u4e86Iterator\u53ef\u4ee5\u4e0d\u5199\u8be5\u65b9\u6cd5, \u5982\u679c\u91cd\u5199\u90a3\u4e48 return self # def __iter__(self): # return self def __next__(self): #\u771f\u6b63\u8fd4\u56de\u8fed\u4ee3\u503c\u7684\u903b\u8f91 try: word = self.iter_list[self.index] except IndexError: raise StopIteration # \u629b\u51fa\u7684\u5f02\u5e38\u5e94\u8be5\u662fStopIteration self.index += 1 return word if __name__ == '__main__': whw_com = Company([\"whw\",\"naruto\",\"sasuke\"]) for i in whw_com: print(i) \"\"\" whw naruto sasuke \"\"\" \u751f\u6210\u5668\u7684\u7406\u89e3 \u5173\u4e8e\u751f\u6210\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u5e26\u6709 yield \u7684\u51fd\u6570\u5728 Python\u4e2d\u88ab\u79f0\u4e4b\u4e3a generator\uff08\u751f\u6210\u5668\u51fd\u6570\uff09\u3002 \u751f\u6210\u5668\u6709\u5173\u7684\u8bf4\u660e\u5982\u4e0b\uff1a \u4e00\u4e2a\u5e26\u6709 yield \u7684\u51fd\u6570\u5c31\u662f\u4e00\u4e2a generator\uff0c\u5b83\u548c\u666e\u901a\u51fd\u6570\u4e0d\u540c\uff0c\u751f\u6210\u4e00\u4e2a generator \u770b\u8d77\u6765\u50cf\u51fd\u6570\u8c03\u7528\uff0c \u4f46\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u51fd\u6570\u4ee3\u7801\uff0c\u76f4\u5230\u5bf9\u5176\u8c03\u7528 next()\uff08\u5728 for \u5faa\u73af\u4e2d\u4f1a\u81ea\u52a8\u8c03\u7528 next()\uff09\u624d\u5f00\u59cb\u6267\u884c\u3002 \u867d\u7136\u6267\u884c\u6d41\u7a0b\u4ecd\u6309\u51fd\u6570\u7684\u6d41\u7a0b\u6267\u884c\uff0c\u4f46\u6bcf\u6267\u884c\u5230\u4e00\u4e2a yield \u8bed\u53e5\u5c31\u4f1a\u4e2d\u65ad\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u503c\uff0c\u4e0b\u6b21\u6267\u884c\u65f6\u4ece yield \u7684\u4e0b\u4e00\u4e2a\u8bed\u53e5\u7ee7\u7eed\u6267\u884c\u3002 \u770b\u8d77\u6765\u5c31\u597d\u50cf\u4e00\u4e2a\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u88ab yield \u4e2d\u65ad\u4e86\u6570\u6b21\uff0c\u6bcf\u6b21\u4e2d\u65ad\u90fd\u4f1a\u901a\u8fc7 yield \u8fd4\u56de\u5f53\u524d\u7684\u8fed\u4ee3\u503c\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5728\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2agenerator\u540e\uff0c\u57fa\u672c\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u8c03\u7528next()\uff0c\u800c\u662f\u901a\u8fc7for\u5faa\u73af\u6765\u8fed\u4ee3\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u5173\u5fc3StopIteration\u7684\u9519\u8bef\u3002 \u5f97\u5230\u4e00\u4e2a\u751f\u6210\u5668 \u5f97\u5230\u751f\u6210\u5668\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a\u4e00\u79cd\u662f \u751f\u6210\u5668\u8868\u8fbe\u5f0f \u53e6\u5916\u4e00\u79cd\u662f \u51fd\u6570\u7684\u65b9\u6cd5 1\u3001\u751f\u6210\u5668\u8868\u8fbe\u5f0f \u5176\u5b9e\uff0c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5c31\u662f\u5c06 \u5217\u8868\u63a8\u5bfc\u5f0f \u4e2d\u7684 [] \u6539\u6210 () \u5c31\u53ef\u4ee5\u4e86\uff1a generator = (i**2 for i in range(1,6)) 2\u3001\u51fd\u6570\u7684\u65b9\u6cd5 \u5229\u7528\u51fd\u6570\u7684\u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5fc5\u5b9a\u5305\u542b yield \u5173\u952e\u5b57\uff1a def generator(max): while max > 0: yield max max -= 1 \u83b7\u53d6\u751f\u6210\u5668\u4e2d\u7684\u503c \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 next() \u65b9\u6cd5\uff08\u6216\u8005 __next__() \uff09\u4ee5\u53ca for\u5faa\u73af\u8fed\u4ee3 \u83b7\u53d6\u751f\u6210\u5668\u4e2d\u7684\u503c 1\u3001next\u65b9\u6cd5\u83b7\u53d6\u751f\u6210\u5668\u7684\u503c generator = (i for i in range(1,6)) print(next(generator)) print(next(generator)) print(next(generator)) print(next(generator)) print(next(generator)) # \u751f\u6210\u5668\u4e2d\u53ea\u67095\u4e2a\u6570\uff0c\u8d85\u51fa\u8303\u56f4\u4f1a\u629b\u51faStopIteration\u5f02\u5e38 print(next(generator)) \u5f88\u660e\u663e\uff0c\u6211\u4eec\u7684\u751f\u6210\u5668\u4e2d\u53ea\u67095\u4e2a\u503c\uff0c\u4f46\u662f\u53d6\u503c\u7684\u65f6\u5019\u5374next\u4e866\u6b21\uff0c\u6240\u4ee5\u5728\u7b2c\u516d\u6b21\u89c6\u56fe\u53d6\u503c\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u4f1a\u629b\u51fa StopIteration\u5f02\u5e38 \u3002 2\u3001for\u5faa\u73af\u8fed\u4ee3 for\u5faa\u73af\u672c\u8d28\u4e0a\u8c03\u7528\u4e86\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684 __iter__() \u65b9\u6cd5\uff0c\u5f97\u5230\u4e86\u8be5\u5bf9\u8c61\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u65e0\u9650\u8c03\u7528 __next__() \u65b9\u6cd5\uff0c\u5f97\u5230\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002\u76f4\u5230 StopIteration \u5f02\u5e38\uff0c\u4ee3\u8868\u8fed\u4ee3\u5668\u4e2d\u5df2\u65e0\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0cfor\u5faa\u73af\u81ea\u52a8\u5904\u7406\u8be5\u5f02\u5e38\uff0c\u8df3\u51fa\u5faa\u73af\u3002 \u5229\u7528for\u5faa\u73af\u7684\u65b9\u6cd5\u4e0d\u7528\u5173\u5fc3StopIteration\u5f02\u5e38\uff0c\u5185\u90e8\u4f1a\u505a\u5904\u7406\uff1a for\u5faa\u73af\u8c03\u7528generator\u4e2d\u7684 __iter__() \u7b2c\u4e00\u6b21\u8c03\u7528 __iter__() \u4f1a\u542f\u52a8\u751f\u6210\u5668, \u6267\u884c\u5230yeild, \u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61, i\u7684\u503c\u4fdd\u5b58\u5728\u751f\u6210\u5668\u5bf9\u8c61\u4e2d. for\u5faa\u73af\u62ff\u5230\u503c\u5e76\u4e0d\u65ad\u5bf9\u8fed\u4ee3\u5668\u8c03\u7528next, \u76f4\u5230\u8fd4\u56de\u5f02\u5e38\u8df3\u51fa. generator = (i for i in range(1,6)) for num in generator: print(num,end=' ') \u7ed3\u679c\u4e3a\uff1a 1 2 3 4 5 \u4e3a\u4ec0\u4e48\u8981\u7528\u751f\u6210\u5668 \u751f\u6210\u5668\u5b58\u5728\u7684\u6700\u5927\u7684\u610f\u4e49\u5c31\u662f\uff1a \u8282\u7701\u5185\u5b58\u7a7a\u95f4 \u6211\u4eec\u6765\u770b\u4e00\u4e2aFibonacci\u6570\u5217\u7684\u4f8b\u5b50\uff1a\u4e00\u79cd\u5360\u7528\u5185\u5b58\u7684\u505a\u6cd5\u662f\u8fd9\u6837\u7684\uff1a def fib(max): lst = [] n,a,b = 0,0,1 while n < max: lst.append(b) a,b = b,a+b n += 1 return lst f = fib(6) print(f) # [1, 1, 2, 3, 5, 8] \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u90fdappend\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u53bb\u4e86\uff0c\u6700\u7ec8\u5c06\u8fd9\u4e2a\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u5217\u8868\u8fd4\u56de\u3002\u6ca1\u9519\uff01\u806a\u660e\u7684\u4f60\u6216\u8bb8\u4e00\u773c\u5c31\u770b\u51fa\u95ee\u9898\u6765\u4e86\uff1a\u5982\u679c\u8fd9\u4e2amax\u8bbe\u7f6e\u7684\u7279\u522b\u5927\uff0c\u90a3\u5c82\u4e0d\u610f\u5473\u7740\u8fd9\u4e2a\u5b58\u653e\u7740\u6240\u6709\u6570\u636e\u7684lst\u4e5f\u4f1a\u8ddf\u7740\u589e\u5927\uff0c\u7ed3\u679c\u5c31\u4f1a\u5bfc\u81f4\u5185\u5b58\u5403\u7d27\uff01 \u6ca1\u9519\uff0c\u751f\u6210\u5668\u7684\u5b58\u5728\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u201c\u5927\u91cf\u6570\u636e\u5360\u7528\u5185\u5b58\u201d\u7684\u95ee\u9898\u3002 \u751f\u6210\u5668\u89e3\u51b3\u4e0a\u9762\u95ee\u9898\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a def fib(max): n,a,b = 0,0,1 while n < max: yield b a,b = b,a+b n += 1 f = fib(6) for i in f: print(i,end=' ') #1 1 2 3 5 8 \u5bf9\u4e8e\u751f\u6210\u5668\u6765\u8bf4\uff0c\u5b83\u4e0d\u4f1a\u5c06\u51fd\u6570\u4ea7\u751f\u7684\u6570\u636e\u4e00\u6b21\u6027\u7684\u62ff\u51fa\u6765\uff0c\u800c\u662f\u5728\u7a0b\u5e8f\u9700\u8981\u7684\u65f6\u5019\uff0c\u5c06\u6570\u636e\u4e00\u4e2a\u4e00\u4e2a\u7684 \u751f\u4ea7 \u51fa\u6765\uff0c\u76f8\u6bd4\u4e8e\u524d\u9762\u7528\u5217\u8868\u4e00\u6b21\u6027\u7684\u5c06\u6570\u636e\u53d6\u51fa\u7684\u65b9\u6cd5\uff0c\u5927\u5927\u8282\u7701\u4e86\u7a0b\u5e8f\u5bf9\u5185\u5b58\u7684\u5360\u7528\uff0c\u800c\u8fd9\u4e5f\u662f\u751f\u6210\u5668\u5728\u5b9e\u9645\u4e2d\u6700\u5e38\u7528\u7684\u60c5\u666f\u4e4b\u4e00\u3002 Python\u662f\u5982\u4f55\u5b9e\u73b0\u751f\u6210\u5668\u7684 Python\u4e2d\u51fd\u6570\u7684\u5de5\u4f5c\u539f\u7406 def foo(): bar() def bar(): pass foo() python\u7684\u89e3\u91ca\u5668\u4f1a\u7528 PyEval_EvalFramEx(C\u8bed\u8a00) \u51fd\u6570\u53bb\u6267\u884c\u6211\u4eec\u7684foo\u51fd\u6570. \u5728\u8fd0\u884cfoo\u51fd\u6570\u7684\u65f6\u5019\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2a\u6808\u5e27(Stack frame), \u8fd9\u4e2a\u6808\u5e27\u662f\u4e00\u4e2a\u4e0a\u4e0b\u6587, \u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61. \u6808\u5e27\u4f1a\u5c06foo\u51fd\u6570\u53d8\u6210\u4e00\u4e2a\u5b57\u8282\u7801\u5bf9\u8c61, \u4f7f\u7528dis\u67e5\u770b\u5b57\u8282\u7801 \u7136\u540e\u6808\u5e27\u7684\u4e0a\u4e0b\u6587\u4e2d\u53bb\u8fd0\u884c\u5b57\u8282\u7801(\u5b57\u8282\u7801\u662f\u5168\u5c40\u552f\u4e00\u7684) def foo(): bar() def bar(): pass import dis print(dis.dis(foo)) 2 0 LOAD_GLOBAL 0 (bar) 2 CALL_FUNCTION 0 4 POP_TOP 6 LOAD_CONST 0 (None) 8 RETURN_VALUE None \u5f53foo\u8c03\u7528bar, \u53c8\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6808\u5e27, \u7136\u540e\u8fd0\u884cbar\u7684\u5b57\u8282\u7801 \u6240\u6709\u7684\u6808\u5e27\u90fd\u662f\u5206\u914d\u5728\u5806\u7684\u5185\u5b58\u4e0a, \u5982\u679c\u4e0d\u91ca\u653e\u4f1a\u4e00\u76f4\u5b58\u5728, \u6240\u4ee5\u6808\u5e27\u53ef\u4ee5\u72ec\u7acb\u4e8e\u8c03\u7528\u8005\u5b58\u5728, \u5c31\u6bd4\u5982\u8c03\u7528\u8005foo\u4e0d\u5b58\u5728\u4e5f\u6ca1\u5173\u7cfb, \u53ea\u8981\u6307\u9488\u6307\u5411bar\u7684\u6808\u5e27\u5c31\u53ef\u4ee5\u63a7\u5236 import inspect frame = None def foo(): bar() def bar(): pass global frame # \u83b7\u53d6\u5f53\u524d\u51fd\u6570\u7684\u6808\u5e27\u5e76\u8d4b\u7ed9\u5168\u5c40\u53d8\u91cfframe frame = inspect.currentframe() foo() print(frame.f_code.co_name) # >>> bar caller_frame = frame.f_back print(caller_frame.f_code.co_name) # >>> foo python\u89e3\u91ca\u5668\u4f1a\u7f16\u8bd1\u5b57\u8282\u7801, \u5982\u679c\u53d1\u73b0\u6709yeild, \u5c31\u4f1a\u6807\u8bb0\u8be5\u51fd\u6570, \u7136\u540e\u518d\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61. \u800c\u8fd9\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u5b9e\u9645\u4e0a\u662f\u628a\u8fd9\u4e2aframe\u5bf9\u8c61\u505a\u4e86\u4e00\u4e2a\u5c01\u88c5 \u751f\u6210\u5668\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u3001\u4efb\u4f55\u51fd\u6570\u4e2d\u6062\u590d\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u7684\u6808\u5e27\u5e76\u4e0d\u5728\u771f\u6b63\u7684\u6808\u4e2d\uff0c\u800c\u662f\u5806\u4e2d f_lasti\u6307\u5411\u201c\u6700\u540e\u6267\u884c\u6307\u4ee4\u201d\u7684\u6307\u9488\u3002\u521d\u59cb\u5316\u4e3a -1\uff0c\u610f\u5473\u7740\u5b83\u6ca1\u5f00\u59cb\u8fd0\u884c \u6590\u6ce2\u90a3\u5951\u7684\u5b9e\u73b0 \u666e\u901a\u51fd\u6570 def func(index): a, b = 0, 1 i = 0 print(a) while i < index: print(b) a, b = b, a + b i += 1 func(10) \u751f\u6210\u5668 def func(index): a, b = 0, 1 i = 0 print(a) while i < index: yield b a, b = b, a + b i += 1 for i in func(10): print(i) \u751f\u6210\u5668\u7684\u6267\u884c\u6d41\u7a0b \u5bf9\u4e8e\u751f\u6210\u5668\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u6211\u4eec\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u8bf4\u660e\u4e0b\uff1a def fib(): a = b =1 yield a yield b while 1: a , b = b , a+b yield b g = fib() for num in fib(): if num > 10:break print(num) \u8fd9\u6bb5\u4ee3\u7801\u5176\u5b9e\u662fFibonacci\u6570\u5217\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570fib\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u8d4b\u503c\u7ed9g\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u91cc\u7684g\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u751f\u6210\u5668\u3002 \u5f53for\u5faa\u73af\u5f00\u59cb\u904d\u5386(\u8fed\u4ee3)\u8fd9\u4e2a\u751f\u6210\u5668\u7684\u65f6\u5019\u6267\u884cfib\u51fd\u6570\u5185\u90e8\u7684\u4ee3\u7801\uff1a\u7b2c\u4e00\u53e5\u662f\u5c061\u8d4b\u503c\u7ed9a\u548cb\uff0c\u63a5\u7740\u9047\u5230\u4e86 yield a \u8bed\u53e5\uff0c\u5f53\u7a0b\u5e8f\u9047\u5230yield\u8bed\u53e5\u65f6\u4f1a\u6682\u65f6 \u505c\u4e0b\u6765 \uff0c\u4e0d\u6267\u884c\u540e\u9762\u7684\u4ee3\u7801\uff0c\u800c\u6b64\u65f6\uff0c\u6211\u4eec\u5728\u51fd\u6570\u7684\u5916\u9762\u5c31\u53ef\u4ee5\u901a\u8fc7 next(\u751f\u6210\u5668\u5bf9\u8c61) \u7684\u65b9\u6cd5\u83b7\u53d6 \u5f53\u524dyield\u540e\u9762\u7684\u503c \uff08\u6ce8\u610f\uff0cfor\u5faa\u73af\u4e2d\u81ea\u5e26\u4e86next()\u65b9\u6cd5\uff09\uff0c\u800c\u6211\u4eec\u5728for\u5faa\u73af\u4e2d\u5f97\u5230\u7684\u7b2c\u4e00\u4e2a\u503c\u5c31\u662f\u5f53\u524d\u7684a\u7684\u503c 1 ;\u63a5\u7740\uff0cfor\u5faa\u73af\u5f00\u59cb\u904d\u5386\u7b2c\u4e8c\u4e2a\u6570\uff08\u76f8\u5f53\u4e8e\u6267\u884c\u7b2c\u4e8c\u4e2anext(g)\uff09\u7684\u65f6\u5019\uff0c\u53c8\u53d1\u73b0\u4e86 yield b \uff0c\u6839\u636e\u524d\u9762\u7684\u8bf4\u660e\uff0c\u6b64\u65f6\u4f1a\u6253\u5370 \u7b2c\u4e8c\u4e2ayield\u540e\u9762\u7684b\u7684\u5f53\u524d\u503c 1 \uff1b\u5728for\u5faa\u73af\u8fdb\u884c\u7b2c\u4e09\u6b21\u904d\u5386\u7684\u65f6\u5019\u8fdb\u5165while\u5faa\u73af\uff1a\u9996\u5148\u5c06b\u7684\u5f53\u524d\u503c\u8d4b\u503c\u7ed9a\uff0c\u7136\u540e\u5c06a+b\u7684\u503c\u8d4b\u503c\u7ed9b\uff08Fibonacci\u6570\u5217\u7684\u7b97\u6cd5\uff09\uff0c\u7136\u540e\u9047\u5230\u4e86\u7b2c\u4e09\u4e2ayield\uff0c\u56e0\u6b64\u7b2c\u4e09\u6b21\u904d\u5386\u76f8\u5f53\u4e8e\u6267\u884c\u4e86\u7b2c\u4e09\u6b21next(g)\uff0c\u4e8e\u662f\u6b64\u65f6\u4f1a\u6253\u5370\u5f53\u524d\u7684b\u7684\u503c 2 \uff0c\u6240\u4ee5num\u7684\u524d\u4e09\u4e2a\u503c\u4f9d\u6b21\u662f\uff1a 1\u30011\u30012 \u3002\u5728\u7b2c\u56db\u6b21\u904d\u5386\u7684\u65f6\u5019\uff0c\u518d\u6b21\u5728while\u5faa\u73af\u4e2d\u8fdb\u884c\u6570\u636e\u7684\u8d4b\u503c\u4e0e\u4ea4\u6362\u64cd\u4f5c\uff0c\u76f4\u5230\u5f97\u5230\u7684\u503cnum\u4e0d\u6ee1\u8db3 num>10 \u8fd9\u4e2a\u6761\u4ef6\u4e3a\u6b62\u3002 \u603b\u7684\u6765\u8bb2\uff0c\u5176\u5b9e\u5c31\u662f\u51fd\u6570\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u53ea\u8981\u9047\u5230 yield \u5173\u952e\u5b57\u5c31\u4f1a \u505c\u6b62 \uff0c\u7b49\u5f85\u5916\u9762\u53d1\u51fanext(\u751f\u6210\u5668\u5bf9\u8c61)\u7684\u4fe1\u53f7\u518d\u5c06yield\u540e\u9762\u7684\u503c\u8fd4\u56de\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u80fd\u4f1a\u66f4\u6709\u52a9\u4e8e\u5927\u5bb6\u7406\u89e3\uff1a \u6211\u4eec\u5148\u6253\u5370\u4e00\u4e2anext(g)\u770b\u4e00\u4e0b\u7ed3\u679c\uff1a def count(n): while n > 0: print('before yield') yield n n -= 1 print('after yield') g = count(5) print(next(g)) \u7ed3\u679c\u4e3a\uff1a before yield 5 \u7136\u540e\u6211\u4eec\u6253\u5370\u4e24\u6b21next(g)\u7684\u65f6\u5019\u770b\u4e00\u4e0b\u7ed3\u679c\uff1a before yield 5 after yield before yield 4 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\"after yield\"\u5176\u5b9e\u662f\u5728\u7b2c\u4e8c\u6b21\u6267\u884cnext(g)\u7684\u65f6\u5019\u6253\u5370\u7684\uff0c\u8fd9\u4e5f\u5145\u5206\u8bf4\u660e\u4e86\u7b2c\u4e00\u6b21\u7684\u65f6\u5019count\u51fd\u6570\u505c\u5728\u4e86yield n\u90a3\u91cc\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230\uff1a \u5982\u4e00\u4e2a\u51fd\u6570\u4e2d\u51fa\u73b0\u591a\u4e2ayield\u5219next()\u4f1a\u505c\u6b62\u5728\u4e0b\u4e00\u4e2ayield\u524d def generator(): print('one') yield 123 print('two') yield 456 print('end') g = generator() # \u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u6682\u505c\u5728 yield 123\uff0c\u6253\u5370one\u4e0e123 print(next(g)) # \u7b2c\u4e8c\u6b21\u8fd0\u884c\uff0c\u6682\u505c\u5728 yield 456\uff0c\u6253\u5370two\u4e0e456 print(next(g)) # \u7b2c\u4e09\u6b21\u8fd0\u884c\uff0c\u5148\u6253\u5370end\uff0c\u4f46\u662f\u7531\u4e8e\u540e\u9762\u6ca1\u6709yield\u8bed\u53e5\u4e86\uff0c\u56e0\u6b64\u518d\u4f7f\u7528next()\u65b9\u6cd5\u4f1a\u62a5\u9519 print(next(g)) \u4e0a\u9762\u4ee3\u7801\u7684\u7ed3\u8bba\u9700\u8981\u597d\u597d\u7406\u89e3\u3002 \u751f\u6210\u5668\u4e2d\u7684return \u5173\u4e8e\u751f\u6210\u5668\u4e2d\u7528return\uff0c\u4e2a\u4eba\u603b\u7ed3\u6709 \u903b\u8f91\u7ed3\u675f \u4e0e \u663e\u793a\u8c03\u7528 \u4e24\u79cd \u903b\u8f91\u7ed3\u675f \u6240\u8c13\u903b\u8f91\u7ed3\u675f\uff0c\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u8bbe\u8ba1\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5728\u4e0d\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u4f7f\u7528return\u8df3\u51fa\u51fd\u6570\uff1a def read_file(path): size = 1024 with open(path,'r') as f: while True: block = f.read(size) if block: yield block else: return \u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528return\u5b9e\u9645\u4e0a\u662f\u4ece\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u8003\u8651\u7684\uff0c\u5f53\u6211\u4eec\u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\u5982\u679c\u9047\u5230\u7a7a\u6587\u4ef6\u76f4\u63a5\u8df3\u51fa\u51fd\u6570\uff0c\u907f\u514d\u4e86read\u5f97\u5230\u7684\u65e0\u6548\u6570\u636e\u81f4\u4f7f\u540e\u7eed\u64cd\u4f5c\u629b\u51fa\u5f02\u5e38\u3002 \u663e\u793a\u8c03\u7528 \u4ece\u7f51\u4e0a\u67e5\u770b\u76f8\u5173\u6587\u6863\uff0c\u6709\u8fd9\u6837\u7684\u8bf4\u6cd5\uff1a \u4f5c\u4e3a\u751f\u6210\u5668\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8fed\u4ee3\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5\u4e0d\u80fd\u663e\u793a\u7684\u5728\u751f\u6210\u5668\u51fd\u6570\u4e2dreturn \u67d0\u4e2a\u503c\uff0c\u5305\u62ecNone\u503c\u4e5f\u4e0d\u884c\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u201cSyntaxError\u201d\u7684\u5f02\u5e38 \u3002\u4f46\u662f\u672c\u4eba\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u53d1\u73b0\u8fd9\u79cd\u60c5\u51b5\u53ea\u5728python2\u4e2d\u4f1a\u6709\uff0c\u6211\u81ea\u5df1\u7528\u7684python3.6.8\u89e3\u91ca\u5668\u5e76\u6ca1\u6709\u62a5\u9519\uff1a python2\u89e3\u91ca\u5668\u4e0b\u7684\u60c5\u51b5\uff1a Python 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:30:26) [MSC v.1500 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> def func(): ... yield 123 ... return 666 ... File \"<stdin>\", line 3 SyntaxError: 'return' with argument inside generator python3.6.8\u89e3\u91ca\u5668\u8fd0\u884c\u7ed3\u679c\uff1a Python 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 23 2018, 23:31:17) [MSC v.1916 32 bit (Intel)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> def func(): ... yield 123 ... return 666 ... >>> g = func() >>> print(next(g)) 123 yield\u8fd4\u56de\u503c\u4e0esend\u65b9\u6cd5 \u770b\u4e0b\u9762\u4ee3\u7801\uff1a # -*- coding:utf-8 -*- def func(): print('one') yield 123 print('two') yield 456 print('end') g = func() print(next(g)) print(next(g)) \u7ed3\u679c\u4e3a\uff1a one 123 two 456 \u8fd9\u91cc\u4f60\u53ef\u80fd\u4f1a\u60f3\uff1ayield 123\u6211\u4eec\u6253\u5370\u51fa\u6765123\uff0cyield 456\u6253\u5370\u51fa\u4e86456\uff0c\u90a3\u4e48\uff0c123\u4e0e456\u662f\u4e0d\u662fyield\u7684\u8fd4\u56de\u503c\u5462\uff1f\u7b54\u6848\u5f53\u7136\u4e0d\u662f\u3002 \u5b9e\u9645\u4e0a\uff0c \u6211\u4eec\u83b7\u53d6\u5230\u7684yield\u540e\u9762\u7684\u503c\u5176\u5b9e\u662f\u901a\u8fc7next()\u65b9\u6cd5\u5f97\u5230\u7684\uff0c\u800cyield\u672c\u8eab\u662f\u6709\u8fd4\u56de\u503c\u7684\uff0c\u9ed8\u8ba4\u60c5\u51b5\u662fNone \u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u57fa\u7840\u4e0a\u505a\u4e00\u4e9b\u6539\u52a8\u6765\u770b\u4e00\u4e0b\uff1a def func(): print('one') a = yield 123 print(a) print('two') yield 456 print('end') g = func() print(next(g)) \u8fd9\u91cc\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2ayield\u7684\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9\u4e86a\uff0c\u63a5\u4e0b\u6765\u6253\u5370a\u3002\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u8fd0\u884c\u5230\u7b2c\u4e00\u4e2ayield\u7684\u65f6\u5019\u4f1a\u505c\u4e0b\u6765\uff0c\u4e0d\u4f1a\u63a5\u7740\u6267\u884c\uff0c\u56e0\u6b64\u7b2c\u4e00\u6b21\u4e0d\u4f1a\u6253\u5370a\uff0c\u7ed3\u679c\u4e3a\uff1a one 123 \u800c\u5982\u679c\u6211\u4eec \u5728\u4e0a\u9762\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e00\u4e2anext(g) \u7684\u8bdd\uff0c\u6253\u5370\u7684\u7ed3\u679c\u5982\u4e0b\uff1a one 123 None two 456 \u6211\u4eec\u4f1a\u53d1\u73b0\u5728\u8fdb\u884c\u5230\u7b2c\u4e8c\u4e2ayield\u7684\u65f6\u5019123\u4e0etwo\u4e4b\u95f4\u6253\u5370\u51fa\u4e86None\uff0c \u8fd9\u4e2aNone\u5176\u5b9e\u5c31\u662f\u7b2c\u4e00\u4e2ayield\u7684\u9ed8\u8ba4\u8fd4\u56de\u503c \u60f3\u8981\u4fee\u6539\u8fd9\u4e2a\u8fd4\u56de\u503c\uff0c\u6216\u8005\u8bf4\u4e3a\u5176\u8d4b\u503c\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 send\u65b9\u6cd5 \uff1a\u901a\u8fc7send\u65b9\u6cd5\u53bb\u4e3a\u4e0a\u4e00\u6b21\u88ab\u6302\u8d77\u7684yield\u8bed\u53e5\u8d4b\u503c\u3002 \u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a def my_generator(): value = yield 1 value = yield(value) value = yield(value) g = my_generator() print(next(g)) print(g.send('hello')) print(g.send('world')) \u7ed3\u679c\u4e3a\uff1a 1 hello world \u5177\u4f53\u7684\u8fc7\u7a0b\u8bf4\u660e\u5982\u4e0b\uff1a \u5f53\u8c03\u7528gen.next()\u65b9\u6cd5\u65f6\uff0cpython\u9996\u5148\u4f1a\u6267\u884cMyGenerator\u65b9\u6cd5\u7684yield 1\u8bed\u53e5\u3002\u7531\u4e8e\u662f\u4e00\u4e2ayield\u8bed\u53e5\uff0c\u56e0\u6b64\u65b9\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u88ab\u6302\u8d77\uff0c\u800cnext\u65b9\u6cd5\u8fd4\u56de\u503c\u4e3ayield\u5173\u952e\u5b57\u540e\u9762\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5373\u4e3a1\u3002 \u5f53\u8c03\u7528gen.send('hello')\u65b9\u6cd5\u65f6\uff0cpython\u9996\u5148\u6062\u590dMyGenerator\u65b9\u6cd5\u7684\u8fd0\u884c\u73af\u5883\u3002\u540c\u65f6\uff0c\u5c06\u8868\u8fbe\u5f0f(yield 1)\u7684\u8fd4\u56de\u503c\u5b9a\u4e49\u4e3asend\u65b9\u6cd5\u53c2\u6570\u7684\u503c\uff0c\u5373\u4e3a'hello'\u3002\u8fd9\u6837\uff0c\u63a5\u4e0b\u6765value=\uff08yield 1\uff09\u8fd9\u4e00\u8d4b\u503c\u8bed\u53e5\u4f1a\u5c06value\u7684\u503c\u7f6e\u4e3a'hello'\u3002\u7ee7\u7eed\u8fd0\u884c\u4f1a\u9047\u5230yield value\u8bed\u53e5\u3002\u56e0\u6b64MyGenerator\u65b9\u6cd5\u518d\u6b21\u88ab\u6302\u8d77\u3002\u540c\u65f6\uff0csend\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e3ayield\u5173\u952e\u5b57\u540e\u9762\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4e5f\u5373value\u7684\u503c\u4e3a'hello'\u3002 \u5f53\u8c03\u7528send('world')\u65b9\u6cd5\u65f6MyGenerator\u65b9\u6cd5\u7684\u8fd0\u884c\u73af\u5883\u3002\u540c\u65f6\uff0c\u5c06\u8868\u8fbe\u5f0f(yield value)\u7684\u8fd4\u56de\u503c\u5b9a\u4e49\u4e3asend\u65b9\u6cd5\u53c2\u6570\u7684\u503c\uff0c\u5373\u4e3a'world'\u3002\u8fd9\u6837\uff0c\u63a5\u4e0b\u6765value=\uff08yield value\uff09\u8fd9\u4e00\u8d4b\u503c\u8bed\u53e5\u4f1a\u5c06value\u7684\u503c\u7f6e\u4e3a'world'\u3002\u7b2c\u4e09\u6b21\u6253\u5370'world'\u3002 \u53ef\u4ee5\u770b\u5230\uff1a\u7b2c\u4e00\u4e2a\u7684next\u53d6\u5230\u4e861\uff1b\u6211\u4eec\u628a'hello'\u8d4b\u503c\u7ed9\u7b2c\u4e00\u4e2ayield\u4f5c\u4e3a\u5176\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u7b2c\u4e8c\u6b21\u53d6\u5230\u7684\u662f'hello'\uff0c\u540c\u6837\u7684\uff0c\u7b2c\u4e09\u6b21\u53d6\u5230\u7684\u662f\u6211\u4eec\u4e3a\u7b2c\u4e8c\u4e2ayield\u8868\u8fbe\u5f0fsend\u7684\u8fd4\u56de\u503c'world'\u3002 \u603b\u7684\u6765\u8bf4\uff0csend\u65b9\u6cd5\u548cnext\u65b9\u6cd5\u552f\u4e00\u7684\u533a\u522b\u662f\u5728\u6267\u884csend\u65b9\u6cd5\u4f1a\u9996\u5148\u628a\u4e0a\u4e00\u6b21\u6302\u8d77\u7684yield\u8bed\u53e5\u7684\u8fd4\u56de\u503c\u901a\u8fc7\u53c2\u6570\u8bbe\u5b9a\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0e\u751f\u6210\u5668\u65b9\u6cd5\u7684\u4ea4\u4e92\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\uff0c\u5728\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u6ca1\u6709\u6267\u884cnext\u65b9\u6cd5\u4e4b\u524d\uff0c\u7531\u4e8e\u6ca1\u6709yield\u8bed\u53e5\u88ab\u6302\u8d77\uff0c\u5982\u679c\u975e\u8981\u662f\u7528send\u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u7684send\u65b9\u6cd5\u91cc\u9762\u7684\u53c2\u6570\u5fc5\u987b\u662fNone\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002 \u4e0b\u9762\u662f\u9519\u8bef\u7684\u5199\u6cd5\uff1a def my_generator(): value = yield 1 value = yield(value) value = yield(value) g = my_generator() print(g.send('hello')) print(g.send('world')) \u7a0b\u5e8f\u4f1a\u62a5\u8fd9\u6837\u7684\u9519\uff1a TypeError: can't send non-None value to a just-started generator \u5982\u679c\u975e\u8981\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528send\u65b9\u6cd5\uff0c\u6b63\u786e\u7684\u5199\u6cd5\u662f\u5728send\u65b9\u6cd5\u4e2d\u52a0\u53c2\u6570None\uff1a def my_generator(): value = yield 1 value = yield(value) value = yield(value) g = my_generator() print(g.send(None)) print(g.send('hello')) print(g.send('world')) \u7ed3\u679c\u4e3a\uff1az 1 hello world \u56e0\u4e3a\u5f53send\u65b9\u6cd5\u7684\u53c2\u6570\u4e3aNone\u65f6\uff0c\u5b83\u4e0enext\u65b9\u6cd5\u5b8c\u5168\u7b49\u4ef7\u3002\u4f46\u662f\u6ce8\u610f\uff0c\u867d\u7136\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u662f\u4e0d\u89c4\u8303\u3002\u6240\u4ee5\uff0c\u5728\u8c03\u7528send\u65b9\u6cd5\u4e4b\u524d\uff0c\u8fd8\u662f\u5148\u8c03\u7528\u4e00\u6b21next\u65b9\u6cd5\u4e3a\u597d\u3002 \u5229\u7528yield\u5b9e\u73b0\u7b80\u5355\u7684\u534f\u7a0b\u6848\u4f8b\u2014\u2014\u751f\u4ea7\u8005\u6d88\u8d39\u8005 \u8fd9\u662fyield\u5341\u5206\u5173\u952e\u7684\u7528\u5904\uff0c\u7406\u89e3\u4e86yield\u7684\u673a\u5236\u5bf9\u7406\u89e3\u534f\u7a0b\u5e76\u8fdb\u884c\u76f8\u5173\u5e76\u53d1\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u5341\u5206\u6709\u5e2e\u52a9\uff01 \u6240\u8c13 \u534f\u7a0b \uff0c\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u51fd\u6570\u4e4b\u95f4\u7684\u76f8\u4e92 \u5207\u6362 \u3002\u800c\u5229\u7528yield\u4e0esend\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5341\u5206\u65b9\u4fbf\u7684\u5b9e\u73b0\u8fd9\u79cd\u6548\u679c\uff1a # -*- coding:utf-8 -*- import time def consumer(): # consumer\u4f5c\u4e3a\u4e00\u4e2a\u751f\u6210\u5668 while 1: data = yield def producer(): # \u751f\u6210\u5668\u5bf9\u8c61 g = consumer() # \u5148next\u540e\u9762\u624d\u80fdsend\u5177\u4f53\u7684\u975eNone\u7684\u503c,\u76f8\u5f53\u4e8e\u5148send\u4e00\u4e2aNone next(g) for i in range(1000000): g.send(i) if __name__ == '__main__': start = time.time() #\u5e76\u53d1\u6267\u884c,\u4f46\u662f\u4efb\u52a1producer\u9047\u5230io\u5c31\u4f1a\u963b\u585e\u4f4f,\u5e76\u4e0d\u4f1a\u5207\u5230\u8be5\u7ebf\u7a0b\u5185\u7684\u5176\u4ed6\u4efb\u52a1\u53bb\u6267\u884c producer() print('\u6267\u884c\u65f6\u95f4\uff1a',time.time() - start) \u7ed3\u679c\u4e3a\uff1a \u6267\u884c\u65f6\u95f4\uff1a 0.12068915367126465 \u5f53\u7136\u8fd9\u6d89\u53ca\u5230\u4e86\u534f\u7a0b\u4e0eIO\u963b\u585e\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u8fd9\u91cc\u4e0d\u505a\u8ba8\u8bba\uff0c\u4e0a\u8ff0\u51fd\u6570\u662f\u4e3a\u4e86\u8bf4\u660e yield\u4e0esend\u5728\u51fd\u6570\u4efb\u52a1\u4e4b\u95f4\u4e0d\u65ad\u5207\u6362\u7684\u529f\u80fd \u53c2\u8003\u6587\u732e\uff1a https://www.cnblogs.com/wj-1314/p/8490822.html https://blog.csdn.net/jason_cuijiahui/article/details/84947310 https://blog.csdn.net/zxpyld3x/article/details/79181834 https://blog.csdn.net/hedan2013/article/details/56293173 \u4e2a\u4eba\u5176\u4ed6\u535a\u5ba2 \u751f\u6210\u5668\uff08generator\uff09\u4e2d \u7684yield \u4ee5\u53ca\u51e0\u4e2a\u5b9e\u4f8b","title":"02 \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_1","text":"\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u662f\u8bbf\u95ee\u96c6\u5408\u5185\u5143\u7d20\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u4e00\u822c\u7528\u6765\u904d\u5386\u6570\u636e \u8fed\u4ee3\u5668\u548c\u4ee5\u4e0b\u6807\u7684\u8bbf\u95ee\u65b9\u5f0f\u4e0d\u4e00\u6837\uff0c\u8fed\u4ee3\u5668\u662f\u4e0d\u80fd\u540e\u9000\u7684, \u8fed\u4ee3\u5668\u63d0\u4f9b\u4e86\u4e00\u79cd\u60f0\u6027\u65b9\u5f0f\u6570\u636e\u7684\u65b9\u5f0f list\u53ef\u4ee5\u5148\u53d6\u7b2c1\u4e2a\u7136\u540e\u518d\u53d6\u7b2c0\u4e2a, \u4f46\u662f\u8fed\u4ee3\u5668\u4e0d\u53ef\u4ee5. \u53ef\u8fed\u4ee3\u5bf9\u8c61\u5fc5\u987b\u5b9e\u73b0 __iter__ , \u8fed\u4ee3\u5668\u5fc5\u987b\u5b9e\u73b0 __iter__ \u548c __next__ list\u4e2d\u6709 __iter__ , \u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61, \u4f46\u4e0d\u662f\u8fed\u4ee3\u5668 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u8c03\u7528 iter(a) \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 for\u5faa\u73af \u5728\u8c03\u7528for\u5faa\u73af\u7684\u65f6\u5019\u4f1a\u5c1d\u8bd5\u8c03\u7528 iter() , \u7136\u540e iter() \u9996\u5148\u4f1a\u53bb\u627e\u6709\u6ca1\u6709 __iter__ , \u5982\u679c\u6709\u5c06\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668, \u5982\u679c\u6ca1\u6709\u5c06\u67e5\u770b\u6709\u6ca1\u6709 __getitem__ , \u5982\u679c\u6709\u5c06\u521b\u5efa\u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u4f7f\u7528 __getitem__ \u8fdb\u884c\u8fed\u4ee3\u8f93\u51fa.","title":"\u8fed\u4ee3\u5668"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_2","text":"\u628a\u8fed\u4ee3\u5668\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5206\u5f00, \u628a\u7ef4\u62a4\u53d6\u503c\u653e\u5728\u8fed\u4ee3\u5668\u4e2d\uff01 from collections.abc import Iterator class Company(object): def __init__(self, employee_list): self.employee = employee_list # \u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684__iter__\u8fd4\u56de\u8fed\u4ee3\u5668 def __iter__(self): return MyIterator(self.employee) class MyIterator(Iterator): def __init__(self, employee_list): self.iter_list = employee_list self.index = 0 # \u9700\u8981\u5728\u5185\u90e8\u7ef4\u62a4\u4e00\u4e2a\u53d6\u503c\u4f4d\u7f6e # \u7ee7\u627f\u4e86Iterator\u53ef\u4ee5\u4e0d\u5199\u8be5\u65b9\u6cd5, \u5982\u679c\u91cd\u5199\u90a3\u4e48 return self # def __iter__(self): # return self def __next__(self): #\u771f\u6b63\u8fd4\u56de\u8fed\u4ee3\u503c\u7684\u903b\u8f91 try: word = self.iter_list[self.index] except IndexError: raise StopIteration # \u629b\u51fa\u7684\u5f02\u5e38\u5e94\u8be5\u662fStopIteration self.index += 1 return word if __name__ == '__main__': whw_com = Company([\"whw\",\"naruto\",\"sasuke\"]) for i in whw_com: print(i) \"\"\" whw naruto sasuke \"\"\"","title":"\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u8fed\u4ee3\u5668\u4e0e\u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_3","text":"\u5173\u4e8e\u751f\u6210\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u5e26\u6709 yield \u7684\u51fd\u6570\u5728 Python\u4e2d\u88ab\u79f0\u4e4b\u4e3a generator\uff08\u751f\u6210\u5668\u51fd\u6570\uff09\u3002 \u751f\u6210\u5668\u6709\u5173\u7684\u8bf4\u660e\u5982\u4e0b\uff1a \u4e00\u4e2a\u5e26\u6709 yield \u7684\u51fd\u6570\u5c31\u662f\u4e00\u4e2a generator\uff0c\u5b83\u548c\u666e\u901a\u51fd\u6570\u4e0d\u540c\uff0c\u751f\u6210\u4e00\u4e2a generator \u770b\u8d77\u6765\u50cf\u51fd\u6570\u8c03\u7528\uff0c \u4f46\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u51fd\u6570\u4ee3\u7801\uff0c\u76f4\u5230\u5bf9\u5176\u8c03\u7528 next()\uff08\u5728 for \u5faa\u73af\u4e2d\u4f1a\u81ea\u52a8\u8c03\u7528 next()\uff09\u624d\u5f00\u59cb\u6267\u884c\u3002 \u867d\u7136\u6267\u884c\u6d41\u7a0b\u4ecd\u6309\u51fd\u6570\u7684\u6d41\u7a0b\u6267\u884c\uff0c\u4f46\u6bcf\u6267\u884c\u5230\u4e00\u4e2a yield \u8bed\u53e5\u5c31\u4f1a\u4e2d\u65ad\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u503c\uff0c\u4e0b\u6b21\u6267\u884c\u65f6\u4ece yield \u7684\u4e0b\u4e00\u4e2a\u8bed\u53e5\u7ee7\u7eed\u6267\u884c\u3002 \u770b\u8d77\u6765\u5c31\u597d\u50cf\u4e00\u4e2a\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u88ab yield \u4e2d\u65ad\u4e86\u6570\u6b21\uff0c\u6bcf\u6b21\u4e2d\u65ad\u90fd\u4f1a\u901a\u8fc7 yield \u8fd4\u56de\u5f53\u524d\u7684\u8fed\u4ee3\u503c\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5728\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2agenerator\u540e\uff0c\u57fa\u672c\u4e0a\u6c38\u8fdc\u4e0d\u4f1a\u8c03\u7528next()\uff0c\u800c\u662f\u901a\u8fc7for\u5faa\u73af\u6765\u8fed\u4ee3\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u5173\u5fc3StopIteration\u7684\u9519\u8bef\u3002","title":"\u751f\u6210\u5668\u7684\u7406\u89e3"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_4","text":"\u5f97\u5230\u751f\u6210\u5668\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a\u4e00\u79cd\u662f \u751f\u6210\u5668\u8868\u8fbe\u5f0f \u53e6\u5916\u4e00\u79cd\u662f \u51fd\u6570\u7684\u65b9\u6cd5","title":"\u5f97\u5230\u4e00\u4e2a\u751f\u6210\u5668"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#1","text":"\u5176\u5b9e\uff0c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5c31\u662f\u5c06 \u5217\u8868\u63a8\u5bfc\u5f0f \u4e2d\u7684 [] \u6539\u6210 () \u5c31\u53ef\u4ee5\u4e86\uff1a generator = (i**2 for i in range(1,6))","title":"1\u3001\u751f\u6210\u5668\u8868\u8fbe\u5f0f"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#2","text":"\u5229\u7528\u51fd\u6570\u7684\u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5fc5\u5b9a\u5305\u542b yield \u5173\u952e\u5b57\uff1a def generator(max): while max > 0: yield max max -= 1","title":"2\u3001\u51fd\u6570\u7684\u65b9\u6cd5"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_5","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 next() \u65b9\u6cd5\uff08\u6216\u8005 __next__() \uff09\u4ee5\u53ca for\u5faa\u73af\u8fed\u4ee3 \u83b7\u53d6\u751f\u6210\u5668\u4e2d\u7684\u503c","title":"\u83b7\u53d6\u751f\u6210\u5668\u4e2d\u7684\u503c"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#1next","text":"generator = (i for i in range(1,6)) print(next(generator)) print(next(generator)) print(next(generator)) print(next(generator)) print(next(generator)) # \u751f\u6210\u5668\u4e2d\u53ea\u67095\u4e2a\u6570\uff0c\u8d85\u51fa\u8303\u56f4\u4f1a\u629b\u51faStopIteration\u5f02\u5e38 print(next(generator)) \u5f88\u660e\u663e\uff0c\u6211\u4eec\u7684\u751f\u6210\u5668\u4e2d\u53ea\u67095\u4e2a\u503c\uff0c\u4f46\u662f\u53d6\u503c\u7684\u65f6\u5019\u5374next\u4e866\u6b21\uff0c\u6240\u4ee5\u5728\u7b2c\u516d\u6b21\u89c6\u56fe\u53d6\u503c\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u4f1a\u629b\u51fa StopIteration\u5f02\u5e38 \u3002","title":"1\u3001next\u65b9\u6cd5\u83b7\u53d6\u751f\u6210\u5668\u7684\u503c"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#2for","text":"for\u5faa\u73af\u672c\u8d28\u4e0a\u8c03\u7528\u4e86\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684 __iter__() \u65b9\u6cd5\uff0c\u5f97\u5230\u4e86\u8be5\u5bf9\u8c61\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u7136\u540e\u65e0\u9650\u8c03\u7528 __next__() \u65b9\u6cd5\uff0c\u5f97\u5230\u5bf9\u8c61\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002\u76f4\u5230 StopIteration \u5f02\u5e38\uff0c\u4ee3\u8868\u8fed\u4ee3\u5668\u4e2d\u5df2\u65e0\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0cfor\u5faa\u73af\u81ea\u52a8\u5904\u7406\u8be5\u5f02\u5e38\uff0c\u8df3\u51fa\u5faa\u73af\u3002 \u5229\u7528for\u5faa\u73af\u7684\u65b9\u6cd5\u4e0d\u7528\u5173\u5fc3StopIteration\u5f02\u5e38\uff0c\u5185\u90e8\u4f1a\u505a\u5904\u7406\uff1a for\u5faa\u73af\u8c03\u7528generator\u4e2d\u7684 __iter__() \u7b2c\u4e00\u6b21\u8c03\u7528 __iter__() \u4f1a\u542f\u52a8\u751f\u6210\u5668, \u6267\u884c\u5230yeild, \u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61, i\u7684\u503c\u4fdd\u5b58\u5728\u751f\u6210\u5668\u5bf9\u8c61\u4e2d. for\u5faa\u73af\u62ff\u5230\u503c\u5e76\u4e0d\u65ad\u5bf9\u8fed\u4ee3\u5668\u8c03\u7528next, \u76f4\u5230\u8fd4\u56de\u5f02\u5e38\u8df3\u51fa. generator = (i for i in range(1,6)) for num in generator: print(num,end=' ') \u7ed3\u679c\u4e3a\uff1a 1 2 3 4 5","title":"2\u3001for\u5faa\u73af\u8fed\u4ee3"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_6","text":"\u751f\u6210\u5668\u5b58\u5728\u7684\u6700\u5927\u7684\u610f\u4e49\u5c31\u662f\uff1a \u8282\u7701\u5185\u5b58\u7a7a\u95f4 \u6211\u4eec\u6765\u770b\u4e00\u4e2aFibonacci\u6570\u5217\u7684\u4f8b\u5b50\uff1a\u4e00\u79cd\u5360\u7528\u5185\u5b58\u7684\u505a\u6cd5\u662f\u8fd9\u6837\u7684\uff1a def fib(max): lst = [] n,a,b = 0,0,1 while n < max: lst.append(b) a,b = b,a+b n += 1 return lst f = fib(6) print(f) # [1, 1, 2, 3, 5, 8] \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u90fdappend\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u53bb\u4e86\uff0c\u6700\u7ec8\u5c06\u8fd9\u4e2a\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u5217\u8868\u8fd4\u56de\u3002\u6ca1\u9519\uff01\u806a\u660e\u7684\u4f60\u6216\u8bb8\u4e00\u773c\u5c31\u770b\u51fa\u95ee\u9898\u6765\u4e86\uff1a\u5982\u679c\u8fd9\u4e2amax\u8bbe\u7f6e\u7684\u7279\u522b\u5927\uff0c\u90a3\u5c82\u4e0d\u610f\u5473\u7740\u8fd9\u4e2a\u5b58\u653e\u7740\u6240\u6709\u6570\u636e\u7684lst\u4e5f\u4f1a\u8ddf\u7740\u589e\u5927\uff0c\u7ed3\u679c\u5c31\u4f1a\u5bfc\u81f4\u5185\u5b58\u5403\u7d27\uff01 \u6ca1\u9519\uff0c\u751f\u6210\u5668\u7684\u5b58\u5728\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u201c\u5927\u91cf\u6570\u636e\u5360\u7528\u5185\u5b58\u201d\u7684\u95ee\u9898\u3002 \u751f\u6210\u5668\u89e3\u51b3\u4e0a\u9762\u95ee\u9898\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a def fib(max): n,a,b = 0,0,1 while n < max: yield b a,b = b,a+b n += 1 f = fib(6) for i in f: print(i,end=' ') #1 1 2 3 5 8 \u5bf9\u4e8e\u751f\u6210\u5668\u6765\u8bf4\uff0c\u5b83\u4e0d\u4f1a\u5c06\u51fd\u6570\u4ea7\u751f\u7684\u6570\u636e\u4e00\u6b21\u6027\u7684\u62ff\u51fa\u6765\uff0c\u800c\u662f\u5728\u7a0b\u5e8f\u9700\u8981\u7684\u65f6\u5019\uff0c\u5c06\u6570\u636e\u4e00\u4e2a\u4e00\u4e2a\u7684 \u751f\u4ea7 \u51fa\u6765\uff0c\u76f8\u6bd4\u4e8e\u524d\u9762\u7528\u5217\u8868\u4e00\u6b21\u6027\u7684\u5c06\u6570\u636e\u53d6\u51fa\u7684\u65b9\u6cd5\uff0c\u5927\u5927\u8282\u7701\u4e86\u7a0b\u5e8f\u5bf9\u5185\u5b58\u7684\u5360\u7528\uff0c\u800c\u8fd9\u4e5f\u662f\u751f\u6210\u5668\u5728\u5b9e\u9645\u4e2d\u6700\u5e38\u7528\u7684\u60c5\u666f\u4e4b\u4e00\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u7528\u751f\u6210\u5668"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#python","text":"Python\u4e2d\u51fd\u6570\u7684\u5de5\u4f5c\u539f\u7406 def foo(): bar() def bar(): pass foo() python\u7684\u89e3\u91ca\u5668\u4f1a\u7528 PyEval_EvalFramEx(C\u8bed\u8a00) \u51fd\u6570\u53bb\u6267\u884c\u6211\u4eec\u7684foo\u51fd\u6570. \u5728\u8fd0\u884cfoo\u51fd\u6570\u7684\u65f6\u5019\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2a\u6808\u5e27(Stack frame), \u8fd9\u4e2a\u6808\u5e27\u662f\u4e00\u4e2a\u4e0a\u4e0b\u6587, \u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61. \u6808\u5e27\u4f1a\u5c06foo\u51fd\u6570\u53d8\u6210\u4e00\u4e2a\u5b57\u8282\u7801\u5bf9\u8c61, \u4f7f\u7528dis\u67e5\u770b\u5b57\u8282\u7801 \u7136\u540e\u6808\u5e27\u7684\u4e0a\u4e0b\u6587\u4e2d\u53bb\u8fd0\u884c\u5b57\u8282\u7801(\u5b57\u8282\u7801\u662f\u5168\u5c40\u552f\u4e00\u7684) def foo(): bar() def bar(): pass import dis print(dis.dis(foo)) 2 0 LOAD_GLOBAL 0 (bar) 2 CALL_FUNCTION 0 4 POP_TOP 6 LOAD_CONST 0 (None) 8 RETURN_VALUE None \u5f53foo\u8c03\u7528bar, \u53c8\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6808\u5e27, \u7136\u540e\u8fd0\u884cbar\u7684\u5b57\u8282\u7801 \u6240\u6709\u7684\u6808\u5e27\u90fd\u662f\u5206\u914d\u5728\u5806\u7684\u5185\u5b58\u4e0a, \u5982\u679c\u4e0d\u91ca\u653e\u4f1a\u4e00\u76f4\u5b58\u5728, \u6240\u4ee5\u6808\u5e27\u53ef\u4ee5\u72ec\u7acb\u4e8e\u8c03\u7528\u8005\u5b58\u5728, \u5c31\u6bd4\u5982\u8c03\u7528\u8005foo\u4e0d\u5b58\u5728\u4e5f\u6ca1\u5173\u7cfb, \u53ea\u8981\u6307\u9488\u6307\u5411bar\u7684\u6808\u5e27\u5c31\u53ef\u4ee5\u63a7\u5236 import inspect frame = None def foo(): bar() def bar(): pass global frame # \u83b7\u53d6\u5f53\u524d\u51fd\u6570\u7684\u6808\u5e27\u5e76\u8d4b\u7ed9\u5168\u5c40\u53d8\u91cfframe frame = inspect.currentframe() foo() print(frame.f_code.co_name) # >>> bar caller_frame = frame.f_back print(caller_frame.f_code.co_name) # >>> foo python\u89e3\u91ca\u5668\u4f1a\u7f16\u8bd1\u5b57\u8282\u7801, \u5982\u679c\u53d1\u73b0\u6709yeild, \u5c31\u4f1a\u6807\u8bb0\u8be5\u51fd\u6570, \u7136\u540e\u518d\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61. \u800c\u8fd9\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u5b9e\u9645\u4e0a\u662f\u628a\u8fd9\u4e2aframe\u5bf9\u8c61\u505a\u4e86\u4e00\u4e2a\u5c01\u88c5 \u751f\u6210\u5668\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u3001\u4efb\u4f55\u51fd\u6570\u4e2d\u6062\u590d\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u7684\u6808\u5e27\u5e76\u4e0d\u5728\u771f\u6b63\u7684\u6808\u4e2d\uff0c\u800c\u662f\u5806\u4e2d f_lasti\u6307\u5411\u201c\u6700\u540e\u6267\u884c\u6307\u4ee4\u201d\u7684\u6307\u9488\u3002\u521d\u59cb\u5316\u4e3a -1\uff0c\u610f\u5473\u7740\u5b83\u6ca1\u5f00\u59cb\u8fd0\u884c","title":"Python\u662f\u5982\u4f55\u5b9e\u73b0\u751f\u6210\u5668\u7684"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_7","text":"\u666e\u901a\u51fd\u6570 def func(index): a, b = 0, 1 i = 0 print(a) while i < index: print(b) a, b = b, a + b i += 1 func(10) \u751f\u6210\u5668 def func(index): a, b = 0, 1 i = 0 print(a) while i < index: yield b a, b = b, a + b i += 1 for i in func(10): print(i)","title":"\u6590\u6ce2\u90a3\u5951\u7684\u5b9e\u73b0"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_8","text":"\u5bf9\u4e8e\u751f\u6210\u5668\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u6211\u4eec\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u8bf4\u660e\u4e0b\uff1a def fib(): a = b =1 yield a yield b while 1: a , b = b , a+b yield b g = fib() for num in fib(): if num > 10:break print(num) \u8fd9\u6bb5\u4ee3\u7801\u5176\u5b9e\u662fFibonacci\u6570\u5217\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570fib\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u8d4b\u503c\u7ed9g\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u91cc\u7684g\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u751f\u6210\u5668\u3002 \u5f53for\u5faa\u73af\u5f00\u59cb\u904d\u5386(\u8fed\u4ee3)\u8fd9\u4e2a\u751f\u6210\u5668\u7684\u65f6\u5019\u6267\u884cfib\u51fd\u6570\u5185\u90e8\u7684\u4ee3\u7801\uff1a\u7b2c\u4e00\u53e5\u662f\u5c061\u8d4b\u503c\u7ed9a\u548cb\uff0c\u63a5\u7740\u9047\u5230\u4e86 yield a \u8bed\u53e5\uff0c\u5f53\u7a0b\u5e8f\u9047\u5230yield\u8bed\u53e5\u65f6\u4f1a\u6682\u65f6 \u505c\u4e0b\u6765 \uff0c\u4e0d\u6267\u884c\u540e\u9762\u7684\u4ee3\u7801\uff0c\u800c\u6b64\u65f6\uff0c\u6211\u4eec\u5728\u51fd\u6570\u7684\u5916\u9762\u5c31\u53ef\u4ee5\u901a\u8fc7 next(\u751f\u6210\u5668\u5bf9\u8c61) \u7684\u65b9\u6cd5\u83b7\u53d6 \u5f53\u524dyield\u540e\u9762\u7684\u503c \uff08\u6ce8\u610f\uff0cfor\u5faa\u73af\u4e2d\u81ea\u5e26\u4e86next()\u65b9\u6cd5\uff09\uff0c\u800c\u6211\u4eec\u5728for\u5faa\u73af\u4e2d\u5f97\u5230\u7684\u7b2c\u4e00\u4e2a\u503c\u5c31\u662f\u5f53\u524d\u7684a\u7684\u503c 1 ;\u63a5\u7740\uff0cfor\u5faa\u73af\u5f00\u59cb\u904d\u5386\u7b2c\u4e8c\u4e2a\u6570\uff08\u76f8\u5f53\u4e8e\u6267\u884c\u7b2c\u4e8c\u4e2anext(g)\uff09\u7684\u65f6\u5019\uff0c\u53c8\u53d1\u73b0\u4e86 yield b \uff0c\u6839\u636e\u524d\u9762\u7684\u8bf4\u660e\uff0c\u6b64\u65f6\u4f1a\u6253\u5370 \u7b2c\u4e8c\u4e2ayield\u540e\u9762\u7684b\u7684\u5f53\u524d\u503c 1 \uff1b\u5728for\u5faa\u73af\u8fdb\u884c\u7b2c\u4e09\u6b21\u904d\u5386\u7684\u65f6\u5019\u8fdb\u5165while\u5faa\u73af\uff1a\u9996\u5148\u5c06b\u7684\u5f53\u524d\u503c\u8d4b\u503c\u7ed9a\uff0c\u7136\u540e\u5c06a+b\u7684\u503c\u8d4b\u503c\u7ed9b\uff08Fibonacci\u6570\u5217\u7684\u7b97\u6cd5\uff09\uff0c\u7136\u540e\u9047\u5230\u4e86\u7b2c\u4e09\u4e2ayield\uff0c\u56e0\u6b64\u7b2c\u4e09\u6b21\u904d\u5386\u76f8\u5f53\u4e8e\u6267\u884c\u4e86\u7b2c\u4e09\u6b21next(g)\uff0c\u4e8e\u662f\u6b64\u65f6\u4f1a\u6253\u5370\u5f53\u524d\u7684b\u7684\u503c 2 \uff0c\u6240\u4ee5num\u7684\u524d\u4e09\u4e2a\u503c\u4f9d\u6b21\u662f\uff1a 1\u30011\u30012 \u3002\u5728\u7b2c\u56db\u6b21\u904d\u5386\u7684\u65f6\u5019\uff0c\u518d\u6b21\u5728while\u5faa\u73af\u4e2d\u8fdb\u884c\u6570\u636e\u7684\u8d4b\u503c\u4e0e\u4ea4\u6362\u64cd\u4f5c\uff0c\u76f4\u5230\u5f97\u5230\u7684\u503cnum\u4e0d\u6ee1\u8db3 num>10 \u8fd9\u4e2a\u6761\u4ef6\u4e3a\u6b62\u3002 \u603b\u7684\u6765\u8bb2\uff0c\u5176\u5b9e\u5c31\u662f\u51fd\u6570\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u53ea\u8981\u9047\u5230 yield \u5173\u952e\u5b57\u5c31\u4f1a \u505c\u6b62 \uff0c\u7b49\u5f85\u5916\u9762\u53d1\u51fanext(\u751f\u6210\u5668\u5bf9\u8c61)\u7684\u4fe1\u53f7\u518d\u5c06yield\u540e\u9762\u7684\u503c\u8fd4\u56de\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u53ef\u80fd\u4f1a\u66f4\u6709\u52a9\u4e8e\u5927\u5bb6\u7406\u89e3\uff1a \u6211\u4eec\u5148\u6253\u5370\u4e00\u4e2anext(g)\u770b\u4e00\u4e0b\u7ed3\u679c\uff1a def count(n): while n > 0: print('before yield') yield n n -= 1 print('after yield') g = count(5) print(next(g)) \u7ed3\u679c\u4e3a\uff1a before yield 5 \u7136\u540e\u6211\u4eec\u6253\u5370\u4e24\u6b21next(g)\u7684\u65f6\u5019\u770b\u4e00\u4e0b\u7ed3\u679c\uff1a before yield 5 after yield before yield 4 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\"after yield\"\u5176\u5b9e\u662f\u5728\u7b2c\u4e8c\u6b21\u6267\u884cnext(g)\u7684\u65f6\u5019\u6253\u5370\u7684\uff0c\u8fd9\u4e5f\u5145\u5206\u8bf4\u660e\u4e86\u7b2c\u4e00\u6b21\u7684\u65f6\u5019count\u51fd\u6570\u505c\u5728\u4e86yield n\u90a3\u91cc\u3002 \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230\uff1a \u5982\u4e00\u4e2a\u51fd\u6570\u4e2d\u51fa\u73b0\u591a\u4e2ayield\u5219next()\u4f1a\u505c\u6b62\u5728\u4e0b\u4e00\u4e2ayield\u524d def generator(): print('one') yield 123 print('two') yield 456 print('end') g = generator() # \u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u6682\u505c\u5728 yield 123\uff0c\u6253\u5370one\u4e0e123 print(next(g)) # \u7b2c\u4e8c\u6b21\u8fd0\u884c\uff0c\u6682\u505c\u5728 yield 456\uff0c\u6253\u5370two\u4e0e456 print(next(g)) # \u7b2c\u4e09\u6b21\u8fd0\u884c\uff0c\u5148\u6253\u5370end\uff0c\u4f46\u662f\u7531\u4e8e\u540e\u9762\u6ca1\u6709yield\u8bed\u53e5\u4e86\uff0c\u56e0\u6b64\u518d\u4f7f\u7528next()\u65b9\u6cd5\u4f1a\u62a5\u9519 print(next(g)) \u4e0a\u9762\u4ee3\u7801\u7684\u7ed3\u8bba\u9700\u8981\u597d\u597d\u7406\u89e3\u3002","title":"\u751f\u6210\u5668\u7684\u6267\u884c\u6d41\u7a0b"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#return","text":"\u5173\u4e8e\u751f\u6210\u5668\u4e2d\u7528return\uff0c\u4e2a\u4eba\u603b\u7ed3\u6709 \u903b\u8f91\u7ed3\u675f \u4e0e \u663e\u793a\u8c03\u7528 \u4e24\u79cd","title":"\u751f\u6210\u5668\u4e2d\u7684return"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_9","text":"\u6240\u8c13\u903b\u8f91\u7ed3\u675f\uff0c\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u5728\u8bbe\u8ba1\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u5728\u4e0d\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u4f7f\u7528return\u8df3\u51fa\u51fd\u6570\uff1a def read_file(path): size = 1024 with open(path,'r') as f: while True: block = f.read(size) if block: yield block else: return \u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528return\u5b9e\u9645\u4e0a\u662f\u4ece\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u8003\u8651\u7684\uff0c\u5f53\u6211\u4eec\u8bfb\u53d6\u4e00\u4e2a\u6587\u4ef6\u7684\u65f6\u5019\u5982\u679c\u9047\u5230\u7a7a\u6587\u4ef6\u76f4\u63a5\u8df3\u51fa\u51fd\u6570\uff0c\u907f\u514d\u4e86read\u5f97\u5230\u7684\u65e0\u6548\u6570\u636e\u81f4\u4f7f\u540e\u7eed\u64cd\u4f5c\u629b\u51fa\u5f02\u5e38\u3002","title":"\u903b\u8f91\u7ed3\u675f"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_10","text":"\u4ece\u7f51\u4e0a\u67e5\u770b\u76f8\u5173\u6587\u6863\uff0c\u6709\u8fd9\u6837\u7684\u8bf4\u6cd5\uff1a \u4f5c\u4e3a\u751f\u6210\u5668\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8fed\u4ee3\u5c31\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5\u4e0d\u80fd\u663e\u793a\u7684\u5728\u751f\u6210\u5668\u51fd\u6570\u4e2dreturn \u67d0\u4e2a\u503c\uff0c\u5305\u62ecNone\u503c\u4e5f\u4e0d\u884c\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u201cSyntaxError\u201d\u7684\u5f02\u5e38 \u3002\u4f46\u662f\u672c\u4eba\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u53d1\u73b0\u8fd9\u79cd\u60c5\u51b5\u53ea\u5728python2\u4e2d\u4f1a\u6709\uff0c\u6211\u81ea\u5df1\u7528\u7684python3.6.8\u89e3\u91ca\u5668\u5e76\u6ca1\u6709\u62a5\u9519\uff1a python2\u89e3\u91ca\u5668\u4e0b\u7684\u60c5\u51b5\uff1a Python 2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:30:26) [MSC v.1500 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> def func(): ... yield 123 ... return 666 ... File \"<stdin>\", line 3 SyntaxError: 'return' with argument inside generator python3.6.8\u89e3\u91ca\u5668\u8fd0\u884c\u7ed3\u679c\uff1a Python 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 23 2018, 23:31:17) [MSC v.1916 32 bit (Intel)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> def func(): ... yield 123 ... return 666 ... >>> g = func() >>> print(next(g)) 123","title":"\u663e\u793a\u8c03\u7528"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#yieldsend","text":"\u770b\u4e0b\u9762\u4ee3\u7801\uff1a # -*- coding:utf-8 -*- def func(): print('one') yield 123 print('two') yield 456 print('end') g = func() print(next(g)) print(next(g)) \u7ed3\u679c\u4e3a\uff1a one 123 two 456 \u8fd9\u91cc\u4f60\u53ef\u80fd\u4f1a\u60f3\uff1ayield 123\u6211\u4eec\u6253\u5370\u51fa\u6765123\uff0cyield 456\u6253\u5370\u51fa\u4e86456\uff0c\u90a3\u4e48\uff0c123\u4e0e456\u662f\u4e0d\u662fyield\u7684\u8fd4\u56de\u503c\u5462\uff1f\u7b54\u6848\u5f53\u7136\u4e0d\u662f\u3002 \u5b9e\u9645\u4e0a\uff0c \u6211\u4eec\u83b7\u53d6\u5230\u7684yield\u540e\u9762\u7684\u503c\u5176\u5b9e\u662f\u901a\u8fc7next()\u65b9\u6cd5\u5f97\u5230\u7684\uff0c\u800cyield\u672c\u8eab\u662f\u6709\u8fd4\u56de\u503c\u7684\uff0c\u9ed8\u8ba4\u60c5\u51b5\u662fNone \u6211\u4eec\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u57fa\u7840\u4e0a\u505a\u4e00\u4e9b\u6539\u52a8\u6765\u770b\u4e00\u4e0b\uff1a def func(): print('one') a = yield 123 print(a) print('two') yield 456 print('end') g = func() print(next(g)) \u8fd9\u91cc\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2ayield\u7684\u8fd4\u56de\u503c\u8d4b\u503c\u7ed9\u4e86a\uff0c\u63a5\u4e0b\u6765\u6253\u5370a\u3002\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u8fd0\u884c\u5230\u7b2c\u4e00\u4e2ayield\u7684\u65f6\u5019\u4f1a\u505c\u4e0b\u6765\uff0c\u4e0d\u4f1a\u63a5\u7740\u6267\u884c\uff0c\u56e0\u6b64\u7b2c\u4e00\u6b21\u4e0d\u4f1a\u6253\u5370a\uff0c\u7ed3\u679c\u4e3a\uff1a one 123 \u800c\u5982\u679c\u6211\u4eec \u5728\u4e0a\u9762\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\u518d\u52a0\u4e00\u4e2anext(g) \u7684\u8bdd\uff0c\u6253\u5370\u7684\u7ed3\u679c\u5982\u4e0b\uff1a one 123 None two 456 \u6211\u4eec\u4f1a\u53d1\u73b0\u5728\u8fdb\u884c\u5230\u7b2c\u4e8c\u4e2ayield\u7684\u65f6\u5019123\u4e0etwo\u4e4b\u95f4\u6253\u5370\u51fa\u4e86None\uff0c \u8fd9\u4e2aNone\u5176\u5b9e\u5c31\u662f\u7b2c\u4e00\u4e2ayield\u7684\u9ed8\u8ba4\u8fd4\u56de\u503c \u60f3\u8981\u4fee\u6539\u8fd9\u4e2a\u8fd4\u56de\u503c\uff0c\u6216\u8005\u8bf4\u4e3a\u5176\u8d4b\u503c\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 send\u65b9\u6cd5 \uff1a\u901a\u8fc7send\u65b9\u6cd5\u53bb\u4e3a\u4e0a\u4e00\u6b21\u88ab\u6302\u8d77\u7684yield\u8bed\u53e5\u8d4b\u503c\u3002 \u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a def my_generator(): value = yield 1 value = yield(value) value = yield(value) g = my_generator() print(next(g)) print(g.send('hello')) print(g.send('world')) \u7ed3\u679c\u4e3a\uff1a 1 hello world \u5177\u4f53\u7684\u8fc7\u7a0b\u8bf4\u660e\u5982\u4e0b\uff1a \u5f53\u8c03\u7528gen.next()\u65b9\u6cd5\u65f6\uff0cpython\u9996\u5148\u4f1a\u6267\u884cMyGenerator\u65b9\u6cd5\u7684yield 1\u8bed\u53e5\u3002\u7531\u4e8e\u662f\u4e00\u4e2ayield\u8bed\u53e5\uff0c\u56e0\u6b64\u65b9\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u88ab\u6302\u8d77\uff0c\u800cnext\u65b9\u6cd5\u8fd4\u56de\u503c\u4e3ayield\u5173\u952e\u5b57\u540e\u9762\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u5373\u4e3a1\u3002 \u5f53\u8c03\u7528gen.send('hello')\u65b9\u6cd5\u65f6\uff0cpython\u9996\u5148\u6062\u590dMyGenerator\u65b9\u6cd5\u7684\u8fd0\u884c\u73af\u5883\u3002\u540c\u65f6\uff0c\u5c06\u8868\u8fbe\u5f0f(yield 1)\u7684\u8fd4\u56de\u503c\u5b9a\u4e49\u4e3asend\u65b9\u6cd5\u53c2\u6570\u7684\u503c\uff0c\u5373\u4e3a'hello'\u3002\u8fd9\u6837\uff0c\u63a5\u4e0b\u6765value=\uff08yield 1\uff09\u8fd9\u4e00\u8d4b\u503c\u8bed\u53e5\u4f1a\u5c06value\u7684\u503c\u7f6e\u4e3a'hello'\u3002\u7ee7\u7eed\u8fd0\u884c\u4f1a\u9047\u5230yield value\u8bed\u53e5\u3002\u56e0\u6b64MyGenerator\u65b9\u6cd5\u518d\u6b21\u88ab\u6302\u8d77\u3002\u540c\u65f6\uff0csend\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e3ayield\u5173\u952e\u5b57\u540e\u9762\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u4e5f\u5373value\u7684\u503c\u4e3a'hello'\u3002 \u5f53\u8c03\u7528send('world')\u65b9\u6cd5\u65f6MyGenerator\u65b9\u6cd5\u7684\u8fd0\u884c\u73af\u5883\u3002\u540c\u65f6\uff0c\u5c06\u8868\u8fbe\u5f0f(yield value)\u7684\u8fd4\u56de\u503c\u5b9a\u4e49\u4e3asend\u65b9\u6cd5\u53c2\u6570\u7684\u503c\uff0c\u5373\u4e3a'world'\u3002\u8fd9\u6837\uff0c\u63a5\u4e0b\u6765value=\uff08yield value\uff09\u8fd9\u4e00\u8d4b\u503c\u8bed\u53e5\u4f1a\u5c06value\u7684\u503c\u7f6e\u4e3a'world'\u3002\u7b2c\u4e09\u6b21\u6253\u5370'world'\u3002 \u53ef\u4ee5\u770b\u5230\uff1a\u7b2c\u4e00\u4e2a\u7684next\u53d6\u5230\u4e861\uff1b\u6211\u4eec\u628a'hello'\u8d4b\u503c\u7ed9\u7b2c\u4e00\u4e2ayield\u4f5c\u4e3a\u5176\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u7b2c\u4e8c\u6b21\u53d6\u5230\u7684\u662f'hello'\uff0c\u540c\u6837\u7684\uff0c\u7b2c\u4e09\u6b21\u53d6\u5230\u7684\u662f\u6211\u4eec\u4e3a\u7b2c\u4e8c\u4e2ayield\u8868\u8fbe\u5f0fsend\u7684\u8fd4\u56de\u503c'world'\u3002 \u603b\u7684\u6765\u8bf4\uff0csend\u65b9\u6cd5\u548cnext\u65b9\u6cd5\u552f\u4e00\u7684\u533a\u522b\u662f\u5728\u6267\u884csend\u65b9\u6cd5\u4f1a\u9996\u5148\u628a\u4e0a\u4e00\u6b21\u6302\u8d77\u7684yield\u8bed\u53e5\u7684\u8fd4\u56de\u503c\u901a\u8fc7\u53c2\u6570\u8bbe\u5b9a\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0e\u751f\u6210\u5668\u65b9\u6cd5\u7684\u4ea4\u4e92\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\uff0c\u5728\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\u6ca1\u6709\u6267\u884cnext\u65b9\u6cd5\u4e4b\u524d\uff0c\u7531\u4e8e\u6ca1\u6709yield\u8bed\u53e5\u88ab\u6302\u8d77\uff0c\u5982\u679c\u975e\u8981\u662f\u7528send\u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u7684send\u65b9\u6cd5\u91cc\u9762\u7684\u53c2\u6570\u5fc5\u987b\u662fNone\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002 \u4e0b\u9762\u662f\u9519\u8bef\u7684\u5199\u6cd5\uff1a def my_generator(): value = yield 1 value = yield(value) value = yield(value) g = my_generator() print(g.send('hello')) print(g.send('world')) \u7a0b\u5e8f\u4f1a\u62a5\u8fd9\u6837\u7684\u9519\uff1a TypeError: can't send non-None value to a just-started generator \u5982\u679c\u975e\u8981\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528send\u65b9\u6cd5\uff0c\u6b63\u786e\u7684\u5199\u6cd5\u662f\u5728send\u65b9\u6cd5\u4e2d\u52a0\u53c2\u6570None\uff1a def my_generator(): value = yield 1 value = yield(value) value = yield(value) g = my_generator() print(g.send(None)) print(g.send('hello')) print(g.send('world')) \u7ed3\u679c\u4e3a\uff1az 1 hello world \u56e0\u4e3a\u5f53send\u65b9\u6cd5\u7684\u53c2\u6570\u4e3aNone\u65f6\uff0c\u5b83\u4e0enext\u65b9\u6cd5\u5b8c\u5168\u7b49\u4ef7\u3002\u4f46\u662f\u6ce8\u610f\uff0c\u867d\u7136\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u662f\u4e0d\u89c4\u8303\u3002\u6240\u4ee5\uff0c\u5728\u8c03\u7528send\u65b9\u6cd5\u4e4b\u524d\uff0c\u8fd8\u662f\u5148\u8c03\u7528\u4e00\u6b21next\u65b9\u6cd5\u4e3a\u597d\u3002","title":"yield\u8fd4\u56de\u503c\u4e0esend\u65b9\u6cd5"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#yield","text":"\u8fd9\u662fyield\u5341\u5206\u5173\u952e\u7684\u7528\u5904\uff0c\u7406\u89e3\u4e86yield\u7684\u673a\u5236\u5bf9\u7406\u89e3\u534f\u7a0b\u5e76\u8fdb\u884c\u76f8\u5173\u5e76\u53d1\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u5341\u5206\u6709\u5e2e\u52a9\uff01 \u6240\u8c13 \u534f\u7a0b \uff0c\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u51fd\u6570\u4e4b\u95f4\u7684\u76f8\u4e92 \u5207\u6362 \u3002\u800c\u5229\u7528yield\u4e0esend\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5341\u5206\u65b9\u4fbf\u7684\u5b9e\u73b0\u8fd9\u79cd\u6548\u679c\uff1a # -*- coding:utf-8 -*- import time def consumer(): # consumer\u4f5c\u4e3a\u4e00\u4e2a\u751f\u6210\u5668 while 1: data = yield def producer(): # \u751f\u6210\u5668\u5bf9\u8c61 g = consumer() # \u5148next\u540e\u9762\u624d\u80fdsend\u5177\u4f53\u7684\u975eNone\u7684\u503c,\u76f8\u5f53\u4e8e\u5148send\u4e00\u4e2aNone next(g) for i in range(1000000): g.send(i) if __name__ == '__main__': start = time.time() #\u5e76\u53d1\u6267\u884c,\u4f46\u662f\u4efb\u52a1producer\u9047\u5230io\u5c31\u4f1a\u963b\u585e\u4f4f,\u5e76\u4e0d\u4f1a\u5207\u5230\u8be5\u7ebf\u7a0b\u5185\u7684\u5176\u4ed6\u4efb\u52a1\u53bb\u6267\u884c producer() print('\u6267\u884c\u65f6\u95f4\uff1a',time.time() - start) \u7ed3\u679c\u4e3a\uff1a \u6267\u884c\u65f6\u95f4\uff1a 0.12068915367126465 \u5f53\u7136\u8fd9\u6d89\u53ca\u5230\u4e86\u534f\u7a0b\u4e0eIO\u963b\u585e\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u8fd9\u91cc\u4e0d\u505a\u8ba8\u8bba\uff0c\u4e0a\u8ff0\u51fd\u6570\u662f\u4e3a\u4e86\u8bf4\u660e yield\u4e0esend\u5728\u51fd\u6570\u4efb\u52a1\u4e4b\u95f4\u4e0d\u65ad\u5207\u6362\u7684\u529f\u80fd \u53c2\u8003\u6587\u732e\uff1a https://www.cnblogs.com/wj-1314/p/8490822.html https://blog.csdn.net/jason_cuijiahui/article/details/84947310 https://blog.csdn.net/zxpyld3x/article/details/79181834 https://blog.csdn.net/hedan2013/article/details/56293173","title":"\u5229\u7528yield\u5b9e\u73b0\u7b80\u5355\u7684\u534f\u7a0b\u6848\u4f8b\u2014\u2014\u751f\u4ea7\u8005\u6d88\u8d39\u8005"},{"location":"python\u8fdb\u9636/\u751f\u6210\u5668/#_11","text":"\u751f\u6210\u5668\uff08generator\uff09\u4e2d \u7684yield \u4ee5\u53ca\u51e0\u4e2a\u5b9e\u4f8b","title":"\u4e2a\u4eba\u5176\u4ed6\u535a\u5ba2"},{"location":"python\u8fdb\u9636/\u7b97\u6cd5\u6570\u636e\u7ed3\u6784/","text":"\u4e2a\u4eba\u535a\u5ba2 \u4f7f\u7528Python\u5b9e\u73b0\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784\u4e4b\u539f\u7406\u8bb2\u89e3 \u4f7f\u7528Python\u5b9e\u73b0\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784 Python\u5b9e\u73b0\u57fa\u672c\u7684\u6392\u5e8f\u7b97\u6cd5 Python\u5b9e\u73b0\u9ad8\u7ea7\u7684\u6392\u5e8f\u7b97\u6cd5 \u4f7f\u7528Python\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684LRUCache \u5229\u7528\u961f\u5217Queue\u5b9e\u73b0\u4e00\u4e2a\u591a\u5e76\u53d1\u201c\u7ebf\u7a0b\u6c60\u201d\u6548\u679c\u7684Socket\u7a0b\u5e8f \u5806\u6808\u76f8\u5173\u7684\u51e0\u4e2a\u7ec3\u4e60\u2014\u2014\u5806\u6808\u6548\u7387\u9ad8\u4e8e\u9012\u5f52 \u7b97\u6cd5\u6570\u636e\u7ed3\u6784\u7b49\uff08\u65e7\u5f52\u7ed3\uff09","title":"01 python\u5b9e\u73b0\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784"},{"location":"python\u8fdb\u9636/\u7b97\u6cd5\u6570\u636e\u7ed3\u6784/#_1","text":"\u4f7f\u7528Python\u5b9e\u73b0\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784\u4e4b\u539f\u7406\u8bb2\u89e3 \u4f7f\u7528Python\u5b9e\u73b0\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784 Python\u5b9e\u73b0\u57fa\u672c\u7684\u6392\u5e8f\u7b97\u6cd5 Python\u5b9e\u73b0\u9ad8\u7ea7\u7684\u6392\u5e8f\u7b97\u6cd5 \u4f7f\u7528Python\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684LRUCache \u5229\u7528\u961f\u5217Queue\u5b9e\u73b0\u4e00\u4e2a\u591a\u5e76\u53d1\u201c\u7ebf\u7a0b\u6c60\u201d\u6548\u679c\u7684Socket\u7a0b\u5e8f \u5806\u6808\u76f8\u5173\u7684\u51e0\u4e2a\u7ec3\u4e60\u2014\u2014\u5806\u6808\u6548\u7387\u9ad8\u4e8e\u9012\u5f52 \u7b97\u6cd5\u6570\u636e\u7ed3\u6784\u7b49\uff08\u65e7\u5f52\u7ed3\uff09","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u8fdb\u9636/\u7f13\u5b58\u4e0eredis/","text":"\u7f13\u5b58\u4e0eredis python\u4e2d\u7f13\u5b58\u76f8\u5173\u7684\u64cd\u4f5c","title":"01 \u7f13\u5b58\u4e0eredis"},{"location":"python\u8fdb\u9636/\u7f13\u5b58\u4e0eredis/#redis","text":"python\u4e2d\u7f13\u5b58\u76f8\u5173\u7684\u64cd\u4f5c","title":"\u7f13\u5b58\u4e0eredis"},{"location":"python\u8fdb\u9636/\u7f51\u7f16\u5e76\u53d1/","text":"\u4e2a\u4eba\u535a\u5ba2 \u7f51\u7edc\u7f16\u7a0b\u7684\u57fa\u672c\u6982\u5ff5 \u5e76\u53d1\u7f16\u7a0b\u4e4b\u2014\u2014\u591a\u8fdb\u7a0b \u5e76\u53d1\u7f16\u7a0b\u4e4b\u2014\u2014\u591a\u7ebf\u7a0b \u8fdb\u7a0b\u5173\u4e8e\u6570\u636e\u5171\u4eab \u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b \u5f00\u542f\u8fdb\u7a0b\u7684 \u4e24\u79cd\u65b9\u5f0f put_nowait\u4e0eget_nowait \u9501\u7684\u6982\u5ff5\u4ee5\u53ca \u6a21\u62df\u62a2\u7968\u7ec3\u4e60 \u8fdb\u7a0b\u4e4b\u95f4\u7684\u5185\u5b58\u7a7a\u95f4\u662f\u9694\u79bb\u7684 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u2014\u2014\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b \u5229\u7528\u751f\u6210\u5668\u5236\u4f5c\u4e00\u4e2a\u7b80\u5355\u7684\u8fdb\u5ea6\u6761 \u6a21\u62df\u8fdc\u7a0bSSH\u6267\u884c\u547d\u4ee4\u7684\u7f16\u89e3\u7801\u8bf4\u660e Python Cookbook\u4e2d\u5173\u4e8e\u5e76\u53d1\u7684\u4f8b\u5b50 \u57fa\u4e8e\u7ebf\u7a0b\u6c60\u7684\u591a\u5e76\u53d1Socket\u7a0b\u5e8f\u7684\u5b9e\u73b0 \u5728socket\u7684server\u7aef\u5904\u7406client\u7aef\u53d1\u6765\u7684\u6570\u636e 5\u4e2a\u7ebf\u7a0b\uff1at1\u3001t2\u5148\u5173\u95ed\uff0ct3\u5728t4\u4e0et5\u4e4b\u540e\u5173\u95ed \u5229\u7528\u961f\u5217Queue\u5b9e\u73b0\u4e00\u4e2a\u591a\u5e76\u53d1\u201c\u7ebf\u7a0b\u6c60\u201d\u6548\u679c\u7684Socket\u7a0b\u5e8f \u7ebf\u7a0b1:\u57fa\u672c\u6982\u5ff5\u3001\u7ebf\u7a0b\u7684\u57fa\u7840\u64cd\u4f5c\uff08\u963b\u585e\u4e0e\u5ef6\u8fdf\u7684\u7406\u89e3\uff09\u3001\u591a\u7ebf\u7a0b\u4e0e\u591a\u8fdb\u7a0b\u7684\u6548\u7387\u5dee\u3001\u6570\u636e\u5171\u4eab\u95ee\u9898\u3001\u7ebf\u7a0b\u7684\u5176\u4ed6\u65b9\u6cd5 \u7ebf\u7a0b2:enumerate\u65b9\u6cd5\u3001\u5b88\u62a4\u7ebf\u7a0b\u3001\u7ebf\u7a0b\u9501\u3001\u6b7b\u9501\u73b0\u8c61(\u9012\u5f52\u9501\u4e0e\u4e92\u65a5\u9501)\u3001\u7ebf\u7a0b\u961f\u5217\u3001\u8fdb\u7a0b\u6c60\u4e0e\u7ebf\u7a0b\u6c60 \u91cd\u8981\u6982\u5ff5 GIL\u2014\u2014\u5168\u5c40\u89e3\u91ca\u5668\u9501 GIL\u7684\u5168\u79f0\u662fGlobal Interpreter Lock, python\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5e94\u4e8ec\u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b GIL\u4f7f\u5f97\u540c\u4e00\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4e00\u4e2acpu\u4e0a\u6267\u884c\u5b57\u8282\u7801, \u65e0\u6cd5\u5c06\u591a\u4e2a\u7ebf\u7a0b\u6620\u5c04\u5230\u591a\u4e2acpu\u4e0a\u6267\u884c GIL\u4f1a\u6839\u636e\u6267\u884c\u7684\u5b57\u8282\u7801\u884c\u6570\u4ee5\u53ca\u65f6\u95f4\u7247\u91ca\u653egil, gil\u5728\u9047\u5230io\u7684\u64cd\u4f5c\u65f6\u5019\u4e3b\u52a8\u91ca\u653e GIL\u7684\u7279\u70b9 Python\u5728\u591a\u7ebf\u7a0b\u4e0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6267\u884c\u65b9\u5f0f\u4e3a\uff1a \u83b7\u53d6GIL \u6267\u884c\u4ee3\u7801\u76f4\u5230sleep\u6216\u8005\u662fpython\u865a\u62df\u673a\u5c06\u5176\u6302\u8d77\u3002 \u91ca\u653eGIL \u4e00\u4e2aCPU\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b, \u4f8b\u5982\u4e00\u4e2aCPU \u6709\u4e09\u4e2a\u7ebf\u7a0b, \u9996\u5148\u7ebf\u7a0bA\u6267\u884c, \u7136\u540e\u7ebf\u7a0bA\u8fbe\u5230\u91ca\u653e\u6761\u4ef6\u8fdb\u884c\u91ca\u653eGIL, \u7ebf\u7a0bB\u548c\u7ebf\u7a0bC\u8fdb\u884c\u7ade\u4e89GIL, \u8c01\u62a2\u5230GIL, \u7ee7\u7eed\u6267\u884c. GIL\u65e0\u6cd5\u4fdd\u8bc1\u7ebf\u7a0b\u7edd\u5bf9\u5b89\u5168 total = 0 def add(): global total for i in range(1000000): total += 1 def desc(): global total for i in range(1000000): total -= 1 import threading thread1 = threading.Thread(target=add) thread2 = threading.Thread(target=desc) thread1.start() thread2.start() thread1.join() thread2.join() print(total) \"\"\" \u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u90fd\u4e0d\u4e00\u6837\uff01 \"\"\" \u5b88\u62a4\u8fdb\u7a0b \u672c\u8eab\u662f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u3002 \u5b88\u62a4\u7684\u662f\u201c\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u201d\uff08\u5c31\u662f if __name__ == '__main__' \u4e0b\u9762\u7684\u4ee3\u7801\uff09 \u2014\u2014 \u6b63\u5e38\u60c5\u51b5\u4e0d\u8bbe\u7f6e\u5b88\u62a4\u8fdb\u7a0b\uff01 \u7ed3\u675f\u6761\u4ef6\uff1a\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u7ed3\u675f\uff08\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u7ed3\u675f\u4e0d\u4ee3\u8868\u4e3b\u8fdb\u7a0b\u7ed3\u675f--\u4e3b\u8fdb\u7a0b\u6bd4\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u8981\u957f\uff01\uff09\uff01\u5b88\u62a4\u8fdb\u7a0b\u624d\u7ed3\u675f\uff01 \u56e0\u4e3a\u5b88\u62a4\u8fdb\u7a0b\u4e5f\u662f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u4ed6\u5fc5\u987b\u5728\u4e3b\u8fdb\u7a0b\u7ed3\u675f\u4e4b\u524d\u7ed3\u675f\uff01\u56e0\u6b64\u5b83\u7ed3\u675f\u7684\u8282\u70b9\u662f\u201c\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u7ed3\u675f\u201d \u5177\u4f53\u8fc7\u7a0b\uff1a\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u7ed3\u675f\uff0c\u5b88\u62a4\u8fdb\u7a0b\u7ed3\u675f\uff1b\u4e3b\u8fdb\u7a0b\u8981\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90\uff1b\u4e3b\u8fdb\u7a0b\u7b49\u5f85\u5176\u4ed6\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u7ed3\u675f\uff1b\u4e3b\u8fdb\u7a0b\u56de\u6536\u6240\u6709\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90\uff01 \u4e3a\u4ec0\u4e48\u4e3b\u8fdb\u7a0b\u8981\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ed3\u675f\u4e4b\u540e\u624d\u7ed3\u675f \uff1f \u200b \u2014\u2014\u56e0\u4e3a\u4e3b\u8fdb\u7a0b\u8981\u8d1f\u8d23\u7ed9\u5b50\u8fdb\u7a0b\u56de\u6536\u4e00\u4e9b\u7cfb\u7edf\u7684\u8d44\u6e90","title":"03 \u7f51\u7edc\u7f16\u7a0b\u4e0e\u5e76\u53d1\u7f16\u7a0b"},{"location":"python\u8fdb\u9636/\u7f51\u7f16\u5e76\u53d1/#_1","text":"\u7f51\u7edc\u7f16\u7a0b\u7684\u57fa\u672c\u6982\u5ff5 \u5e76\u53d1\u7f16\u7a0b\u4e4b\u2014\u2014\u591a\u8fdb\u7a0b \u5e76\u53d1\u7f16\u7a0b\u4e4b\u2014\u2014\u591a\u7ebf\u7a0b \u8fdb\u7a0b\u5173\u4e8e\u6570\u636e\u5171\u4eab \u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b \u5f00\u542f\u8fdb\u7a0b\u7684 \u4e24\u79cd\u65b9\u5f0f put_nowait\u4e0eget_nowait \u9501\u7684\u6982\u5ff5\u4ee5\u53ca \u6a21\u62df\u62a2\u7968\u7ec3\u4e60 \u8fdb\u7a0b\u4e4b\u95f4\u7684\u5185\u5b58\u7a7a\u95f4\u662f\u9694\u79bb\u7684 \u8fdb\u7a0b\u95f4\u901a\u4fe1\u2014\u2014\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u6a21\u578b \u5229\u7528\u751f\u6210\u5668\u5236\u4f5c\u4e00\u4e2a\u7b80\u5355\u7684\u8fdb\u5ea6\u6761 \u6a21\u62df\u8fdc\u7a0bSSH\u6267\u884c\u547d\u4ee4\u7684\u7f16\u89e3\u7801\u8bf4\u660e Python Cookbook\u4e2d\u5173\u4e8e\u5e76\u53d1\u7684\u4f8b\u5b50 \u57fa\u4e8e\u7ebf\u7a0b\u6c60\u7684\u591a\u5e76\u53d1Socket\u7a0b\u5e8f\u7684\u5b9e\u73b0 \u5728socket\u7684server\u7aef\u5904\u7406client\u7aef\u53d1\u6765\u7684\u6570\u636e 5\u4e2a\u7ebf\u7a0b\uff1at1\u3001t2\u5148\u5173\u95ed\uff0ct3\u5728t4\u4e0et5\u4e4b\u540e\u5173\u95ed \u5229\u7528\u961f\u5217Queue\u5b9e\u73b0\u4e00\u4e2a\u591a\u5e76\u53d1\u201c\u7ebf\u7a0b\u6c60\u201d\u6548\u679c\u7684Socket\u7a0b\u5e8f \u7ebf\u7a0b1:\u57fa\u672c\u6982\u5ff5\u3001\u7ebf\u7a0b\u7684\u57fa\u7840\u64cd\u4f5c\uff08\u963b\u585e\u4e0e\u5ef6\u8fdf\u7684\u7406\u89e3\uff09\u3001\u591a\u7ebf\u7a0b\u4e0e\u591a\u8fdb\u7a0b\u7684\u6548\u7387\u5dee\u3001\u6570\u636e\u5171\u4eab\u95ee\u9898\u3001\u7ebf\u7a0b\u7684\u5176\u4ed6\u65b9\u6cd5 \u7ebf\u7a0b2:enumerate\u65b9\u6cd5\u3001\u5b88\u62a4\u7ebf\u7a0b\u3001\u7ebf\u7a0b\u9501\u3001\u6b7b\u9501\u73b0\u8c61(\u9012\u5f52\u9501\u4e0e\u4e92\u65a5\u9501)\u3001\u7ebf\u7a0b\u961f\u5217\u3001\u8fdb\u7a0b\u6c60\u4e0e\u7ebf\u7a0b\u6c60","title":"\u4e2a\u4eba\u535a\u5ba2"},{"location":"python\u8fdb\u9636/\u7f51\u7f16\u5e76\u53d1/#_2","text":"","title":"\u91cd\u8981\u6982\u5ff5"},{"location":"python\u8fdb\u9636/\u7f51\u7f16\u5e76\u53d1/#gil","text":"GIL\u7684\u5168\u79f0\u662fGlobal Interpreter Lock, python\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5e94\u4e8ec\u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b GIL\u4f7f\u5f97\u540c\u4e00\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5728\u4e00\u4e2acpu\u4e0a\u6267\u884c\u5b57\u8282\u7801, \u65e0\u6cd5\u5c06\u591a\u4e2a\u7ebf\u7a0b\u6620\u5c04\u5230\u591a\u4e2acpu\u4e0a\u6267\u884c GIL\u4f1a\u6839\u636e\u6267\u884c\u7684\u5b57\u8282\u7801\u884c\u6570\u4ee5\u53ca\u65f6\u95f4\u7247\u91ca\u653egil, gil\u5728\u9047\u5230io\u7684\u64cd\u4f5c\u65f6\u5019\u4e3b\u52a8\u91ca\u653e","title":"GIL\u2014\u2014\u5168\u5c40\u89e3\u91ca\u5668\u9501"},{"location":"python\u8fdb\u9636/\u7f51\u7f16\u5e76\u53d1/#gil_1","text":"Python\u5728\u591a\u7ebf\u7a0b\u4e0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u6267\u884c\u65b9\u5f0f\u4e3a\uff1a \u83b7\u53d6GIL \u6267\u884c\u4ee3\u7801\u76f4\u5230sleep\u6216\u8005\u662fpython\u865a\u62df\u673a\u5c06\u5176\u6302\u8d77\u3002 \u91ca\u653eGIL \u4e00\u4e2aCPU\u53ea\u80fd\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b, \u4f8b\u5982\u4e00\u4e2aCPU \u6709\u4e09\u4e2a\u7ebf\u7a0b, \u9996\u5148\u7ebf\u7a0bA\u6267\u884c, \u7136\u540e\u7ebf\u7a0bA\u8fbe\u5230\u91ca\u653e\u6761\u4ef6\u8fdb\u884c\u91ca\u653eGIL, \u7ebf\u7a0bB\u548c\u7ebf\u7a0bC\u8fdb\u884c\u7ade\u4e89GIL, \u8c01\u62a2\u5230GIL, \u7ee7\u7eed\u6267\u884c.","title":"GIL\u7684\u7279\u70b9"},{"location":"python\u8fdb\u9636/\u7f51\u7f16\u5e76\u53d1/#gil_2","text":"total = 0 def add(): global total for i in range(1000000): total += 1 def desc(): global total for i in range(1000000): total -= 1 import threading thread1 = threading.Thread(target=add) thread2 = threading.Thread(target=desc) thread1.start() thread2.start() thread1.join() thread2.join() print(total) \"\"\" \u6bcf\u4e00\u6b21\u7684\u7ed3\u679c\u90fd\u4e0d\u4e00\u6837\uff01 \"\"\"","title":"GIL\u65e0\u6cd5\u4fdd\u8bc1\u7ebf\u7a0b\u7edd\u5bf9\u5b89\u5168"},{"location":"python\u8fdb\u9636/\u7f51\u7f16\u5e76\u53d1/#_3","text":"\u672c\u8eab\u662f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u3002 \u5b88\u62a4\u7684\u662f\u201c\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u201d\uff08\u5c31\u662f if __name__ == '__main__' \u4e0b\u9762\u7684\u4ee3\u7801\uff09 \u2014\u2014 \u6b63\u5e38\u60c5\u51b5\u4e0d\u8bbe\u7f6e\u5b88\u62a4\u8fdb\u7a0b\uff01 \u7ed3\u675f\u6761\u4ef6\uff1a\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u7ed3\u675f\uff08\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u7ed3\u675f\u4e0d\u4ee3\u8868\u4e3b\u8fdb\u7a0b\u7ed3\u675f--\u4e3b\u8fdb\u7a0b\u6bd4\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u8981\u957f\uff01\uff09\uff01\u5b88\u62a4\u8fdb\u7a0b\u624d\u7ed3\u675f\uff01 \u56e0\u4e3a\u5b88\u62a4\u8fdb\u7a0b\u4e5f\u662f\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u4ed6\u5fc5\u987b\u5728\u4e3b\u8fdb\u7a0b\u7ed3\u675f\u4e4b\u524d\u7ed3\u675f\uff01\u56e0\u6b64\u5b83\u7ed3\u675f\u7684\u8282\u70b9\u662f\u201c\u4e3b\u8fdb\u7a0b\u4ee3\u7801\u7ed3\u675f\u201d \u5177\u4f53\u8fc7\u7a0b\uff1a\u4e3b\u8fdb\u7a0b\u7684\u4ee3\u7801\u7ed3\u675f\uff0c\u5b88\u62a4\u8fdb\u7a0b\u7ed3\u675f\uff1b\u4e3b\u8fdb\u7a0b\u8981\u56de\u6536\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90\uff1b\u4e3b\u8fdb\u7a0b\u7b49\u5f85\u5176\u4ed6\u6240\u6709\u7684\u5b50\u8fdb\u7a0b\u7ed3\u675f\uff1b\u4e3b\u8fdb\u7a0b\u56de\u6536\u6240\u6709\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90\uff01 \u4e3a\u4ec0\u4e48\u4e3b\u8fdb\u7a0b\u8981\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ed3\u675f\u4e4b\u540e\u624d\u7ed3\u675f \uff1f \u200b \u2014\u2014\u56e0\u4e3a\u4e3b\u8fdb\u7a0b\u8981\u8d1f\u8d23\u7ed9\u5b50\u8fdb\u7a0b\u56de\u6536\u4e00\u4e9b\u7cfb\u7edf\u7684\u8d44\u6e90","title":"\u5b88\u62a4\u8fdb\u7a0b"},{"location":"python\u8fdb\u9636/\u8fdc\u7a0b\u8c03\u8bd5/","text":"Pycharm\u8fde\u63a5\u8fdc\u7a0b\u4ee3\u7801 \u4f7f\u7528Pycharm\u8fdc\u7a0b\u8c03\u8bd5\u670d\u52a1\u5668\u4ee3\u7801","title":"03 Pycharm\u8fde\u63a5\u8fdc\u7a0b\u4ee3\u7801"},{"location":"python\u8fdb\u9636/\u8fdc\u7a0b\u8c03\u8bd5/#pycharm","text":"\u4f7f\u7528Pycharm\u8fdc\u7a0b\u8c03\u8bd5\u670d\u52a1\u5668\u4ee3\u7801","title":"Pycharm\u8fde\u63a5\u8fdc\u7a0b\u4ee3\u7801"},{"location":"python\u8fdb\u9636/\u95ed\u5305\u88c5\u9970\u5668/","text":"\u95ed\u5305\u4e0e\u88c5\u9970\u5668 \u6211\u7684\u8fd9\u7bc7\u535a\u5ba2\u5c06\u95ed\u5305\u4e0e\u88c5\u9970\u5668\u4e0e\u88c5\u9970\u5668\u7684\u5b9e\u73b0\u8fc7\u7a0b\u8bb2\u8ff0\u7684\u975e\u5e38\u660e\u767d\u4e86\uff1a Python\u88c5\u9970\u5668\u7684\u8c03\u7528\u8fc7\u7a0b \u4e00\u6bb5\u4ee3\u7801\u5e26\u4f60\u7406\u89e3\u201c\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\u201d \u88c5\u9970\u5668\u7684\u5b9e\u9645\u5e94\u7528 \u8bf4\u767d\u4e86\uff0c\u88c5\u9970\u5668\u5176\u5b9e\u5c31\u662f\u5728\u6211\u4eec\u60f3\u6267\u884c\u7684\u51fd\u6570\u7684\u4e4b\u524d\u4e0e\u4e4b\u540e\u505a\u4e00\u4e9b\u4e8b\u60c5\u3002 \u4e0b\u9762\u8fd9\u7bc7\u535a\u5ba2\u4e2d\u7684\u6280\u672f\u70b9\u4f7f\u7528\u5230\u4e86\u88c5\u9970\u5668\uff1a pymysql\u94fe\u63a5\u6c60\u3001\u4e8b\u7269\u7684\u4f7f\u7528\u6d45\u8c08 \u8ba1\u7b97\u7a0b\u5e8f\u6267\u884c\u7684\u65f6\u95f4 import time def counter(func): #\u6ce8\u610f\u91cc\u9762\u5fc5\u987b\u6709*args def inner(*args): start = time.time() #\u6ce8\u610f\u8fd9\u91cc\u5fc5\u987b\u6709*args\uff0c\u56e0\u4e3a\u4e0b\u9762\u7684swap\u51fd\u6570\u67092\u4e2a\u53c2\u6570 func(*args) stop = time.time() s = '\u51fd\u6570 %s \u6267\u884c\u65f6\u95f4\uff1a%s'%(func.__name__,(stop-start)) print(s) return inner @counter def swap(x,y): time.sleep(2) x,y = y,x print(x,y) if __name__ == '__main__': counter(swap(11,22)) \u7ed9\u51fd\u6570\u52a0\u4e0a\u7b80\u5355\u7684\u8ba4\u8bc1\u903b\u8f91 '''# \u5229\u7528\u4e0d\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 \u8fdb\u884c\u767b\u9646\u8ba4\u8bc1\u7684\u5c0f\u7ec3\u4e60''' def outer(func): def wrapper(*args,**kwargs): username = input('\u7528\u6237\u540d\uff1a').strip() password = input('\u5bc6\u7801\uff1a').strip() if username == 'whw' and password == '123': print('\u767b\u9646\u6210\u529f\uff01') #\u767b\u9646\u6210\u529f\u624d\u80fd\u6267\u884cfunc1 ret = func() return ret else: print('\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u9519\u8bef\uff01') return wrapper @outer # func1 = outer(func1) def func1(): print('do something...') if __name__ == '__main__': func1() '''# \u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 \u2014\u2014 \u8ba4\u8bc1\u6210\u529f\u540e\u4e0d\u7528\u518d\u8ba4\u8bc1''' login_status = {'name':None,'pwd':False} def auth(auth_type='file'): def outer(func): def wrapper(*args,**kwargs): #\u8bf4\u660e\u5df2\u7ecf\u8fdb\u884c\u8fc7\u8ba4\u8bc1\u4e86\uff0c\u76f4\u63a5\u8fd0\u884c\u51fd\u6570\u5c31ok if login_status['name'] and login_status['pwd']: return func(*args,**kwargs) #\u6ee1\u8db3\u8ba4\u8bc1\u7684\u53c2\u6570\u8fdb\u884c\u8ba4\u8bc1\uff1a if auth_type == 'file': print(login_status) with open('user_message','r',encoding='utf8')as f: dic_data = eval(f.read()) username = input('\u7528\u6237\u540d\uff1a').strip() password = input('\u5bc6\u7801\uff1a').strip() if username == dic_data['name'] and password == dic_data['password']: #\u4fee\u6539login_status\u7684\u503c login_status['name'] = username login_status['pwd'] = password #\u6267\u884cfunc\u51fd\u6570 func(*args,**kwargs) else: print('\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u9519\u8bef\uff01') else: print('\u975e\u6cd5\u51fd\u6570\uff01\u65e0\u6743\u8fdb\u884c\u8ba4\u8bc1\uff01') return wrapper return outer @auth(auth_type='file') def func1(): print('111') @auth(auth_type='file') def func2(): print(222) @auth(auth_type='file') def func3(): print(333) if __name__ == '__main__': func1() func2() func3() \u5229\u7528\u95ed\u5305\u8ba1\u7b97\u4e0d\u540c\u5206\u5236\u4e0b\u7684\u6210\u7ee9\u901a\u8fc7\u60c5\u51b5 ### \u5229\u7528\u95ed\u5305\u8ba1\u7b97\u4e0d\u540c\u5206\u5236\u4e0b\u7684\u6210\u7ee9\u901a\u8fc7\u60c5\u51b5 def score_pass(score_level): def compare(score): if score >= score_level: print('passed!') else: print('failed!') return compare if __name__ == '__main__': #100\u5206\u5236 60\u5206\u53ca\u683c score_100 = score_pass(60) #120\u5206\u5236\uff0c70\u5206\u53ca\u683c score_120 = score_pass(70) #\u76f8\u540c\u7684\u5206\u6570\u5728\u4e0d\u540c\u5206\u5236\u4e0b\u901a\u8fc7\u60c5\u51b5\u4e0d\u4e00\u6837\uff01 score_100(60)#passed! score_120(60)#failed!","title":"08 \u95ed\u5305\u4e0e\u88c5\u9970\u5668"},{"location":"python\u8fdb\u9636/\u95ed\u5305\u88c5\u9970\u5668/#_1","text":"\u6211\u7684\u8fd9\u7bc7\u535a\u5ba2\u5c06\u95ed\u5305\u4e0e\u88c5\u9970\u5668\u4e0e\u88c5\u9970\u5668\u7684\u5b9e\u73b0\u8fc7\u7a0b\u8bb2\u8ff0\u7684\u975e\u5e38\u660e\u767d\u4e86\uff1a Python\u88c5\u9970\u5668\u7684\u8c03\u7528\u8fc7\u7a0b \u4e00\u6bb5\u4ee3\u7801\u5e26\u4f60\u7406\u89e3\u201c\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668\u201d","title":"\u95ed\u5305\u4e0e\u88c5\u9970\u5668"},{"location":"python\u8fdb\u9636/\u95ed\u5305\u88c5\u9970\u5668/#_2","text":"\u8bf4\u767d\u4e86\uff0c\u88c5\u9970\u5668\u5176\u5b9e\u5c31\u662f\u5728\u6211\u4eec\u60f3\u6267\u884c\u7684\u51fd\u6570\u7684\u4e4b\u524d\u4e0e\u4e4b\u540e\u505a\u4e00\u4e9b\u4e8b\u60c5\u3002 \u4e0b\u9762\u8fd9\u7bc7\u535a\u5ba2\u4e2d\u7684\u6280\u672f\u70b9\u4f7f\u7528\u5230\u4e86\u88c5\u9970\u5668\uff1a pymysql\u94fe\u63a5\u6c60\u3001\u4e8b\u7269\u7684\u4f7f\u7528\u6d45\u8c08 \u8ba1\u7b97\u7a0b\u5e8f\u6267\u884c\u7684\u65f6\u95f4 import time def counter(func): #\u6ce8\u610f\u91cc\u9762\u5fc5\u987b\u6709*args def inner(*args): start = time.time() #\u6ce8\u610f\u8fd9\u91cc\u5fc5\u987b\u6709*args\uff0c\u56e0\u4e3a\u4e0b\u9762\u7684swap\u51fd\u6570\u67092\u4e2a\u53c2\u6570 func(*args) stop = time.time() s = '\u51fd\u6570 %s \u6267\u884c\u65f6\u95f4\uff1a%s'%(func.__name__,(stop-start)) print(s) return inner @counter def swap(x,y): time.sleep(2) x,y = y,x print(x,y) if __name__ == '__main__': counter(swap(11,22)) \u7ed9\u51fd\u6570\u52a0\u4e0a\u7b80\u5355\u7684\u8ba4\u8bc1\u903b\u8f91 '''# \u5229\u7528\u4e0d\u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 \u8fdb\u884c\u767b\u9646\u8ba4\u8bc1\u7684\u5c0f\u7ec3\u4e60''' def outer(func): def wrapper(*args,**kwargs): username = input('\u7528\u6237\u540d\uff1a').strip() password = input('\u5bc6\u7801\uff1a').strip() if username == 'whw' and password == '123': print('\u767b\u9646\u6210\u529f\uff01') #\u767b\u9646\u6210\u529f\u624d\u80fd\u6267\u884cfunc1 ret = func() return ret else: print('\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u9519\u8bef\uff01') return wrapper @outer # func1 = outer(func1) def func1(): print('do something...') if __name__ == '__main__': func1() '''# \u5e26\u53c2\u6570\u7684\u88c5\u9970\u5668 \u2014\u2014 \u8ba4\u8bc1\u6210\u529f\u540e\u4e0d\u7528\u518d\u8ba4\u8bc1''' login_status = {'name':None,'pwd':False} def auth(auth_type='file'): def outer(func): def wrapper(*args,**kwargs): #\u8bf4\u660e\u5df2\u7ecf\u8fdb\u884c\u8fc7\u8ba4\u8bc1\u4e86\uff0c\u76f4\u63a5\u8fd0\u884c\u51fd\u6570\u5c31ok if login_status['name'] and login_status['pwd']: return func(*args,**kwargs) #\u6ee1\u8db3\u8ba4\u8bc1\u7684\u53c2\u6570\u8fdb\u884c\u8ba4\u8bc1\uff1a if auth_type == 'file': print(login_status) with open('user_message','r',encoding='utf8')as f: dic_data = eval(f.read()) username = input('\u7528\u6237\u540d\uff1a').strip() password = input('\u5bc6\u7801\uff1a').strip() if username == dic_data['name'] and password == dic_data['password']: #\u4fee\u6539login_status\u7684\u503c login_status['name'] = username login_status['pwd'] = password #\u6267\u884cfunc\u51fd\u6570 func(*args,**kwargs) else: print('\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u9519\u8bef\uff01') else: print('\u975e\u6cd5\u51fd\u6570\uff01\u65e0\u6743\u8fdb\u884c\u8ba4\u8bc1\uff01') return wrapper return outer @auth(auth_type='file') def func1(): print('111') @auth(auth_type='file') def func2(): print(222) @auth(auth_type='file') def func3(): print(333) if __name__ == '__main__': func1() func2() func3() \u5229\u7528\u95ed\u5305\u8ba1\u7b97\u4e0d\u540c\u5206\u5236\u4e0b\u7684\u6210\u7ee9\u901a\u8fc7\u60c5\u51b5 ### \u5229\u7528\u95ed\u5305\u8ba1\u7b97\u4e0d\u540c\u5206\u5236\u4e0b\u7684\u6210\u7ee9\u901a\u8fc7\u60c5\u51b5 def score_pass(score_level): def compare(score): if score >= score_level: print('passed!') else: print('failed!') return compare if __name__ == '__main__': #100\u5206\u5236 60\u5206\u53ca\u683c score_100 = score_pass(60) #120\u5206\u5236\uff0c70\u5206\u53ca\u683c score_120 = score_pass(70) #\u76f8\u540c\u7684\u5206\u6570\u5728\u4e0d\u540c\u5206\u5236\u4e0b\u901a\u8fc7\u60c5\u51b5\u4e0d\u4e00\u6837\uff01 score_100(60)#passed! score_120(60)#failed!","title":"\u88c5\u9970\u5668\u7684\u5b9e\u9645\u5e94\u7528"},{"location":"python\u8fdb\u9636/\u9762\u5411\u5bf9\u8c61/","text":"\u8fdb\u9636\u6c47\u603b \u5e38\u89c1\u7684\u7c7b\u7684\u5185\u7f6e\u65b9\u6cd5 * Python\u5185\u7f6e\u65b9\u6cd5\u4e0e\u9762\u5411\u5bf9\u8c61\u77e5\u8bc6\u70b9\u8fdb\u9636\u7cfb\u5217 * \u57fa\u7840\u77e5\u8bc6 \u9762\u5411\u5bf9\u8c61\u57fa\u7840 \u7c7b\u7684\u7ed1\u5b9a\u65b9\u6cd5 \u5b9e\u4f8b \u5b9e\u9645\u4f18\u5316\u7684\u4e00\u4e2a\u5b9e\u4f8b \u51cf\u5c0f\u8ba1\u7b97\u5f00\u9500\u5c06\u6570\u636e\u4fdd\u5b58\u5728\u7c7b\u7684\u5c5e\u6027\u4e2d\u7684\u601d\u60f3 \u4e00\u4e2a\u7c7b\u7684\u7ee7\u627f\u7684\u597d\u73a9\u5b9e\u4f8b Tom\u4e0eJerry\u8c01\u5148\u6b7b\uff1f \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684MySQL\u7c7b \u7b80\u5355\u7684\u4e00\u4e2aMySQL\u7c7b\u7684\u5b9e\u73b0","title":"01 \u8fdb\u9636\u77e5\u8bc6\u70b9\u4e0e\u9762\u5411\u5bf9\u8c61\u6574\u5408"},{"location":"python\u8fdb\u9636/\u9762\u5411\u5bf9\u8c61/#_1","text":"\u5e38\u89c1\u7684\u7c7b\u7684\u5185\u7f6e\u65b9\u6cd5 * Python\u5185\u7f6e\u65b9\u6cd5\u4e0e\u9762\u5411\u5bf9\u8c61\u77e5\u8bc6\u70b9\u8fdb\u9636\u7cfb\u5217 *","title":"\u8fdb\u9636\u6c47\u603b"},{"location":"python\u8fdb\u9636/\u9762\u5411\u5bf9\u8c61/#_2","text":"\u9762\u5411\u5bf9\u8c61\u57fa\u7840 \u7c7b\u7684\u7ed1\u5b9a\u65b9\u6cd5","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"python\u8fdb\u9636/\u9762\u5411\u5bf9\u8c61/#_3","text":"\u5b9e\u9645\u4f18\u5316\u7684\u4e00\u4e2a\u5b9e\u4f8b \u51cf\u5c0f\u8ba1\u7b97\u5f00\u9500\u5c06\u6570\u636e\u4fdd\u5b58\u5728\u7c7b\u7684\u5c5e\u6027\u4e2d\u7684\u601d\u60f3 \u4e00\u4e2a\u7c7b\u7684\u7ee7\u627f\u7684\u597d\u73a9\u5b9e\u4f8b Tom\u4e0eJerry\u8c01\u5148\u6b7b\uff1f \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684MySQL\u7c7b \u7b80\u5355\u7684\u4e00\u4e2aMySQL\u7c7b\u7684\u5b9e\u73b0","title":"\u5b9e\u4f8b"},{"location":"\u91cd\u8981\u64cd\u4f5c/compile/","text":"Python\u6e90\u6587\u4ef6\u7684\u7f16\u8bd1 \u5173\u4e8ePython\u7684\u6e90\u6587\u4ef6\u7f16\u8bd1\u770b\u8fd9\u4e00\u7bc7\u5c31\u591f\u4e86","title":"02 py\u6e90\u6587\u4ef6\u7f16\u8bd1"},{"location":"\u91cd\u8981\u64cd\u4f5c/compile/#python","text":"\u5173\u4e8ePython\u7684\u6e90\u6587\u4ef6\u7f16\u8bd1\u770b\u8fd9\u4e00\u7bc7\u5c31\u591f\u4e86","title":"Python\u6e90\u6587\u4ef6\u7684\u7f16\u8bd1"},{"location":"\u91cd\u8981\u64cd\u4f5c/up/","text":"\u7f51\u4e0a\u770b\u5230\u7684\u4e00\u7bc7\u6bd4\u8f83\u597d\u7684\u65b9\u5411\u6027\u7684\u6587\u7ae0 Python\u5b66\u4e60\u5b8c\u57fa\u7840\u8bed\u6cd5\u77e5\u8bc6\u540e\uff0c\u5982\u4f55\u8fdb\u4e00\u6b65\u63d0\u9ad8\uff1f \u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86Python\u57fa\u7840\u8bed\u6cd5\u7684\u5b66\u4e60\uff0c\u60f3\u8981\u77e5\u9053\u63a5\u4e0b\u6765\u5982\u4f55\u63d0\u9ad8\uff0c\u90a3\u4e48\u4f60\u5f97\u5148\u95ee\u95ee\u81ea\u5df1\u4f60\u8981\u7528Python\u6765\u505a\u4ec0\u4e48\uff1f\u76ee\u524d\u5b66\u4e60Python\u540e\u53ef\u80fd\u7684\u5c31\u4e1a\u65b9\u5411\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u9886\u57df\uff0c\u6211\u628a\u6bcf\u4e2a\u9886\u57df\u9700\u8981\u7684\u6280\u672f\u4f5c\u4e3a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5173\u952e\u8bcd\u6458\u8981\u3002 \u8bf4\u660e\uff1a\u4ee5\u4e0b\u6570\u636e\u53c2\u8003\u4e86\u4e3b\u8981\u7684\u62db\u8058\u95e8\u6237\u7f51\u7ad9\u4ee5\u53ca\u804c\u53cb\u96c6\u3002 \u804c\u4f4d \u6240\u9700\u6280\u80fd \u62db\u8058\u9700\u6c42\u91cf Python\u540e\u7aef\u5f00\u53d1\u5de5\u7a0b\u5e08 Python\u57fa\u7840 Django / Flask / Tornado / Sanic RESTful / \u63a5\u53e3\u6587\u6863\u64b0\u5199 MySQL / Redis / MongoDB / ElasticSearch Linux / Git / Scrum / PyCharm \u5927 Python\u722c\u866b\u5f00\u53d1\u5de5\u7a0b\u5e08 Python\u57fa\u7840 \u5e38\u7528\u6807\u51c6\u5e93\u548c\u4e09\u65b9\u5e93 Scrapy / PySpider Selenium / Appnium Redis / MongoDB / MySQL \u524d\u7aef / HTTP(S) / \u6293\u5305\u5de5\u5177 \u8f83\u5c11 Python\u91cf\u5316\u4ea4\u6613\u5f00\u53d1\u5de5\u7a0b\u5e08 Python\u57fa\u7840 \u6570\u636e\u7ed3\u6784 / \u7b97\u6cd5 / \u8bbe\u8ba1\u6a21\u5f0f NoSQL\uff08KV\u6570\u636e\u5e93\uff09 \u91d1\u878d\u5b66\uff08\u4e24\u878d\u3001\u671f\u6743\u3001\u671f\u8d27\u3001\u80a1\u7968\uff09 / \u6570\u5b57\u8d27\u5e01 \u8f83\u5927\uff08\u4e00\u7ebf\u57ce\u5e02\uff09 Python\u6570\u636e\u5206\u6790\u5de5\u7a0b\u5e08 / Python\u673a\u5668\u5b66\u4e60\u5de5\u7a0b\u5e08 \u7edf\u8ba1\u5b66\u4e13\u4e1a / \u6570\u5b66\u4e13\u4e1a / \u8ba1\u7b97\u673a\u4e13\u4e1a Python\u57fa\u7840 / \u7b97\u6cd5\u8bbe\u8ba1 SQL / NoSQL / Hive / Hadoop / Spark NumPy / Scikit-Learn / Pandas / Seaborn PyTorch / Tensorflow / OpenCV \u8f83\u5927\uff08\u4e00\u7ebf\u57ce\u5e02\uff09 Python\u81ea\u52a8\u5316\u6d4b\u8bd5\u5de5\u7a0b\u5e08 Python\u57fa\u7840 / \u5355\u5143\u6d4b\u8bd5 / \u8f6f\u4ef6\u6d4b\u8bd5\u57fa\u7840 Linux / Shell / JIRA / \u7985\u9053 / Jenkins / CI / CD Selenium / Robot Framework / Appnium ab / sysbench / JMeter / LoadRunner / QTP \u5927 Python\u81ea\u52a8\u5316\u8fd0\u7ef4\u5de5\u7a0b\u5e08 Python\u57fa\u7840 / Linux / Shell Fabric / Ansible / Playbook Zabbix / Saltstack / Puppet Docker / paramiko \u8f83\u5927\uff08\u4e00\u7ebf\u57ce\u5e02\uff09 Python\u4e91\u5e73\u53f0\u5f00\u53d1\u5de5\u7a0b\u5e08 Python\u57fa\u7840 OpenStack / CloudStack Ovirt / KVM Docker / K8S \u8f83\u5c11\uff08\u4e00\u7ebf\u57ce\u5e02\uff09 \u5982\u679c\u5f04\u6e05\u4e86\u81ea\u5df1\u5c06\u6765\u8981\u505a\u7684\u65b9\u5411\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6709\u9488\u5bf9\u6027\u7684\u5b66\u4e60\u4e86\uff0c\u4e0b\u9762\u7ed9\u5927\u5bb6\u4e00\u4e2a\u63a8\u8350\u4e66\u7c4d\u7684\u6e05\u5355\u3002 \u5165\u95e8\u8bfb\u7269 \u300aPython\u57fa\u7840\u6559\u7a0b\u300b\uff08 Beginning Python From Novice to Professional \uff09 \u300aPython\u5b66\u4e60\u624b\u518c\u300b\uff08 Learning Python \uff09 \u300aPython\u7f16\u7a0b\u300b\uff08 Programming Python \uff09 \u300aPython\u7f16\u7a0b\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b\uff08 Python Crash Course \uff09 \u300aPython Cookbook\u300b \u8fdb\u9636\u8bfb\u7269 \u300a\u8f6f\u4ef6\u67b6\u6784 - Python\u8bed\u8a00\u5b9e\u73b0\u300b\uff08 Software Architecture with Python \uff09 \u300a\u6d41\u7545\u7684Python\u300b\uff08 Fluent Python \uff09 \u300aPython\u8bbe\u8ba1\u6a21\u5f0f\u300b\uff08 Learning Python Design Patterns \uff09 \u300aPython\u9ad8\u7ea7\u7f16\u7a0b\u300b\uff08 Expert Python Programming \uff09 \u300aPython\u6027\u80fd\u5206\u6790\u4e0e\u4f18\u5316\u300b\uff08 Mastering Python High Performance \uff09 \u6570\u636e\u5e93\u76f8\u5173 \u300aMySQL\u5fc5\u77e5\u5fc5\u4f1a\u300b\uff08 MySQL Crash Course \uff09 \u300a\u6df1\u5165\u6d45\u51faMySQL - \u6570\u636e\u5e93\u5f00\u53d1\u3001\u4f18\u5316\u4e0e\u7ba1\u7406\u7ef4\u62a4\u300b \u300aMongoDB\u6743\u5a01\u6307\u5357\u300b\uff08 MongoDB: The Definitive Guide \uff09 \u300aRedis\u5b9e\u6218\u300b\uff08 Redis in Action \uff09 \u300aRedis\u5f00\u53d1\u4e0e\u8fd0\u7ef4\u300b Linux / Shell / Docker / \u8fd0\u7ef4 \u300a\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc\u300b \u300aLinux\u547d\u4ee4\u884c\u4e0eshell\u811a\u672c\u7f16\u7a0b\u5927\u5168\u300b\uff08 Linux Command Line and Shell Scripting Bible \uff09 \u300aPython\u81ea\u52a8\u5316\u8fd0\u7ef4:\u6280\u672f\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b \u300a\u7b2c\u4e00\u672cDocker\u4e66\u300b\uff08 The Docker Book \uff09 \u300aDocker\u7ecf\u5178\u5b9e\u4f8b\u300b\uff08Docker Cookbook\uff09 Django / Flask / Tornado \u300aDjango\u57fa\u7840\u6559\u7a0b\u300b\uff08 Tango with Django \uff09 \u300a\u8f7b\u91cf\u7ea7Django\u300b\uff08 Lightweight Django \uff09 \u300a\u7cbe\u901aDjango\u300b\uff08 Mastering Django: Core \uff09 \u300aPython Web\u5f00\u53d1\uff1a\u6d4b\u8bd5\u9a71\u52a8\u65b9\u6cd5\u300b\uff08 Test-Driven Development with Python \uff09 \u300aTwo Scoops of Django: Best Practice of Django 1.8\u300b \u300aFlask Web\u5f00\u53d1\uff1a\u57fa\u4e8ePython\u7684Web\u5e94\u7528\u5f00\u53d1\u5b9e\u6218\u300b\uff08 Flask Web Development: Developing Web Applications with Python \uff09 \u300a\u6df1\u5165\u7406\u89e3Flask\u300b\uff08 Mastering Flask \uff09 \u300aIntroduction to Tornado\u300b \u722c\u866b\u5f00\u53d1 \u300a\u7528Python\u5199\u7f51\u7edc\u722c\u866b\u300b\uff08 Web Scraping with Python \uff09 \u300a\u7cbe\u901aPython\u722c\u866b\u6846\u67b6Scrapy\u300b\uff08 Learning Scrapy \uff09 \u300aPython\u7f51\u7edc\u6570\u636e\u91c7\u96c6\u300b\uff08 Web Scraping with Python \uff09 \u300aPython\u722c\u866b\u5f00\u53d1\u4e0e\u9879\u76ee\u5b9e\u6218\u300b \u300aPython 3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218\u300b \u6570\u636e\u5206\u6790 \u300a\u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790\u300b\uff08 Python for Data Analysis \uff09 \u300aPython\u6570\u636e\u79d1\u5b66\u624b\u518c\u300b\uff08 Python Data Science Handbook \uff09 \u300aPython\u91d1\u878d\u5927\u6570\u636e\u5206\u6790\u300b\uff08 Python for Finance \uff09 \u300aPython\u6570\u636e\u53ef\u89c6\u5316\u7f16\u7a0b\u5b9e\u6218\u300b\uff08 Python Data Visualization Cookbook \uff09 \u300aPython\u6570\u636e\u5904\u7406\u300b\uff08 Data Wrangling with Python \uff09 \u673a\u5668\u5b66\u4e60 \u300aPython\u673a\u5668\u5b66\u4e60\u57fa\u7840\u6559\u7a0b\u300b\uff08 Introduction to Machine Learning with Python \uff09 \u300aPython\u673a\u5668\u5b66\u4e60\u5b9e\u8df5\u6307\u5357\u300b\uff08 Python Machine Learning Blueprints \uff09 \u300aPython\u673a\u5668\u5b66\u4e60\u5b9e\u8df5\uff1a\u6d4b\u8bd5\u9a71\u52a8\u7684\u5f00\u53d1\u65b9\u6cd5\u300b\uff08 Thoughtful Machine Learning with Python A Test Driven Approach \uff09 \u300aPython\u673a\u5668\u5b66\u4e60\u7ecf\u5178\u5b9e\u4f8b\u300b\uff08 Python Machine Learning Cookbook \uff09 \u300aTensorFlow\uff1a\u5b9e\u6218Google\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u300b \u5176\u4ed6\u4e66\u7c4d \u300aPro Git\u300b \u300aSelenium\u81ea\u52a8\u5316\u6d4b\u8bd5 - \u57fa\u4e8ePython\u8bed\u8a00\u300b\uff08 Learning Selenium Testing Tools with Python \uff09 \u300aSelenium\u81ea\u52a8\u5316\u6d4b\u8bd5\u4e4b\u9053\u300b \u300aScrum\u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\u300b\uff08 Software Development using Scrum \uff09 \u300a\u9ad8\u6548\u56e2\u961f\u5f00\u53d1 - \u5de5\u5177\u4e0e\u65b9\u6cd5\u300b \u5f53\u7136\u5b66\u4e60\u7f16\u7a0b\uff0c\u6700\u91cd\u8981\u7684\u901a\u8fc7\u9879\u76ee\u5b9e\u6218\u6765\u63d0\u5347\u81ea\u5df1\u7684\u7efc\u5408\u80fd\u529b\uff0cGithub\u4e0a\u6709\u5927\u91cf\u7684\u4f18\u8d28\u5f00\u6e90\u9879\u76ee\uff0c\u5176\u4e2d\u4e0d\u4e4f\u4f18\u8d28\u7684Python\u9879\u76ee\u3002\u6709\u4e00\u4e2a\u540d\u4e3a \u201cawesome-python-applications\u201d \u7684\u9879\u76ee\u5bf9\u8fd9\u4e9b\u4f18\u8d28\u7684\u8d44\u6e90\u8fdb\u884c\u4e86\u5f52\u7c7b\u5e76\u63d0\u4f9b\u4e86\u4f20\u9001\u95e8\uff0c\u5927\u5bb6\u53ef\u4ee5\u4e86\u89e3\u4e0b\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u8981\u4e3a\u5927\u5bb6\u63a8\u8350\u4e00\u4e2a\u540d\u4e3a \u201cPython-100-Days\u201d \u7684\u9879\u76ee\uff0c\u4e0a\u9762\u6709\u5927\u91cf\u4f18\u8d28\u7684Python\u5b66\u4e60\u8d44\u6599\uff08\u5305\u62ec\u6587\u6863\u3001\u4ee3\u7801\u548c\u76f8\u5173\u8d44\u6e90\uff09\u3002\u5982\u679c\u81ea\u5b66\u80fd\u529b\u4e0d\u662f\u90a3\u4e48\u5f3a\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4e0a\u514d\u8d39\u6216\u8005\u4ed8\u8d39\u7684\u89c6\u9891\u8bfe\u7a0b\u6765\u5b66\u4e60\u5bf9\u5e94\u7684\u77e5\u8bc6\uff1b\u5982\u679c\u81ea\u5f8b\u6027\u6ca1\u6709\u90a3\u4e48\u5f3a\uff0c\u90a3\u5c31\u53ea\u80fd\u5efa\u8bae\u82b1\u94b1\u53c2\u52a0\u57f9\u8bad\u73ed\u4e86\uff0c\u56e0\u4e3a\u82b1\u94b1\u5728\u6709\u4eba\u76d1\u7763\u7684\u73af\u5883\u4e0b\u5b66\u4e60\u5bf9\u5f88\u591a\u4eba\u6765\u8bf4\u786e\u5b9e\u662f\u4e00\u4e2a\u6377\u5f84\uff0c\u4f46\u662f\u8981\u8bb0\u5f97\uff1a\u201c\u5e08\u5085\u9886\u8fdb\u95e8\uff0c\u4fee\u884c\u9760\u5404\u4eba\u201d\u3002\u9009\u62e9\u81ea\u5df1\u70ed\u7231\u7684\u4e1c\u897f\u5e76\u5168\u529b\u4ee5\u8d74\uff0c\u4e0d\u8981\u76f2\u76ee\u7684\u8ddf\u98ce\u5b66\u4e60\uff0c\u8fd9\u4e00\u70b9\u7b97\u662f\u8fc7\u6765\u4eba\u7684\u5fe0\u544a\u5427\u3002\u8bb0\u5f97\u6211\u81ea\u5df1\u521a\u5f00\u59cb\u8fdb\u5165\u8f6f\u4ef6\u5f00\u53d1\u8fd9\u4e2a\u884c\u4e1a\u65f6\uff0c\u6709\u4eba\u8ddf\u6211\u8bf4\u8fc7\u8fd9\u4e48\u4e00\u53e5\u8bdd\uff0c\u73b0\u5728\u4e5f\u5206\u4eab\u51fa\u6765\u4e0e\u8bf8\u541b\u5171\u52c9\uff1a\u201c\u6d6e\u8e81\u7684\u4eba\u6709\u4e24\u79cd\uff1a\u53ea\u89c2\u671b\u800c\u4e0d\u5b66\u4e60\u7684\u4eba\uff0c\u53ea\u5b66\u4e60\u800c\u4e0d\u575a\u6301\u7684\u4eba\uff1b\u6d6e\u8e81\u7684\u4eba\u90fd\u4e0d\u662f\u9ad8\u624b\u3002\u201d","title":"01 Python\u9700\u6c42\u4e0e\u63d0\u9ad8\u7bc7"},{"location":"\u91cd\u8981\u64cd\u4f5c/up/#_1","text":"Python\u5b66\u4e60\u5b8c\u57fa\u7840\u8bed\u6cd5\u77e5\u8bc6\u540e\uff0c\u5982\u4f55\u8fdb\u4e00\u6b65\u63d0\u9ad8\uff1f \u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86Python\u57fa\u7840\u8bed\u6cd5\u7684\u5b66\u4e60\uff0c\u60f3\u8981\u77e5\u9053\u63a5\u4e0b\u6765\u5982\u4f55\u63d0\u9ad8\uff0c\u90a3\u4e48\u4f60\u5f97\u5148\u95ee\u95ee\u81ea\u5df1\u4f60\u8981\u7528Python\u6765\u505a\u4ec0\u4e48\uff1f\u76ee\u524d\u5b66\u4e60Python\u540e\u53ef\u80fd\u7684\u5c31\u4e1a\u65b9\u5411\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u9886\u57df\uff0c\u6211\u628a\u6bcf\u4e2a\u9886\u57df\u9700\u8981\u7684\u6280\u672f\u4f5c\u4e3a\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5173\u952e\u8bcd\u6458\u8981\u3002 \u8bf4\u660e\uff1a\u4ee5\u4e0b\u6570\u636e\u53c2\u8003\u4e86\u4e3b\u8981\u7684\u62db\u8058\u95e8\u6237\u7f51\u7ad9\u4ee5\u53ca\u804c\u53cb\u96c6\u3002 \u804c\u4f4d \u6240\u9700\u6280\u80fd \u62db\u8058\u9700\u6c42\u91cf Python\u540e\u7aef\u5f00\u53d1\u5de5\u7a0b\u5e08 Python\u57fa\u7840 Django / Flask / Tornado / Sanic RESTful / \u63a5\u53e3\u6587\u6863\u64b0\u5199 MySQL / Redis / MongoDB / ElasticSearch Linux / Git / Scrum / PyCharm \u5927 Python\u722c\u866b\u5f00\u53d1\u5de5\u7a0b\u5e08 Python\u57fa\u7840 \u5e38\u7528\u6807\u51c6\u5e93\u548c\u4e09\u65b9\u5e93 Scrapy / PySpider Selenium / Appnium Redis / MongoDB / MySQL \u524d\u7aef / HTTP(S) / \u6293\u5305\u5de5\u5177 \u8f83\u5c11 Python\u91cf\u5316\u4ea4\u6613\u5f00\u53d1\u5de5\u7a0b\u5e08 Python\u57fa\u7840 \u6570\u636e\u7ed3\u6784 / \u7b97\u6cd5 / \u8bbe\u8ba1\u6a21\u5f0f NoSQL\uff08KV\u6570\u636e\u5e93\uff09 \u91d1\u878d\u5b66\uff08\u4e24\u878d\u3001\u671f\u6743\u3001\u671f\u8d27\u3001\u80a1\u7968\uff09 / \u6570\u5b57\u8d27\u5e01 \u8f83\u5927\uff08\u4e00\u7ebf\u57ce\u5e02\uff09 Python\u6570\u636e\u5206\u6790\u5de5\u7a0b\u5e08 / Python\u673a\u5668\u5b66\u4e60\u5de5\u7a0b\u5e08 \u7edf\u8ba1\u5b66\u4e13\u4e1a / \u6570\u5b66\u4e13\u4e1a / \u8ba1\u7b97\u673a\u4e13\u4e1a Python\u57fa\u7840 / \u7b97\u6cd5\u8bbe\u8ba1 SQL / NoSQL / Hive / Hadoop / Spark NumPy / Scikit-Learn / Pandas / Seaborn PyTorch / Tensorflow / OpenCV \u8f83\u5927\uff08\u4e00\u7ebf\u57ce\u5e02\uff09 Python\u81ea\u52a8\u5316\u6d4b\u8bd5\u5de5\u7a0b\u5e08 Python\u57fa\u7840 / \u5355\u5143\u6d4b\u8bd5 / \u8f6f\u4ef6\u6d4b\u8bd5\u57fa\u7840 Linux / Shell / JIRA / \u7985\u9053 / Jenkins / CI / CD Selenium / Robot Framework / Appnium ab / sysbench / JMeter / LoadRunner / QTP \u5927 Python\u81ea\u52a8\u5316\u8fd0\u7ef4\u5de5\u7a0b\u5e08 Python\u57fa\u7840 / Linux / Shell Fabric / Ansible / Playbook Zabbix / Saltstack / Puppet Docker / paramiko \u8f83\u5927\uff08\u4e00\u7ebf\u57ce\u5e02\uff09 Python\u4e91\u5e73\u53f0\u5f00\u53d1\u5de5\u7a0b\u5e08 Python\u57fa\u7840 OpenStack / CloudStack Ovirt / KVM Docker / K8S \u8f83\u5c11\uff08\u4e00\u7ebf\u57ce\u5e02\uff09 \u5982\u679c\u5f04\u6e05\u4e86\u81ea\u5df1\u5c06\u6765\u8981\u505a\u7684\u65b9\u5411\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6709\u9488\u5bf9\u6027\u7684\u5b66\u4e60\u4e86\uff0c\u4e0b\u9762\u7ed9\u5927\u5bb6\u4e00\u4e2a\u63a8\u8350\u4e66\u7c4d\u7684\u6e05\u5355\u3002 \u5165\u95e8\u8bfb\u7269 \u300aPython\u57fa\u7840\u6559\u7a0b\u300b\uff08 Beginning Python From Novice to Professional \uff09 \u300aPython\u5b66\u4e60\u624b\u518c\u300b\uff08 Learning Python \uff09 \u300aPython\u7f16\u7a0b\u300b\uff08 Programming Python \uff09 \u300aPython\u7f16\u7a0b\u4ece\u5165\u95e8\u5230\u5b9e\u8df5\u300b\uff08 Python Crash Course \uff09 \u300aPython Cookbook\u300b \u8fdb\u9636\u8bfb\u7269 \u300a\u8f6f\u4ef6\u67b6\u6784 - Python\u8bed\u8a00\u5b9e\u73b0\u300b\uff08 Software Architecture with Python \uff09 \u300a\u6d41\u7545\u7684Python\u300b\uff08 Fluent Python \uff09 \u300aPython\u8bbe\u8ba1\u6a21\u5f0f\u300b\uff08 Learning Python Design Patterns \uff09 \u300aPython\u9ad8\u7ea7\u7f16\u7a0b\u300b\uff08 Expert Python Programming \uff09 \u300aPython\u6027\u80fd\u5206\u6790\u4e0e\u4f18\u5316\u300b\uff08 Mastering Python High Performance \uff09 \u6570\u636e\u5e93\u76f8\u5173 \u300aMySQL\u5fc5\u77e5\u5fc5\u4f1a\u300b\uff08 MySQL Crash Course \uff09 \u300a\u6df1\u5165\u6d45\u51faMySQL - \u6570\u636e\u5e93\u5f00\u53d1\u3001\u4f18\u5316\u4e0e\u7ba1\u7406\u7ef4\u62a4\u300b \u300aMongoDB\u6743\u5a01\u6307\u5357\u300b\uff08 MongoDB: The Definitive Guide \uff09 \u300aRedis\u5b9e\u6218\u300b\uff08 Redis in Action \uff09 \u300aRedis\u5f00\u53d1\u4e0e\u8fd0\u7ef4\u300b Linux / Shell / Docker / \u8fd0\u7ef4 \u300a\u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc\u300b \u300aLinux\u547d\u4ee4\u884c\u4e0eshell\u811a\u672c\u7f16\u7a0b\u5927\u5168\u300b\uff08 Linux Command Line and Shell Scripting Bible \uff09 \u300aPython\u81ea\u52a8\u5316\u8fd0\u7ef4:\u6280\u672f\u4e0e\u6700\u4f73\u5b9e\u8df5\u300b \u300a\u7b2c\u4e00\u672cDocker\u4e66\u300b\uff08 The Docker Book \uff09 \u300aDocker\u7ecf\u5178\u5b9e\u4f8b\u300b\uff08Docker Cookbook\uff09 Django / Flask / Tornado \u300aDjango\u57fa\u7840\u6559\u7a0b\u300b\uff08 Tango with Django \uff09 \u300a\u8f7b\u91cf\u7ea7Django\u300b\uff08 Lightweight Django \uff09 \u300a\u7cbe\u901aDjango\u300b\uff08 Mastering Django: Core \uff09 \u300aPython Web\u5f00\u53d1\uff1a\u6d4b\u8bd5\u9a71\u52a8\u65b9\u6cd5\u300b\uff08 Test-Driven Development with Python \uff09 \u300aTwo Scoops of Django: Best Practice of Django 1.8\u300b \u300aFlask Web\u5f00\u53d1\uff1a\u57fa\u4e8ePython\u7684Web\u5e94\u7528\u5f00\u53d1\u5b9e\u6218\u300b\uff08 Flask Web Development: Developing Web Applications with Python \uff09 \u300a\u6df1\u5165\u7406\u89e3Flask\u300b\uff08 Mastering Flask \uff09 \u300aIntroduction to Tornado\u300b \u722c\u866b\u5f00\u53d1 \u300a\u7528Python\u5199\u7f51\u7edc\u722c\u866b\u300b\uff08 Web Scraping with Python \uff09 \u300a\u7cbe\u901aPython\u722c\u866b\u6846\u67b6Scrapy\u300b\uff08 Learning Scrapy \uff09 \u300aPython\u7f51\u7edc\u6570\u636e\u91c7\u96c6\u300b\uff08 Web Scraping with Python \uff09 \u300aPython\u722c\u866b\u5f00\u53d1\u4e0e\u9879\u76ee\u5b9e\u6218\u300b \u300aPython 3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218\u300b \u6570\u636e\u5206\u6790 \u300a\u5229\u7528Python\u8fdb\u884c\u6570\u636e\u5206\u6790\u300b\uff08 Python for Data Analysis \uff09 \u300aPython\u6570\u636e\u79d1\u5b66\u624b\u518c\u300b\uff08 Python Data Science Handbook \uff09 \u300aPython\u91d1\u878d\u5927\u6570\u636e\u5206\u6790\u300b\uff08 Python for Finance \uff09 \u300aPython\u6570\u636e\u53ef\u89c6\u5316\u7f16\u7a0b\u5b9e\u6218\u300b\uff08 Python Data Visualization Cookbook \uff09 \u300aPython\u6570\u636e\u5904\u7406\u300b\uff08 Data Wrangling with Python \uff09 \u673a\u5668\u5b66\u4e60 \u300aPython\u673a\u5668\u5b66\u4e60\u57fa\u7840\u6559\u7a0b\u300b\uff08 Introduction to Machine Learning with Python \uff09 \u300aPython\u673a\u5668\u5b66\u4e60\u5b9e\u8df5\u6307\u5357\u300b\uff08 Python Machine Learning Blueprints \uff09 \u300aPython\u673a\u5668\u5b66\u4e60\u5b9e\u8df5\uff1a\u6d4b\u8bd5\u9a71\u52a8\u7684\u5f00\u53d1\u65b9\u6cd5\u300b\uff08 Thoughtful Machine Learning with Python A Test Driven Approach \uff09 \u300aPython\u673a\u5668\u5b66\u4e60\u7ecf\u5178\u5b9e\u4f8b\u300b\uff08 Python Machine Learning Cookbook \uff09 \u300aTensorFlow\uff1a\u5b9e\u6218Google\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u300b \u5176\u4ed6\u4e66\u7c4d \u300aPro Git\u300b \u300aSelenium\u81ea\u52a8\u5316\u6d4b\u8bd5 - \u57fa\u4e8ePython\u8bed\u8a00\u300b\uff08 Learning Selenium Testing Tools with Python \uff09 \u300aSelenium\u81ea\u52a8\u5316\u6d4b\u8bd5\u4e4b\u9053\u300b \u300aScrum\u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\u300b\uff08 Software Development using Scrum \uff09 \u300a\u9ad8\u6548\u56e2\u961f\u5f00\u53d1 - \u5de5\u5177\u4e0e\u65b9\u6cd5\u300b \u5f53\u7136\u5b66\u4e60\u7f16\u7a0b\uff0c\u6700\u91cd\u8981\u7684\u901a\u8fc7\u9879\u76ee\u5b9e\u6218\u6765\u63d0\u5347\u81ea\u5df1\u7684\u7efc\u5408\u80fd\u529b\uff0cGithub\u4e0a\u6709\u5927\u91cf\u7684\u4f18\u8d28\u5f00\u6e90\u9879\u76ee\uff0c\u5176\u4e2d\u4e0d\u4e4f\u4f18\u8d28\u7684Python\u9879\u76ee\u3002\u6709\u4e00\u4e2a\u540d\u4e3a \u201cawesome-python-applications\u201d \u7684\u9879\u76ee\u5bf9\u8fd9\u4e9b\u4f18\u8d28\u7684\u8d44\u6e90\u8fdb\u884c\u4e86\u5f52\u7c7b\u5e76\u63d0\u4f9b\u4e86\u4f20\u9001\u95e8\uff0c\u5927\u5bb6\u53ef\u4ee5\u4e86\u89e3\u4e0b\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u8981\u4e3a\u5927\u5bb6\u63a8\u8350\u4e00\u4e2a\u540d\u4e3a \u201cPython-100-Days\u201d \u7684\u9879\u76ee\uff0c\u4e0a\u9762\u6709\u5927\u91cf\u4f18\u8d28\u7684Python\u5b66\u4e60\u8d44\u6599\uff08\u5305\u62ec\u6587\u6863\u3001\u4ee3\u7801\u548c\u76f8\u5173\u8d44\u6e90\uff09\u3002\u5982\u679c\u81ea\u5b66\u80fd\u529b\u4e0d\u662f\u90a3\u4e48\u5f3a\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4e0a\u514d\u8d39\u6216\u8005\u4ed8\u8d39\u7684\u89c6\u9891\u8bfe\u7a0b\u6765\u5b66\u4e60\u5bf9\u5e94\u7684\u77e5\u8bc6\uff1b\u5982\u679c\u81ea\u5f8b\u6027\u6ca1\u6709\u90a3\u4e48\u5f3a\uff0c\u90a3\u5c31\u53ea\u80fd\u5efa\u8bae\u82b1\u94b1\u53c2\u52a0\u57f9\u8bad\u73ed\u4e86\uff0c\u56e0\u4e3a\u82b1\u94b1\u5728\u6709\u4eba\u76d1\u7763\u7684\u73af\u5883\u4e0b\u5b66\u4e60\u5bf9\u5f88\u591a\u4eba\u6765\u8bf4\u786e\u5b9e\u662f\u4e00\u4e2a\u6377\u5f84\uff0c\u4f46\u662f\u8981\u8bb0\u5f97\uff1a\u201c\u5e08\u5085\u9886\u8fdb\u95e8\uff0c\u4fee\u884c\u9760\u5404\u4eba\u201d\u3002\u9009\u62e9\u81ea\u5df1\u70ed\u7231\u7684\u4e1c\u897f\u5e76\u5168\u529b\u4ee5\u8d74\uff0c\u4e0d\u8981\u76f2\u76ee\u7684\u8ddf\u98ce\u5b66\u4e60\uff0c\u8fd9\u4e00\u70b9\u7b97\u662f\u8fc7\u6765\u4eba\u7684\u5fe0\u544a\u5427\u3002\u8bb0\u5f97\u6211\u81ea\u5df1\u521a\u5f00\u59cb\u8fdb\u5165\u8f6f\u4ef6\u5f00\u53d1\u8fd9\u4e2a\u884c\u4e1a\u65f6\uff0c\u6709\u4eba\u8ddf\u6211\u8bf4\u8fc7\u8fd9\u4e48\u4e00\u53e5\u8bdd\uff0c\u73b0\u5728\u4e5f\u5206\u4eab\u51fa\u6765\u4e0e\u8bf8\u541b\u5171\u52c9\uff1a\u201c\u6d6e\u8e81\u7684\u4eba\u6709\u4e24\u79cd\uff1a\u53ea\u89c2\u671b\u800c\u4e0d\u5b66\u4e60\u7684\u4eba\uff0c\u53ea\u5b66\u4e60\u800c\u4e0d\u575a\u6301\u7684\u4eba\uff1b\u6d6e\u8e81\u7684\u4eba\u90fd\u4e0d\u662f\u9ad8\u624b\u3002\u201d","title":"\u7f51\u4e0a\u770b\u5230\u7684\u4e00\u7bc7\u6bd4\u8f83\u597d\u7684\u65b9\u5411\u6027\u7684\u6587\u7ae0"}]}